<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">Hai&#39;s Teatime</title>
    <subtitle type="html">我的第一个博客，记录了一些学习随笔。</subtitle>
    <updated>2020-01-28T21:17:34+08:00</updated>
    <id>http://hais-teatime.com/</id>
    <link rel="alternate" type="text/html" href="http://hais-teatime.com/" />
    <link rel="self" type="application/atom+xml" href="http://hais-teatime.com/atom.xml" />
    <author>
            <name>Harvey Zhang</name>
            <uri>http://hais-teatime.com/</uri>
            
                <email>Hyuain97@163.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.63.2">Hugo</generator>
        <entry>
            <title type="text">小项目：前端导航页面 - 维生素导航·Vue</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2020-01-16-navigation-vue/" />
            <id>http://hais-teatime.com/post/2020-01-16-navigation-vue/</id>
            <updated>2020-01-28T21:15:51+08:00</updated>
            <published>2020-01-16T17:14:39+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[初学 Vue，将第一个项目——用 jQuery 和原生 CSS 所做的一个导航页面——给 Renew 了一下。点击可以查看 代码仓库 和 效果预览。]]></summary>
            
                <content type="html"><![CDATA[<p>初学 Vue，将第一个项目——用 jQuery 和原生 CSS 所做的一个导航页面——给 Renew 了一下。点击可以查看 <a href="https://github.com/Hyuain/navigation-vue" target="_blank">代码仓库</a> 和 <a href="http://hais-teatime.com/navigation-vue" target="_blank">效果预览</a>。</p>

<h1 id="功能介绍">功能介绍</h1>

<p>目前维生素导航主要分为两个部分：<strong>搜索框</strong> 和 <strong>网页导航</strong>。</p>

<p>在上方的搜索框中输入文字可以使用对应的搜索引擎进行搜索，目前内置三款搜索引擎：Google、百度、Bing，默认为 Google。</p>

<p>点击下方的网页收藏可以进入到对应的页面，目前已经内置了一些默认的页面。</p>

<p>鼠标浮动到图标上会出现删除按钮，点击可以将网页删除；移动设备长按会弹出删除框，点击中间的红色小叉叉也可以删除网页。</p>

<p>点击 <strong>'+'</strong> 会弹出新增网页的对话框，可以输入网页的名称和 URL；若没有输入名称，则将默认使用域名作为名称。然后会自动请求图标，若图标请求失败，将会使用名称的第一个字符作为网页的图标。</p>

<p>网站的信息是存储在 LocalStorage 中的，所以清除历史记录的操作会清空之前添加的网站。</p>

<h1 id="在项目中学习">在项目中学习</h1>

<h2 id="搜索框">搜索框</h2>

<h3 id="1-如何实现三个不同搜索引擎的切换">1. 如何实现三个不同搜索引擎的切换？</h3>

<p>首先想到的是通过 <code>v-if</code> 来实现，设置一个变量 <code>searchEngine</code>，点到对应的搜索引擎的时候就将 <code>searchEngine</code> 变为对应的值。</p>

<p>那么怎样知道被点击的是哪一个图标呢？好在我们的图标比较少，在 <code>@click</code> 的点击事件中，我们可以在 <code>$event</code> 之后再传入一个参数，用来表示搜索引擎即可。</p>

<p>这样最简单的切换效果就实现了。</p>

<p>但是我们想再加一点过渡效果，Vue 为我们准备了在 <code>v-if</code> 切换出现和消失的时候可以使用的过渡 API。但是简单的使用之后发现一个问题，由于点击切换标签之间实际上是无间隔的，<code>v-if</code> 值为 <code>false</code> 之后就会马上消失，值为 <code>true</code> 的时候又会马上出现，但是动画是需要时间的（进入和退出都有时间），这就导致页面上可能同时出现好几个 LOGO，会变得非常混乱；同时因为 LOGO 在 DOM 中是有上下顺序的，所以按照 DOM 结构从上到下点是正常的，但是如果倒着点就会出现 BUG。</p>

<p>因此，我设计了这样的逻辑：</p>

<p>当我们点击切换搜索引擎时——</p>

<ol>
<li>立即清除之前的计时器；</li>
<li>立即置空 <code>searchEngine</code>（原来的 LOGO 退出 DOM）；</li>

<li><p>延迟 <code>400ms</code> 为 <code>searchEngine</code> 赋新值（新的 LOGO 进入 DOM），并记下计时器的 <code>timerID</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">changeSearchEngine</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">clearTimeout</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">timer</span><span class="p">)</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">searchEngine</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">searchEngine</span> <span class="o">=</span> <span class="nx">value</span>
  <span class="p">}</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>

<h2 id="网页列表">网页列表</h2>

<h3 id="1-如何实现移动端的长按效果">1. 如何实现移动端的长按效果？</h3>

<p>由于网页组件本身就已经比较大了，而且为了通过练习加深对 Vue 的熟悉，我选择将长按效果封装成一个指令来实现，在这里我使用的是全局组件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// longpress.js
</span><span class="c1"></span>    <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
      <span class="nx">install</span><span class="p">(</span><span class="nx">Vue</span><span class="p">,</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">time</span><span class="o">:</span> <span class="mi">1000</span>
      <span class="p">}</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">Vue</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;longpress&#39;</span><span class="p">,</span> <span class="p">{</span>
          <span class="nx">bind</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">binding</span><span class="p">,</span> <span class="nx">vnode</span><span class="p">,</span> <span class="nx">oldVnode</span><span class="p">)</span> <span class="p">{</span>
          <span class="p">}</span>
        <span class="p">}</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>

<span class="c1">// main.js
</span><span class="c1"></span>    <span class="kr">import</span> <span class="nx">LongPress</span> <span class="nx">from</span> <span class="s1">&#39;...&#39;</span>
    <span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">LongPress</span><span class="p">,</span> <span class="p">{</span>
      <span class="nx">time</span><span class="o">:</span> <span class="mi">350</span>
    <span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="c">&lt;!--</span><span class="c"> MyComponent.vue</span><span class="c">--&gt;</span>
    <span class="nt">&lt;template</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">v-longpress=</span><span class="s">&#34;doSomething&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/template&gt;</span></code></pre></td></tr></table>
</div>
</div>
<p>指令的钩子函数包含 <code>el</code>、<code>binding</code>、<code>vnode</code>、<code>oldVnode</code> 这四个参数，指令 <code>v-longpress</code> 的主要部分将会用到 <code>el</code> 和 <code>binding</code>：通过 <code>el</code> 我可以获取到指令绑定的元素，也就是现在正在被长按的元素；通过 <code>binding.value</code> 我可以获取到指令的绑定值，这里 Vue 会自动识别我的绑定值，我们可以让他绑定值为一个回调函数，在指令中来调用这个函数。</p>

<p>在移动端，我们主要依靠 <code>touchstart</code> <code>touchend</code> <code>touchmove</code> <code>touchcancel</code> 来监听触摸状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// pressTimer 变量用来存放计时器的 ID
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">pressTimer</span> <span class="o">=</span> <span class="kc">null</span>

<span class="c1">// longPress 变量用来标记是否是长按
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">longPress</span> <span class="o">=</span> <span class="kc">false</span>

<span class="c1">// handler 函数用来执行回调函数
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">binding</span><span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">el</span><span class="p">)</span>
    <span class="p">}</span>

<span class="c1">// start 用来启动长按事件：options.time 的时间之后触发 handler
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">start</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">(</span><span class="p">)</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;click&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">pressTimer</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">pressTimer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
          <span class="nx">handler</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
          <span class="nx">longPress</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="p">}</span><span class="p">,</span> <span class="nx">options</span><span class="p">.</span><span class="nx">time</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>

<span class="c1">// cancel 用来取消长按事件：清除计时器
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">cancel</span> <span class="o">=</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">pressTimer</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">pressTimer</span><span class="p">)</span>
        <span class="nx">pressTimer</span> <span class="o">=</span> <span class="kc">null</span>
        <span class="nx">longPress</span> <span class="o">=</span> <span class="kc">false</span>
      <span class="p">}</span>
    <span class="p">}</span>

<span class="c1">// 绑定事件
</span><span class="c1"></span><span class="c1">// touchstart 触发长按
</span><span class="c1"></span>    <span class="nx">el</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchstart&#39;</span><span class="p">,</span> <span class="nx">start</span><span class="p">)</span>
<span class="c1">// touchend 时进行判断，是长按还是短按，短按则触发 click 事件
</span><span class="c1"></span>    <span class="nx">el</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchend&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">pressTimer</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nx">longPress</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">el</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="p">)</span>
     <span class="p">}</span>
      <span class="nx">cancel</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
    <span class="p">}</span><span class="p">)</span>
<span class="c1">// touchcancel 和 touchmove 时取消长按事件
</span><span class="c1"></span>    <span class="nx">el</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchcancel&#39;</span><span class="p">,</span><span class="nx">cancel</span><span class="p">)</span>
    <span class="nx">el</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchmove&#39;</span><span class="p">,</span><span class="nx">cancel</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<h3 id="2-如何获取网页的-icon">2. 如何获取网页的 ICON ？</h3>

<p>这一步实际上是在添加网页的对话框组件中实现的，在输入的 URL 进行处理之后，将得到 <code>https://domain</code>，先直接在其后面加上 <code>/favicon.ico</code> 作为其 ICON。在这之前其实也尝试了一些网络上的 API，但是效果其实都不太好，跟直接用 <code>/favicon.ico</code> 获取到的差别不大，并且最终图片也不是很大，不需要清晰度特别高。</p>

<p>然后在网页组件列表组件中直接作为 <code>&lt;img/&gt;</code> 的 <code>src</code> 尝试获取，若失败再通过 <code>@error=&quot;handelIcoError&quot;</code> 来调用函数进行处理，替换成文本。</p>

<h2 id="添加网页对话框">添加网页对话框</h2>

<h3 id="1-如何呼出对话框">1. 如何呼出对话框？</h3>

<p>为了减小组件的逻辑复杂性，我并没有将对话框组件放在网页列表组件之中，而是设计成了第三个平行的组件，当网页列表中的 <strong>'+'</strong> 被点击时，网页列表通过 <code>eventBus</code> 将 <code>addFormOpen</code> 置为 <code>true</code>，从而打开对话框。</p>

<p>我是这样使用 <code>eventBus</code> 的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// App.vue
</span><span class="c1"></span>    <span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>  
    <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
      <span class="nx">data</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
          <span class="nx">eventBus</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span>
            <span class="nx">data</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
              <span class="k">return</span> <span class="p">{</span>
                <span class="nx">addFormOpen</span><span class="o">:</span> <span class="kc">false</span>
              <span class="p">}</span>
            <span class="p">}</span>
          <span class="p">}</span><span class="p">)</span><span class="p">,</span>
        <span class="p">}</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="nx">provide</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
          <span class="nx">eventBus</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">eventBus</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>

<span class="c1">// MyComponent.vue
</span><span class="c1"></span>    <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
      <span class="nx">inject</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;eventBus&#39;</span><span class="p">]</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>当对话框确认提交时，他将 <code>addFormOpen</code> 置为 <code>false</code>，并且将信息通过 <code>eventBus</code> 传给网页列表组件。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/vue/" term="Vue" label="Vue" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E9%A1%B9%E7%9B%AE/" term="项目" label="项目" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Vue 第四课：模板语法</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-27-vue-4/" />
            <id>http://hais-teatime.com/post/2019-12-27-vue-4/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-27T16:34:09+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[看看 Vue 中的模板语法。]]></summary>
            
                <content type="html"><![CDATA[<p>看看 Vue 中的模板语法。</p>

<hr />

<h2 id="key-points">Key Points</h2>

<ol>
<li>三种方式书写 <code>template</code>： HTML 中、options 中、.vue 文件中</li>
<li><code>.sync</code> 使得当一个子组件改变了一个 <code>prop</code> 的值时，这个父组件中绑定的值也会跟着改变。</li>
</ol>

<hr />

<h2 id="开始">开始</h2>

<p>通常，我们说 “模板”，说的就是 <code>template</code> 这样一个东西，我们可以在里面书写类似 HTML 的代码，从而得到自己想要的页面效果。在 Vue 中，这样的一个 <code>template</code> 可以写在以下三个地方：</p>

<ol>
<li><p>HTML 文件中，需要使用 Vue 完整版</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;xxx&#34;</span><span class="p"></span><span class="p">&gt;</span>
  {{n}}
  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;+1&#34;</span><span class="p"></span><span class="p">&gt;</span>+1<span class="p">&lt;</span><span class="p">/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span>
  <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#xxx&#34;</span><span class="p">,</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="nx">n</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span><span class="p">,</span> <span class="c1">// data 可以改成函数
</span><span class="c1"></span>  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span> <span class="nx">add</span><span class="p">(</span><span class="p">)</span><span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">}</span>
<span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>

<li><p>options 中，需要使用 Vue 完整版</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">app</span><span class="p"></span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span>
  <span class="nx">template</span><span class="o">:</span> <span class="sb">`</span><span class="sb">
</span><span class="sb">    &lt;div id=xxx&gt;
</span><span class="sb">      {{n}}
</span><span class="sb">      &lt;button @click=&#34;add&#34;&gt;+1&lt;/button&gt;
</span><span class="sb">    &lt;/div&gt;
</span><span class="sb">   </span><span class="sb">`</span><span class="p">,</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="nx">n</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span><span class="p">,</span> <span class="c1">// data 可以改成函数
</span><span class="c1"></span>  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span> <span class="nx">add</span><span class="p">(</span><span class="p">)</span><span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">}</span>
<span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span> <span class="c1">// 注意这个时候 div#app 会被替代
</span></code></pre></td></tr></table>
</div>
</div></li>

<li><p>.vue 文件中，可以使用 Vue 运行时版本</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vue" data-lang="vue"><span class="p">&lt;</span><span class="nt">template</span><span class="p"></span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="na">xxx</span><span class="p"></span><span class="p">&gt;</span>
    <span class="p">{</span><span class="p">{</span><span class="nx">n</span><span class="p">}</span><span class="p">}</span>
    <span class="p">&lt;</span><span class="nt">button</span> <span class="nt">@click</span><span class="s">=&#34;add&#34;</span><span class="p">&gt;</span><span class="err">+</span><span class="na">1</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">button</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">template</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p"></span><span class="p">&gt;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="nx">data</span><span class="p">(</span><span class="p">)</span><span class="p">{</span> <span class="k">return</span> <span class="p">{</span> <span class="nx">n</span><span class="o">:</span><span class="mi">0</span> <span class="p">}</span> <span class="p">}</span><span class="p">,</span> <span class="c1">// data 必须为函数
</span><span class="c1"></span>  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span> <span class="nx">add</span><span class="p">(</span><span class="p">)</span><span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">}</span>
<span class="p">}</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">style</span><span class="p"></span><span class="p">&gt;</span>
<span class="cm">/*CSS-Code*/</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">style</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./app.vue&#39;</span> <span class="c1">// App 是一个 options 对象
</span><span class="c1"></span><span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span>
  <span class="nx">render</span><span class="o">:</span> <span class="nx">h</span> <span class="p">=&gt;</span> <span class="nx">h</span><span class="p">(</span><span class="nx">App</span><span class="p">)</span>
<span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>

<p>这里我们要注意的是，<code>template</code> 里面书写的其实不是 HTML 代码，<strong>而是 XML 代码</strong>，二者有所不同，比如HTML 与 XML 写法不同，比如在 XML 中，自闭合标签要加上 <code>/</code>，而且空标签需要写成自闭合的形式——尽管官方文档称 “Vue.js 使用了基于 HTML 的模板语法”。</p>

<h2 id="语法">语法</h2>

<h3 id="插值">插值</h3>

<ul>
<li><p>插入 JavaScript 表达式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">span</span><span class="p"></span><span class="p">&gt;</span>{{ number + 1 }}<span class="p">&lt;</span><span class="p">/</span><span class="nt">span</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">span</span><span class="p"></span><span class="p">&gt;</span>{{ ok ? &#39;YES&#39; : &#39;NO&#39; }}<span class="p">&lt;</span><span class="p">/</span><span class="nt">span</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">span</span><span class="p"></span><span class="p">&gt;</span>{{ message.split(&#39;&#39;).reverse().join(&#39;&#39;) }}<span class="p">&lt;</span><span class="p">/</span><span class="nt">span</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>

<p>如果表达式的值为 <code>undefined</code> 或者 <code>null</code>，则页面上将不会显示。</p>

<ul>
<li><p>插入原始 HTML</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">p</span><span class="p"></span><span class="p">&gt;</span>Using v-html directive: <span class="p">&lt;</span><span class="nt">span</span> <span class="na">v-html</span><span class="o">=</span><span class="s">&#34;rawHtml&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">span</span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">p</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>

<p><code>span</code> 将会被 <code>rawHtml</code> 的内容所替换，并且 <code>rawHtml</code> 里面的数据绑定将会失效，因此我们不能用 <code>v-html</code> 来在 <code>template</code> 里面使用 <code>template</code>，这个时候需要用 <code>component</code> 来进行组件的组合。</p>

<ul>
<li>插入特性</li>
</ul>

<p>像 <code>{{}}</code> 这样的语法并不能使用在 HTML 属性上，这时我们需要依靠 <code>v-bind</code> 来帮我们绑定特性。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vue" data-lang="vue"><span class="p">&lt;</span><span class="nt">img</span> <span class="na">v</span><span class="nt">-bind</span><span class="nt">:src</span><span class="s">=&#34;x&#34;</span> <span class="p">/</span><span class="p">&gt;</span>
<span class="c">&lt;!--</span> <span class="nx">可以简写为</span> <span class="o">--</span><span class="o">&gt;</span>
<span class="p">&lt;</span><span class="nt">img</span> <span class="nt">:src</span><span class="s">=&#34;x&#34;</span> <span class="p">/</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span>
      <span class="o">:</span><span class="na">style</span><span class="o">=</span><span class="s">&#34;{border: &#39;1px solid red&#39;}&#34;</span> <span class="p">/</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<h3 id="指令">指令</h3>

<p>在 Vue 中，指令（Directives）就是带有 v- 前缀的特殊特性，里面的值应该是 JavaScript 表达式。</p>

<p>有的指令是可以接受 <strong>参数</strong> 的，一般的指令看起来就像 <code>v-指令名:参数=值</code>。</p>

<p>而我们用方括号将参数括起来，则可以构成 <strong>动态参数</strong>，他会被先当做 JavaScript 表达式进行求值操作，比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vue" data-lang="vue"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">v</span><span class="nt">-bind</span><span class="nt">:[attributeName]</span><span class="s">=&#34;url&#34;</span><span class="p"></span><span class="p">&gt;</span> <span class="p">...</span> <span class="p">&lt;</span><span class="p">/</span><span class="nt">a</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<p>如果我们的 data 中有一个叫 <code>attributeName</code> 的属性，他的值为 <code>href</code>，那么上面这句话将等价为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vue" data-lang="vue"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">v</span><span class="nt">-bind</span><span class="nt">:href</span><span class="s">=&#34;url&#34;</span><span class="p"></span><span class="p">&gt;</span> <span class="p">...</span> <span class="p">&lt;</span><span class="p">/</span><span class="nt">a</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<p>我们常用的指令可以在 <a href="https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4" target="_blank">Vue 文档 - 指令</a> 中找到。</p>

<h3 id="修饰符">修饰符</h3>

<p>有的指令有 <strong>修饰符</strong>，比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">@click.stop=&#34;add&#34; 阻止冒泡
@click.prevent=&#34;add&#34; 阻止默认动作
@click.stop.prevent=&#34;add&#34;
@keypress.13 或 @keypress.enter 按下回车之后执行</code></pre></td></tr></table>
</div>
</div>
<p>我们同样可以在刚才的文档中找到关于修饰符的说明，这里主要讲一下 <code>.sync</code> 修饰符。</p>

<p>我们可以有这样一个例子：</p>

<ul>
<li>有一个组件 <code>total.vue</code>，用来显示 <strong>总共点击的次数</strong>，其 <code>data</code> 中的 <code>clickNum</code> 记录了这个值；</li>

<li><p><code>total.vue</code> 引入了一个子组件 <code>me.vue</code>，他可以接受来自 <code>total.vue</code> 传来的 <strong>总共点击的次数</strong>；并且，我们点击他的按钮，就可以在 <strong>总共点击的次数</strong> 上加 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vue" data-lang="vue"><span class="c1">// 在 total.vue 中
</span><span class="c1"></span>
<span class="p">&lt;</span><span class="nt">template</span><span class="p"></span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span><span class="p"></span><span class="p">&gt;</span>
<span class="nx">一共点击了</span> <span class="p">{</span><span class="p">{</span><span class="nx">clickNum</span><span class="p">}</span><span class="p">}</span> <span class="nx">次</span>
<span class="p">&lt;</span><span class="nt">Me</span> <span class="nt">:totalClick</span><span class="s">=&#34;clickNum&#34;</span> <span class="err">@</span><span class="na">update</span><span class="o">:</span><span class="na">totalClick</span><span class="o">=</span><span class="s">&#34;clickNum = $event&#34;</span><span class="p">/</span><span class="p">&gt;</span>
<span class="c">&lt;!--</span> <span class="nx">$event</span> <span class="nx">保存了</span> <span class="nx">$emit</span> <span class="nx">后面的传过来的那个值</span> <span class="o">--</span><span class="o">&gt;</span>
<span class="c">&lt;!--</span> <span class="nx">这句话也可以用</span> <span class="p">.</span><span class="nx">sync</span> <span class="nx">来写</span> <span class="o">--</span><span class="o">&gt;</span>
<span class="p">&lt;</span><span class="nt">Me</span> <span class="nt">:totalClick.sync</span><span class="s">=&#34;clickNum&#34;</span> <span class="p">/</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">template</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p"></span><span class="p">&gt;</span>
<span class="kr">import</span> <span class="nx">Me</span> <span class="nx">from</span> <span class="s1">&#39;./me.vue&#39;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
<span class="nx">data</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
<span class="k">return</span> <span class="p">{</span> <span class="nx">clickNum</span><span class="o">:</span> <span class="mi">100</span> <span class="p">}</span>  
<span class="p">}</span><span class="p">,</span>
<span class="nx">components</span><span class="o">:</span> <span class="p">{</span> <span class="nx">Me</span> <span class="p">}</span>
<span class="p">}</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vue" data-lang="vue"><span class="c1">// 在 me.vue 中
</span><span class="c1"></span>
<span class="p">&lt;</span><span class="nt">template</span><span class="p"></span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span><span class="p"></span><span class="p">&gt;</span>
<span class="nx">我点击了</span> <span class="p">{</span><span class="p">{</span><span class="nx">myClick</span><span class="p">}</span><span class="p">}</span> <span class="nx">次</span><span class="err">，</span><span class="nx">我知道现在所有人一共点击了</span> <span class="p">{</span><span class="p">{</span><span class="nx">totalClick</span><span class="p">}</span><span class="p">}</span> <span class="nx">次</span>
<span class="p">&lt;</span><span class="nt">button</span> <span class="nt">@click</span><span class="s">=&#34;clicked&#34;</span><span class="p">&gt;</span><span class="na">点击</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">template</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p"></span><span class="p">&gt;</span>
<span class="kr">export</span> <span class="k">default</span><span class="p">{</span>
<span class="nx">props</span><span class="o">:</span><span class="p">[</span><span class="nx">totalClick</span><span class="p">]</span><span class="p">,</span>
<span class="nx">data</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
<span class="k">return</span> <span class="p">{</span> <span class="nx">myClick</span><span class="o">:</span><span class="mi">0</span> <span class="p">}</span>  
<span class="p">}</span><span class="p">,</span>
<span class="nx">methods</span><span class="o">:</span><span class="p">{</span>
<span class="nx">clicked</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">myClicked</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;update-totalClick&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">totalClick</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>
<span class="p">}</span>
<span class="p">}</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>

<p>下面是代码的预览效果：
<img src="/images/vue-1.gif" alt="preview" /></p>

<p>这段代码也可以在 <a href="https://codesandbox.io/s/kind-cookies-1o6rs" target="_blank">Codesandbox</a> 中进行预览。</p>

<p>看一下过程：</p>

<ol>
<li>将父组件的值传给子组件，子组件需用 <code>props</code> 接收这个值；</li>
<li>子组件触发 <code>clicked</code> 事件之后，调用 <code>$emit('update-totalClick', this.totalClick + 1)</code></li>
<li>父组件原来要写成 <code>&lt;Me :totalClick=&quot;clickNum&quot; @update:totalClick=&quot;clickNum = $event&quot;/&gt;</code>，而现在只需要写 <code>Me :totalClick.sync=&quot;clickNum&quot; /</code>就可以了。</li>
</ol>

<p>总而言之，<code>.sync</code> 使得当一个子组件改变了一个 <code>prop</code> 的值时，这个父组件中绑定的值也会跟着改变——而此前我们需要比较麻烦的监听过程。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/vue/" term="Vue" label="Vue" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Vue 第三课：computed 和 watch</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-25-vue-3/" />
            <id>http://hais-teatime.com/post/2019-12-25-vue-3/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-25T18:32:33+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[聊聊 options 中的 computed 和 watch。]]></summary>
            
                <content type="html"><![CDATA[<p>聊聊 options 中的 computed 和 watch。</p>

<hr />

<h2 id="key-points">Key Points</h2>

<ol>
<li>computed 是用来计算一个值的，跟 getter-setter 用法差不多，调用的时候不需要加括号</li>
<li>computed 有缓存，如果依赖的值没有改变，那么他也不会进行重新计算</li>
<li>watch 是异步的，必要时使用 <code>Vue.nextTick(callback)</code></li>
<li>watch 有 immediate 和 deep 这两个选项</li>
<li>watch 侦听变化的规则是 <code>===</code> 规则，简单类型看值，对象看地址</li>
</ol>

<hr />

<blockquote>
<p>可参考：
<a href="https://cn.vuejs.org/v2/api/#computed" target="_blank">Vue 文档 - computed</a>；
<a href="https://cn.vuejs.org/v2/api/#watch" target="_blank">Vue 文档 - watch</a></p>
</blockquote>

<h2 id="computed">computed</h2>

<p><code>computed</code> 其实跟我们之前讨论的 getter-setter 属性在形式上比较像，下面代码中的 <code>displayName</code> 就是计算属性。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">user</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;harvey@example.com&#34;</span><span class="p">,</span>
      <span class="nx">nickname</span><span class="o">:</span> <span class="s2">&#34;hai&#34;</span><span class="p">,</span>
      <span class="nx">phone</span><span class="o">:</span> <span class="s1">&#39;1234567890&#39;</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">computed</span><span class="o">:</span><span class="p">{</span> <span class="c1">// 能够将计算而来的属性作为属性
</span><span class="c1"></span>    <span class="nx">displayName</span><span class="p">(</span><span class="p">)</span><span class="p">{</span> <span class="c1">// 只读
</span><span class="c1"></span>      <span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">user</span>
      <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nx">nickname</span> <span class="o">||</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span> <span class="o">||</span> <span class="nx">user</span><span class="p">.</span><span class="nx">phone</span>
    <span class="p">,</span>
    <span class="c1">// 或者写成：
</span><span class="c1"></span>    <span class="nx">displayName</span><span class="o">:</span> <span class="p">{</span> <span class="c1">// 存取
</span><span class="c1"></span>      <span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">user</span>
        <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nx">nickname</span> <span class="o">||</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span> <span class="o">||</span> <span class="nx">user</span><span class="p">.</span><span class="nx">phone</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span><span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">nickname</span> <span class="o">=</span> <span class="nx">value</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">template</span><span class="o">:</span><span class="sb">`</span><span class="sb">
</span><span class="sb">    &lt;div&gt;
</span><span class="sb">      {{displayName}}
</span><span class="sb">    &lt;/div&gt;
</span><span class="sb">  </span><span class="sb">`</span>
<span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>这里要注意的是，<code>computed</code> 是有缓存的，如果 <code>computed</code> 依赖的属性没有变化，那么就不会重新计算；而 getter-setter 默认是不会做缓存的。</p>

<h2 id="watch">watch</h2>

<p>简单来说，watch 就是观察到变化之后就执行一段函数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nx">c</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nx">d</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nx">e</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">f</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">g</span><span class="o">:</span> <span class="mi">5</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">a</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">oldVal</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;new: %s, old: %s&#39;</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">oldVal</span><span class="p">)</span>
    <span class="p">}</span><span class="p">,</span>
    <span class="nx">b</span><span class="o">:</span> <span class="s1">&#39;someMethod&#39;</span><span class="p">,</span>
    <span class="nx">c</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">handler</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">oldVal</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span><span class="p">,</span>
      <span class="nx">deep</span><span class="o">:</span> <span class="kc">true</span> <span class="c1">// 这个可以使得监听到内部数据的变化，如果里面变了，那么就触发
</span><span class="c1"></span>    <span class="p">}</span><span class="p">,</span>
    <span class="nx">d</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">handler</span><span class="o">:</span> <span class="s1">&#39;someMethod&#39;</span><span class="p">,</span> <span class="c1">// 使用什么方法
</span><span class="c1"></span>      <span class="nx">immediate</span><span class="o">:</span> <span class="kc">true</span> <span class="c1">// 在侦听开始之后被立即调用
</span><span class="c1"></span>    <span class="p">}</span><span class="p">,</span>
    <span class="nx">e</span><span class="o">:</span> <span class="p">[</span>
      <span class="s1">&#39;handle1&#39;</span><span class="p">,</span>
      <span class="kd">function</span> <span class="nx">handle2</span> <span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">oldVal</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="nx">handler</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">handle3</span> <span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">oldVal</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span><span class="p">,</span>
        <span class="cm">/* ... */</span>
      <span class="p">}</span>
    <span class="p">]</span><span class="p">,</span>
    <span class="c1">// watch vm.e.f&#39;s value: {g: 5}
</span><span class="c1"></span>    <span class="s1">&#39;e.f&#39;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">oldVal</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span><span class="p">)</span>
<span class="nx">vm</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1">// =&gt; new: 2, old: 1
</span></code></pre></td></tr></table>
</div>
</div>
<p><strong>注意：不要使用箭头函数来定义 watcher，<code>this</code> 是 <code>window</code></strong>，事实上，在 Vue 的很多地方（比如 data、computed 等)，都是不推荐使用箭头函数的，因为这样会使得函数中的 this 没有值，至于为什么没有值，可以参考 <a href="http://hais-teatime.com/post/再看this/" target="_blank">这篇文章</a>。</p>

<p><strong>注意：Vue 在更新 DOM 时是异步执行的。</strong></p>

<blockquote>
<p>只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替。</p>

<p>例如，当你设置 <code>vm.someData = 'new value'</code>，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 Vue.nextTick(callback)。这样回调函数将在 DOM 更新完成后被调用。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span>
  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#example&#39;</span><span class="p">,</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;123&#39;</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">template</span><span class="o">:</span> <span class="sb">`</span><span class="sb">
</span><span class="sb">    &lt;div id=&#34;example&#34;&gt;{{message}}&lt;/div&gt;
</span><span class="sb">  </span><span class="sb">`</span>
<span class="p">}</span><span class="p">)</span>
<span class="nx">vm</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="s1">&#39;new message&#39;</span> <span class="c1">// 更改数据
</span><span class="c1"></span><span class="nx">vm</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">===</span> <span class="s1">&#39;new message&#39;</span> <span class="c1">// false
</span><span class="c1"></span><span class="nx">Vue</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">vm</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">===</span> <span class="s1">&#39;new message&#39;</span> <span class="c1">// true
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/vue/" term="Vue" label="Vue" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Vue 第二课：data 与 响应式</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-25-vue-2/" />
            <id>http://hais-teatime.com/post/2019-12-25-vue-2/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-25T16:30:24+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[聊聊 options 中的 data。]]></summary>
            
                <content type="html"><![CDATA[<p>聊聊 options 中的 data。</p>

<hr />

<h2 id="key-points">Key Points</h2>

<ol>
<li>Vue 的 data 是响应式的，如果改变 data，那么 UI 就会刷新</li>
<li>Vue 2 通过 Object.defineProperty 实现数据响应式</li>
<li>Vue 2 会将原来的属性变为 getter-setter 属性，并创建一个代理来操纵数据</li>
</ol>

<hr />

<blockquote>
<p>可参考：
<a href="https://cn.vuejs.org/v2/api/#data" target="_blank">Vue 文档 - data</a>；
<a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank">Vue 文档 - 深入解响应式原理</a>；
<a href="https://cn.vuejs.org/v2/guide/list.html#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" target="_blank">Vue 文档 - 列表渲染</a></p>
</blockquote>

<h2 id="getter-和-setter">getter 和 setter</h2>

<p>由于 getter 和 setter 是 Vue 数据响应式中运用到的非常重要的一环，我们得先把这两个东西搞清楚。</p>

<p>通过下面这段代码，我们可以很清楚地了解到 get 和 set 其实就是两个函数：get 返回了一个拼凑的字符串，set 则修改了 person 内部的 firstName 和 lastName 两个真实存在的属性——但是这两个函数的定义和调用稍稍有点特别。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">firstName</span><span class="o">:</span> <span class="s1">&#39;Harvey&#39;</span><span class="p">,</span>
  <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;Zhang&#39;</span><span class="p">,</span>
  <span class="nx">get</span> <span class="nx">name</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// getter
</span><span class="c1"></span>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">set</span> <span class="nx">name</span><span class="p">(</span><span class="nx">newName</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// setter
</span><span class="c1"></span>    <span class="nx">newName</span> <span class="o">=</span> <span class="nx">newName</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">newName</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> 
    <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">newName</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="p">}</span><span class="p">,</span> 
  <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;name： &#39;</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// 这就是 getter，我们在调用的时候不需要再使用 obj.name()
</span><span class="c1"></span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Kate Wu&#39;</span> <span class="c1">// 这就是 setter，用 = &#39;xxx&#39; 触发 set 函数
</span></code></pre></td></tr></table>
</div>
</div>
<p>我们可以看到 <code>person</code> 中的 <code>name</code> 表示得有点特别，事实上他并不是一个真实存在的属性。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="p">(</span><span class="p">...</span><span class="p">)</span><span class="p">,</span> <span class="c1">// name 不是一个真实的属性，但我们确实可以读写 name
</span><span class="c1"></span>  <span class="nx">firstName</span><span class="o">:</span> <span class="s2">&#34;Kate&#34;</span><span class="p">,</span>
  <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&#34;Wu&#34;</span><span class="p">,</span>
  <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
  <span class="nx">get</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">name</span><span class="p">(</span><span class="p">)</span><span class="p">,</span>
  <span class="nx">set</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">name</span><span class="p">(</span><span class="nx">newName</span><span class="p">)</span><span class="p">,</span>
  <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<h2 id="object-defineproperty">Object.defineProperty</h2>

<p>我们可以使用 <code>Object.defineProperty()</code> 方法来给对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象，详细的用法可以参照 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty]" target="_blank">MDN 文档</a>，我们这里只介绍影响后续理解的部分。</p>

<p>基本语法是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">prop</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span>
<span class="c1">// Object.defineProperty
</span><span class="c1"></span><span class="c1">// (要在上面定义属性的对象, 要定义或修改的属性的名称, 将被定义或修改的属性描述符)
</span></code></pre></td></tr></table>
</div>
</div>
<p>这里需要介绍一个概念—— <strong>描述符</strong>。目前我们的描述符有两种：<strong>数据描述符</strong> 和 <strong>存取描述符</strong>。</p>

<ul>
<li><p><strong>数据描述符</strong> 是一个具有值的属性，该值可能是可写的，也可能不是可写的——也就是类似于我们常见的那种普通属性。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span>

<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="p">{</span>
<span class="nx">value</span><span class="o">:</span><span class="mi">0</span>
<span class="c1">// 数据描述符，这里的意思是：给 data 定义一个新属性 n，他的值为 0
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>

<li><p><strong>存取描述符</strong> 是由 getter-setter 函数对描述的属性——也就是上文说的并不真实存在的属性。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span>

<span class="nx">data</span><span class="p">.</span><span class="nx">_n</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">// _n 用来存实际上不存在的 n 的值
</span><span class="c1"></span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="p">{</span>
<span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="p">{</span> <span class="c1">// getter-setter 函数是存取描述符，可以用来在存取的时候做校验
</span><span class="c1"></span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_n</span>
<span class="p">}</span><span class="p">,</span>
<span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span><span class="p">{</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span>
<span class="k">this</span><span class="p">.</span><span class="nx">_n</span> <span class="o">=</span> <span class="nx">value</span>
<span class="p">}</span>
<span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>

<p>至此，我们学会了使用 getter-setter 来为函数新增属性，但是我们可能还需要借助代理，并且监听原来的属性来防止直接对 <code>this._n</code> 进行篡改。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">myData</span> <span class="o">=</span> <span class="p">{</span><span class="nx">n</span><span class="o">:</span> <span class="mi">0</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">proxy</span><span class="p">(</span><span class="p">{</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">myData</span> <span class="p">}</span><span class="p">)</span> <span class="c1">// data 即为 myData 代理
</span><span class="c1"></span>
<span class="kd">function</span> <span class="nx">proxy</span><span class="p">(</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 解构赋值，data 即为 myData，即为 {n: 0}
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="c1">// 存下 n 原来的值
</span><span class="c1"></span>  <span class="k">delete</span> <span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="c1">// 删除掉 data 中原来的 n，这句可以不用写，因为下面声明新的虚拟 n 的时候会删掉之前的
</span><span class="c1"></span>  <span class="c1">// 声明一个虚拟的 n，放到 myData 上面，防止直接修改 myData（监听 myData）
</span><span class="c1"></span>  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
      <span class="k">return</span> <span class="nx">value</span>
    <span class="p">}</span><span class="p">,</span>
    <span class="nx">set</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span><span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">newValue</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span>
      <span class="nx">value</span> <span class="o">=</span> <span class="nx">newValue</span>
    <span class="p">}</span>
  <span class="p">}</span><span class="p">)</span>
  <span class="c1">// 声明代理
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
      <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">n</span>
    <span class="p">}</span>
    <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span><span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span>
      <span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="nx">value</span>
    <span class="p">}</span>
  <span class="p">}</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">obj</span> <span class="c1">// obj 就是代理
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<h2 id="vue-中是怎么做的">Vue 中是怎么做的</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">myData</span> <span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>从原理上讲其实是差不多的，Vue 拿到我们传入的 myData 之后，做了这么几件事情：</p>

<ol>
<li>让 <code>vm</code> 成为 <code>myData</code> 的代理，以后我们用 <code>vm.xxx</code> 或者 <code>this.xxx</code> 就可以直接操作原来在 <code>myData</code> 中的数据了；</li>
<li>删除掉 <code>myData</code> 上原来的所有属性，并改成 getter-setter 属性，防止 myData 上面的属性被越过 <code>vm</code> 直接篡改；</li>
<li>这么做的好处是可以让 <code>vm</code> 知道属性变化之后触发 <code>render</code></li>
</ol>

<p><img src="https://cn.vuejs.org/images/data.png" alt="Vue-data" /></p>

<h3 id="问题">问题</h3>

<p>事实上因为 <code>Object.defineProperty()</code> 其实是有一些问题的，因此 Vue 中也会存在这些问题，尽管 Vue 已经对他们进行了处理，但仍然应当注意。</p>

<ul>
<li><p>如果最开始属性不存在，后来想要加属性，那么新加的属性就没有被 getter-setter 化，因此就不具备响应式。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span>
<span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
<span class="nx">a</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
<span class="p">}</span><span class="p">)</span>

<span class="nx">vm</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span>
<span class="c1">// vm.b 不是响应式的
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>

<p>解决方法：要么最开始就把所有的属性名写好，要么就使用 <code>Vue.set(this.obj, 'key', 'value')</code> 或者 <code>vm.$set(this.obj, 'key', value)</code> 来添加新的属性。</p>

<ul>
<li>对于数组来说，使用 <code>arr[index] = value</code> 来添加值将同样不会被检测到。</li>
</ul>

<p>解决办法：Vue 实际上已经给我们的数组加上了一层新的原型，并提供了 <code>push</code> <code>pop</code> <code>shift</code> <code>unshift</code> <code>splice</code> <code>sort</code> <code>reverse</code> 这个 7 个常用的 API。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/vue/" term="Vue" label="Vue" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">再看 this</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-24-this/" />
            <id>http://hais-teatime.com/post/2019-12-24-this/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-24T18:27:04+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[学完了整个 JavaScript 基础篇章之后，今天重新总结复习一下 this 的用法。]]></summary>
            
                <content type="html"><![CDATA[<p>学完了整个 JavaScript 基础篇章之后，今天重新总结复习一下 this 的用法。</p>

<p>除了绕晕新手以外，<code>this</code> 还是有其存在的价值，如果没有 <code>this</code>，那么我们在写一个构造函数的时候，就不知道如何代指我们即将 <code>new</code> 出来的对象（因为事实上这个时候他并没有名字）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
  <span class="o">?</span><span class="o">?</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
  <span class="o">?</span><span class="o">?</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>但是实际上 <code>this</code> 却带来了很多副作用以及意想不到的用法，因此下面就来总结讨论一下 this 的值。</p>

<hr />

<h2 id="key-points">Key Points</h2>

<ol>
<li><code>this</code> 是为了解决 <strong>一个函数获取一个对象的引用</strong> 这个问题</li>
<li><code>this</code> 必须在函数体的内部才有意义，否则等于 <code>window</code></li>
<li>可以对函数内的 <code>this</code> 进行 <strong>隐式指定</strong> 和 <strong>显式指定</strong></li>
<li>箭头函数 <strong>没有</strong> <code>this</code></li>
<li><code>new</code> 之后发生的 4 件事情</li>
</ol>

<hr />

<h2 id="函数体外部的-this">函数体外部的 this</h2>

<blockquote>
<p><code>this</code> 必须在函数体的内部才有意义</p>
</blockquote>

<p>如果 <code>this</code> 不在任何函数体内部的话，他的值是全局对象，当然在浏览器中就是 <code>window</code>，因此如果不在函数体内部的话，就无从讨论 <code>this</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="s1">&#39;Hi&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// &#39;Hi&#39;
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// &#39;Hi&#39;
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// &#39;Hi&#39;
</span><span class="c1"></span><span class="c1">// window === this
</span><span class="c1"></span><span class="c1">// window.a === this.a === a
</span></code></pre></td></tr></table>
</div>
</div>
<p>注意了！这里说的函数体内部要与函数的调用区分开来！最显然的是上面的 <code>console.log(this.a)</code> 的括号中的 <code>this</code> <strong>并不是函数体内部的 <code>this</code></strong>，所以他也是没有意义的。</p>

<h2 id="函数体内部的-this">函数体内部的 this</h2>

<blockquote>
<p>函数内部 <code>this</code> 的值取决于函数被调用的方式</p>
</blockquote>

<p>我们有两种方式可以调用函数并指定 this 的值：<strong>隐式指定</strong> 和 <strong>显式指定</strong>。</p>

<p>举个栗子，我们有这样一个对象：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">harvey</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;harvey&#39;</span><span class="p">,</span>
  <span class="nx">age</span><span class="o">:</span> <span class="mi">22</span><span class="p">,</span>
  <span class="nx">greeting</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">Hello, I am </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>然后想要调用其中的 <code>greeting()</code> 方法，我们可以 <strong>隐式指定</strong> <code>this</code> 的值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting</span><span class="p">(</span><span class="p">)</span>
<span class="c1">// &#39;Hello, I am harvey&#39;
</span><span class="c1"></span><span class="c1">// JS 自动指定 greeting 函数里面的 this 为 . 前面的 harvey 
</span></code></pre></td></tr></table>
</div>
</div>
<p>我们也可以 <strong>显式指定</strong> <code>this</code> 的值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">harvey</span><span class="p">)</span>
<span class="c1">// &#39;Hello, I am harvey&#39;
</span><span class="c1"></span><span class="c1">// 通过 call 指定 greeting 中的 this 是 harvey
</span></code></pre></td></tr></table>
</div>
</div>
<p>看起来好像没什么区别？不，区别大了。</p>

<p>让我们再定义一个对象，就能看出其中的端倪。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">kate</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;kate&#39;</span><span class="p">,</span>
  <span class="nx">age</span><span class="o">:</span> <span class="mi">22</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>我们现在可以这样调用 <code>harvey</code> 的 <code>greeting</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">kate</span><span class="p">)</span>
<span class="c1">// &#39;Hello, I am kate&#39;
</span><span class="c1"></span><span class="c1">// 通过 call 指定 greeting 中的 this 是 kate
</span></code></pre></td></tr></table>
</div>
</div>
<h2 id="箭头函数的-this">箭头函数的 this</h2>

<blockquote>
<p>箭头函数没有 <code>this</code></p>
</blockquote>

<p>如果我们把上面讨论的栗子中的函数改为箭头函数，那么他里面的 <code>this</code> 也就没有意义了，他的 <code>this</code> 具体的取值得向上一个函数找：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">harvey</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;harvey&#39;</span><span class="p">,</span>
  <span class="nx">age</span><span class="o">:</span> <span class="mi">22</span><span class="p">,</span>
  <span class="nx">greeting</span><span class="o">:</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">Hello, I am </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">greeting2</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">greeting3</span> <span class="o">=</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">Hello, I am </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">greeting3</span><span class="p">(</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting</span><span class="p">(</span><span class="p">)</span>
<span class="c1">// Hello, I am 
</span><span class="c1"></span><span class="c1">// window
</span><span class="c1"></span><span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting2</span><span class="p">(</span><span class="p">)</span>
<span class="c1">// Hello, I am harvey
</span><span class="c1"></span><span class="c1">// harvey
</span></code></pre></td></tr></table>
</div>
</div>
<p>就算我们用 <code>call</code> 也无法指定 <code>this</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">harvey</span><span class="p">)</span>
<span class="c1">// Hello, I am 
</span><span class="c1"></span><span class="c1">// window
</span></code></pre></td></tr></table>
</div>
</div>
<h2 id="new-运算符">new 运算符</h2>

<p>在我们使用 <code>new</code> 去创建新对象的时候，系统自动帮我们做了 4 件事情</p>

<ul>
<li>自动创建空对象</li>
<li>自动为空对象关联原型，原型的地址为 <code>X.prototype</code></li>
<li>自动将空对象作为 <code>this</code> 关键字运行构造函数</li>

<li><p>自动 <code>return this</code>，也就是说可以接着写 <code>new X().getName()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span><span class="p">{</span>
<span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
<span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span>
<span class="p">}</span>
<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">Hello, I am </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">harvey</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;harvey&#39;</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span>
<span class="c1">// 这里自动将 harvey 作为 this 运行了构造函数
</span><span class="c1"></span>

<span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting</span><span class="p">(</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>

<p>好了，<code>this</code> 的讨论结束，理解的关键就在于我们最开始提到的 5 点 Key Points。</p>

<hr />

<h2 id="再看看网上总结的-this">再看看网上总结的 this</h2>

<p>留坑，以后再总结。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Vue 第一课：安装</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-22-vue-1/" />
            <id>http://hais-teatime.com/post/2019-12-22-vue-1/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-22T18:57:07+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[聊聊 Vue 的两个版本。]]></summary>
            
                <content type="html"><![CDATA[<p>聊聊 Vue 的两个版本。</p>

<p>我们比较关注的 Vue 的版本主要有两个：</p>

<ul>
<li><p><strong>完整版</strong>：同时包含编译器和运行时的版本，也就是 CDN 里面的 <code>vue.js</code>。</p></li>

<li><p><strong>运行时</strong>：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切，也就是 CDN 里面的 <code>vue.runtime.js</code>。</p></li>
</ul>

<p>他们之间的区别就是差在 <strong>编译器</strong> 上，也就是一段 <em>用来将模板字符串编译成为 JavaScript 渲染函数</em> 的代码。</p>

<p>我们在创建一个 Vue 实例的时候，可能需要在里面加上 <code>template</code>，来给我们想要操作的元素添上一段 HTML 内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span>
  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
  <span class="nx">template</span><span class="o">:</span> <span class="sb">`</span><span class="sb">
</span><span class="sb">    &lt;div&gt;
</span><span class="sb">      Hello Vue!
</span><span class="sb">    &lt;/div&gt;
</span><span class="sb">  </span><span class="sb">`</span><span class="p">,</span>
<span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>也有可能会直接去 HTML 里面写上一段内容作为我们元素内部的 HTML。编译器的作用就是让这段模板成为 JavaScript 能看懂的东西，并且能够最后渲染到页面上。——这就是 <strong>完整版</strong>。</p>

<p>如果没有编译器的话（也就是使用 <strong>运行时</strong> 版本），我们就只能直接写成 JavaScript 代码，比如下面这段（<code>h</code> 表示 <code>createElement</code>）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span>
  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
  <span class="nx">render</span> <span class="p">(</span><span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">h</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">,</span> <span class="s1">&#39;Hello Vue&#39;</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>但是运行时版本因为没有编译器，所以体积要小 30% 左右。因此对于开发者而言，完整版无疑是更方便的；但对于用户而言，轻量的运行时版本更加符合需求。</p>

<p>为了解决这个矛盾，就出现了 <code>vue-loader</code>，他会在打包的时候将 <code>vue</code> 文件内部的模板预编译成 JavaScript，这样我们就可以在开发的时候放心使用模板字符串，打包后通过 <code>vue-loader</code> 自然就变成了不用再编译一次的 JavaScript 代码，用户就可以使用运行时版本进行查看了。</p>

<p>同时，在使用 @vue/cli 和 webpack 引入的时候，默认使用的是运行时版本。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/vue/" term="Vue" label="Vue" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">浅析 MVC</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-22-mvc/" />
            <id>http://hais-teatime.com/post/2019-12-22-mvc/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-22T12:32:38+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[如果要说我目前在入门阶段遇到的几个让我最没自信的家伙，一个要数算法，然后就是 MVC 了。所以今天就简单写一下自己的一些思考。]]></summary>
            
                <content type="html"><![CDATA[<p>如果要说我目前在入门阶段遇到的几个让我最没自信的家伙，一个要数算法，然后就是 MVC 了。所以今天就简单写一下自己的一些思考。</p>

<h2 id="mvc">MVC</h2>

<p>MVC 是一种有名的设计模式，我们可以把一个模块用三个对象表示出来，这三个对象就是 M、V 和 C：</p>

<blockquote>
<p><strong>M</strong> - <strong>Model</strong>，数据模型，负责操作所有数据</p>

<p><strong>V</strong> - <strong>View</strong>，视图，负责所有 UI 界面</p>

<p><strong>C</strong> - <strong>Controller</strong>，控制器，负责其他</p>
</blockquote>

<h3 id="model">Model</h3>

<p>我们可以用伪代码来尝试表示 Model 对象：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">M = {
  data: {
    key: value,
  },
  methods: {
    function Create: add data,
    function Remove: delete data,
    function Update: edit data,
    function Get: print data,
  }
}</code></pre></td></tr></table>
</div>
</div>
<p>他是一个专门用来存放数据的对象，并且可以提供一系列对数据进行操纵的 API，比如 Create、Remove、Update、Get 等。</p>

<h3 id="view">View</h3>

<p>同样的，我们可以来表示一下 View 对象：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">V = {
  element,
  innerHTML,
  methods: {
    function Render: reload innerHTML,
    Operate: {
      function Create: create newElement,
      function Remove: remove innerElement,
      function Edit: edit innerElement,
      function Find: get innerElement,
    }
  }
}</code></pre></td></tr></table>
</div>
</div>
<p>我们可以在 View 指定一个元素 element，可以对他内部的 HTML 代码进行修改和重载，同时也可以对其内部的元素进行增删改查等操作。</p>

<h3 id="control">Control</h3>

<p>对于 Control 部分的伪代码，我们也许可以这样写：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">C = {
  function Init: init M V C,
  function BindEvents: el.on(&#39;eventName&#39;, event),
  events: {
    function A: Update(data),
    function B: Render(html)
  }
}</code></pre></td></tr></table>
</div>
</div>
<p>在 Control 中，我们可以完成初始化操作，可以为元素绑定事件，并书写事件方法，用来触发 M 或 V 的更改。</p>

<p>当然，对 MVC 的理解不同的人可能有不同的想法，作为初学者我只是简单理解了一下。比如有时候，我们对 C 的界定可能并不是那么明显——它既可以操作视图，又可以操作数据，那么为什么不把他就放在 V 或者 M 中呢？</p>

<h2 id="eventbus">EventBus</h2>

<p>个人认为 EventBus 的出现主要是由于模块化和 MVC 的推进。前文也说了，在一个模块中，我们可以把所有的东西都分成 M V C 这三个对象来表示，这样虽然我们可以用统一形式的代码来表示几乎所有的情况，但同时也会带来一些问题。</p>

<p>首先，我们可以看看我们原来修改元素内容的方式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">function X: 
  if event.status == triggered:
    data = element.getData();
    newData = data.edit();
    element.update(newData);</code></pre></td></tr></table>
</div>
</div>
<p>是一个非常自然的线性关系，当事件被触发时，直接修改 DOM 来改变元素内容，DOM 操作和数据是混在一起的，我们并没有在代码中单独保存数据。</p>

<p>而使用 MVC 之后，我们修改元素内容的方式变成了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">M = {
  data,
  function Update(data):
    edit data;
    eventBus.Trigger(&#39;data-updated&#39;)
}

V = {
  element,
  innerHTML,
  eventBus.On(&#39;data-updated&#39;, run Render(data))
  function Render(data): reload innerHTML
}

C = {
  function X:
    if event.status === triggered:
      M.Update(data)
}</code></pre></td></tr></table>
</div>
</div>
<p>看起来稍稍有些复杂：</p>

<p>当事件被触发之后，C 中的事件绑定函数会调用 M.Update 方法来操纵 data，</p>

<blockquote>
<p>但是负责视图的 V 此时并不知道事件已经触发，因此我们需要借助一个 “事件总线 EventBus” 来帮助我们完成事件从 M -&gt; V 传递的这样一个过程，</p>
</blockquote>

<p>M 更新完 data 之后触发 eventBus，</p>

<p>V 监听 eventBus，知道 M 已经更新完 data 了，然后调用 V.Render 方法更新视图。</p>

<p>当然除了帮助在 M V C 三个对象之间传递事件以外，eventBus 还可以帮助在模块之间传递事件。</p>

<p>下面用伪代码给出了一个 EventBus 常用 API 示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">EventBus: {
  function Trigger,
  function On,
  function Off
}</code></pre></td></tr></table>
</div>
</div>
<h2 id="表驱动编程">表驱动编程</h2>

<blockquote>
<p>表驱动法，又称之为表驱动、表驱动方法。 “表”是几乎所有数据结构课本都要讨论的非常有用的数据结构。表驱动方法出于特定的目的来使用表，程序员们经常谈到“表驱动”方法，但是课本中却从未提到过什么是&quot;表驱动&quot;方法。表驱动方法是一种使你可以在表中查找信息，而不必用很多的逻辑语句（ if 或 case ）来把它们找出来的方法。事实上，任何信息都可以通过表来挑选。在简单的情况下，逻辑语句往往更简单而且更直接。但随着逻辑链的复杂，表就变得越来越富有吸引力了。</p>
</blockquote>

<p>还是用伪代码来表示一下，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Map = [
  key1: value1,
  key2: value2,
  key3: value3,
  key4: value4
]

// 可以用上面这个表来简化我们的 if 语句，这样我们就不用写很多 if 了：

if key in Map: Map[key]

// 也可以用上面这个表来简化函数的声明等：

for key in Map:
  function key: Map[key]</code></pre></td></tr></table>
</div>
</div>
<h2 id="模块化">模块化</h2>

<p>我对模块化的理解其实很简单：</p>

<p>首先，模块化可以把不同的功能分成不同的模块，模块之间的瓜葛要尽可能小，最好每个模块在不知道外部情况的时候也可以正常工作，这样我们之后维护代码只需要关注特定模块的部分即可；</p>

<p>其次，我们可以将 M V C 抽象为三个模块，做成 M 模块、V 模块、C 模块，这三个模块不需要关注具体的细节，只需要实现对应基本的、通用的功能，然后把 M V C 和每一个实现具体功能、操纵具体元素的模块分开，这样如果我们要对 M V C 进行统一的修改，就不需要深入每一个具体功能之中了。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">再看 JavaScript 继承</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-21-inheritance/" />
            <id>http://hais-teatime.com/post/2019-12-21-inheritance/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-21T11:47:50+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[学完了整个 JavaScript 基础篇章之后，今天又看了一下所谓的继承，发现我之前理解的继承跟大家一直提到的那个继承不是一回事，于是写一篇文章记录一下。
本文将着重讨论基于原型的继承，也会简单写一下如何用 class 继承。]]></summary>
            
                <content type="html"><![CDATA[<p>学完了整个 JavaScript 基础篇章之后，今天又看了一下所谓的继承，发现我之前理解的继承跟大家一直提到的那个继承不是一回事，于是写一篇文章记录一下。</p>

<p>本文将着重讨论基于原型的继承，也会简单写一下如何用 class 继承。</p>

<hr />

<h2 id="key-points">Key Points</h2>

<ul>
<li><p>在 JavaScript 中，<strong>函数</strong> <code>Function</code> 也是一种 <strong>对象</strong> <code>Object</code></p></li>

<li><p>关于函数</p>

<ol>
<li>所有函数都自带 <code>prototype</code></li>
<li><code>prototype</code> 中自带 <code>constructor</code></li>
<li><code>constructor</code> 里面的东西就是函数的内容</li>
<li>构造函数首字母大写（约定俗成）</li>
</ol></li>

<li><p><code>对象.__proto__ === 其构造函数.prototype</code></p></li>
</ul>

<hr />

<p>理解一下上面几句话。</p>

<p>首先，关于函数也是一种对象这个说法，我们在后面会有相关的说明；</p>

<p>其次是关于函数的几个描述，我们可以做几个实验来验证一下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Harvey&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="s1">&#39;22&#39;</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span> <span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
<span class="cm">/*
</span><span class="cm">{
</span><span class="cm">  0: 1,
</span><span class="cm">  1: 2,
</span><span class="cm">  2: 3,
</span><span class="cm">  length: 3,
</span><span class="cm">  __proto__: Array(0)
</span><span class="cm">}
</span><span class="cm">*/</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="cm">/*
</span><span class="cm">{
</span><span class="cm">  name: &#34;Harvey&#34;,
</span><span class="cm">  age: &#34;22&#34;,
</span><span class="cm">  __proto__: Object
</span><span class="cm">}
</span><span class="cm">*/</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span>
<span class="cm">/*
</span><span class="cm">{
</span><span class="cm">  length: 0,
</span><span class="cm">  name: &#34;fn&#34;,
</span><span class="cm">  arguments: null,
</span><span class="cm">  caller: null,
</span><span class="cm">  prototype: {
</span><span class="cm">    constructor: ƒ ()
</span><span class="cm">    __proto__: Object
</span><span class="cm">  }
</span><span class="cm">  __proto__: ƒ ()
</span><span class="cm">}
</span><span class="cm">*/</span>

<span class="nx">fn</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">fn</span> <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div>
<p>可以很清楚的看到，比起别的对象，函数确实是比较特别的，他天生就带有一个 <code>prototype</code> 属性，而且 <code>prototype</code> 中的 <code>constructor</code> 就是这个函数本身。</p>

<p>我们也可以再验证一下最后一句话：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span>
<span class="nx">me</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div>
<p>知道了这样几个前置的知识，我们就可以往下讨论了。</p>

<h2 id="原型链">原型链</h2>

<p>原型链的精髓其实就是刚才已经提到过的一句话：</p>

<blockquote>
<p><code>对象.__proto__ === 其构造函数.prototype</code></p>
</blockquote>

<h3 id="普通对象的原型链">普通对象的原型链</h3>

<blockquote>
<p><strong>普通对象的原型是 Object</strong></p>
</blockquote>

<p>这句话要从以下几点来理解：</p>

<ol>
<li>创建一个对象可以按这种方式写： <code>let obj = new Object({ name: 'Harvey', age: '22' })</code></li>
<li>Object 实际上是一个构造函数，他构造了 obj</li>
<li><code>obj.__proto__ === Object.prototype</code></li>
</ol>

<p>因此我们可以简单表示一下这个普通对象的原型链：</p>

<p><code>obj -&gt; Object.prototype</code></p>

<h3 id="数组的原型链">数组的原型链</h3>

<blockquote>
<p><strong>数组的原型是 Array</strong></p>
</blockquote>

<p>这句话要从以下几点来理解：</p>

<ol>
<li>创建一个数组可以按这种方式写： <code>let arr = new Array(1, 2, 3)</code></li>
<li>Array 实际上是一个构造函数，他构造了 arr</li>
<li><code>arr.__proto__ === Array.prototype</code></li>
</ol>

<p>事实上，我们还会发现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true
</span><span class="c1"></span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div>
<p>也就是说，一个数组的原型链要稍微复杂一些：</p>

<p><code>arr -&gt; Array.prototype -&gt; Object.prototype</code></p>

<p>等等，这意味着 <code>Object.prototype</code> 构造了 <code>Array.prototype</code>？这个问题我们稍后再谈。</p>

<h3 id="函数的原型">函数的原型</h3>

<blockquote>
<p><strong>函数的原型是 Function</strong></p>
</blockquote>

<p>这句话要从以下几点来理解：</p>

<ol>
<li>创建一个数组可以按这种方式写： <code>let fn = new Function( (), { console.log('hi') } )</code></li>
<li>Function 实际上是一个构造函数，他构造了 fn</li>
<li><code>fn.__proto__ === Function.prototype</code></li>
</ol>

<p>也就是说，一个函数的原型链也要稍微复杂一些：</p>

<p><code>fn -&gt; Function.prototype -&gt; Object.prototype</code></p>

<h3 id="修改原型链">修改原型链</h3>

<p>通过直接修改 <code>__proto__</code> 就可以达到修改原型链的目的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
<span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span> <span class="p">}</span>
<span class="kd">let</span> <span class="nx">obj3</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">c</span><span class="o">:</span> <span class="mi">3</span> <span class="p">}</span>
<span class="nx">obj2</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">obj1</span>
<span class="nx">obj3</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">obj2</span>
</code></pre></td></tr></table>
</div>
</div>
<p>这样，他们的原型链就变成了：
<code>obj3 -&gt; obj2 -&gt; obj1 -&gt; Object.prototype</code></p>

<p>但是这种方法是不推荐的，我们更推荐使用 <code>Object.create()</code> 方法，他的使用方法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
<span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">obj1</span><span class="p">)</span>
<span class="nx">obj2</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span>
<span class="kd">let</span> <span class="nx">obj3</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">obj2</span><span class="p">)</span>
<span class="nx">obj3</span><span class="p">.</span><span class="nx">c</span> <span class="o">=</span> <span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div>
<p>这样与上面直接修改 <code>__proto__</code> 效果是一样的。</p>

<h2 id="继承">继承</h2>

<p>这里我们就发现，如果我们按照上面的方法修改原型链，得到的原型链 <code>obj3 -&gt; obj2 -&gt; obj1 -&gt; Object.prototype</code> 有点问题！</p>

<p>他不满足 <code>对象.__proto__ === 其构造函数.prototype</code>！</p>

<p>这是当然的，因为 <code>obj1</code> 本来就不是 <code>obj2</code> 的构造函数。话说回来，<code>obj1</code> 根本就不是函数，他连 <code>prototype</code> 都没有。</p>

<p>所以说这里我们要明确一点，平时大家所说的继承（或者说类的继承），其实更多的是一种 <strong>狭义的继承</strong>。</p>

<p>他指的 <strong>不是</strong> 我们按照上面的方式 <strong>单纯对原型链进行的修改</strong>，<strong>而是</strong> 一种在 <strong>构造函数之间</strong> 的，有 <code>prototype</code> 存在的继承。</p>

<p><em>PS. 尽管在某些时候，我们使用 <code>Object.create()</code> 将原型链进行简单修改也被称为继承，但不是我们这里讨论的继承</em></p>

<p>那么问题来了，这种在 <strong>构造函数之间的继承</strong> 应该怎么写呢？</p>

<h3 id="第一步-使用-call-来调用父类构造函数">第一步：使用 <code>call</code> 来调用父类构造函数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">姓名</span> <span class="o">=</span> <span class="nx">姓名</span>
<span class="p">}</span>
<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">自我介绍</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">你好，我是 </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">姓名</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">Student</span><span class="p">(</span><span class="nx">姓名</span><span class="p">,</span> <span class="nx">学号</span><span class="p">)</span><span class="p">{</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">姓名</span><span class="p">)</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">学号</span> <span class="o">=</span> <span class="nx">学号</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>可以通过 <code>console.dir()</code> 来分别看看 <code>Person</code> 和 <code>Student</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// Person
</span><span class="c1"></span><span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Person&#34;</span><span class="p">,</span>
  <span class="nx">prototype</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">自我介绍</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span><span class="p">,</span>
    <span class="nx">constructor</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span><span class="p">,</span>
    <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span><span class="p">,</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">__proto__</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span> <span class="c1">// Function.prototype
</span><span class="c1"></span><span class="p">}</span>

<span class="c1">// Student
</span><span class="c1"></span><span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Student&#34;</span><span class="p">,</span>
  <span class="nx">prototype</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">Student</span><span class="p">(</span><span class="nx">姓名</span><span class="p">,</span> <span class="nx">学号</span><span class="p">)</span><span class="p">,</span>
    <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span><span class="p">,</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">__proto__</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span> <span class="c1">// Function.prototype
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>我们尝试创建一个 <code>Student</code> 对象 <code>小明</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">小明</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s1">&#39;小明&#39;</span><span class="p">,</span> <span class="mi">123456</span><span class="p">)</span>
<span class="cm">/*
</span><span class="cm">{
</span><span class="cm">  姓名: &#34;小明&#34;,
</span><span class="cm">  学号: 123456,
</span><span class="cm">
</span><span class="cm">  __proto__: {
</span><span class="cm">    constructor: ƒ Student(姓名, 学号),
</span><span class="cm">    __proto__: Object,
</span><span class="cm">  }
</span><span class="cm">
</span><span class="cm">}
</span><span class="cm">*/</span>

<span class="nx">小明</span><span class="p">.</span><span class="nx">自我介绍</span><span class="p">(</span><span class="p">)</span>
<span class="c1">// Uncaught TypeError: 小明.自我介绍 is not a function
</span></code></pre></td></tr></table>
</div>
</div>
<blockquote>
<p><code>小明</code> 如何拿到 <code>学号</code> ？</p>
</blockquote>

<p>在 <code>new Student('小明', 123456)</code> 的时候，系统会去调用 <code>Student</code> 函数，并且把 <code>小明</code> 这个对象作为 <code>this</code> 传进去；</p>

<p>相当于在函数中执行了 <code>小明.学号 = 123456</code>。</p>

<blockquote>
<p><code>小明</code> 如何拿到 <code>姓名</code> ？</p>
</blockquote>

<p>同样，系统调用 <code>Student</code> 函数，看到了 <code>Person.call(this, 姓名)</code>（相当于 <code>Person.call(小明, '小明')</code>），意思是让 <code>Person</code> 中的 <code>this</code> 为 <code>小明</code>，并且传一个参数 <code>'小明'</code> 给 <code>Parent</code>；</p>

<p>然后将会调用 <code>Person</code> 函数，在 <code>Person</code> 中执行 <code>this.姓名 = 姓名</code>（相当于 <code>小明.姓名 = '小明'</code>）。</p>

<blockquote>
<p>为什么 <code>小明</code> 不能使用 <code>自我介绍</code> ？</p>
</blockquote>

<p>因为可以看到，<code>小明</code> 这个对象中没有 <code>自我介绍</code> 属性，他的 <code>__proto__</code> 中也没有，因此他找不到 <code>自我介绍</code></p>

<h3 id="第二步-建立原型链">第二步：建立原型链</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">Student</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>我们再打印出 <code>Student</code> 来看看</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// Student
</span><span class="c1"></span><span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Student&#34;</span><span class="p">,</span>
  <span class="nx">prototype</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">__proto__</span><span class="o">:</span><span class="p">{</span>
      <span class="nx">自我介绍</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span><span class="p">,</span>
      <span class="nx">constructor</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span><span class="p">,</span>
      <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">__proto__</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span> <span class="c1">// Function
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>我们发现 <code>prototype</code> 里面的 <code>constructor</code> 不见了，并且里面的 <code>__proto__</code> 变得跟 <code>Person.prototype</code> 一样了</p>

<p>这个时候再 <code>new</code> 一个 <code>小花</code> 看看：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">小花</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s1">&#39;小花&#39;</span><span class="p">,</span> <span class="mi">234567</span><span class="p">)</span>
<span class="cm">/*
</span><span class="cm">{
</span><span class="cm">  姓名: &#34;小花&#34;,
</span><span class="cm">  学号: 234567,
</span><span class="cm">  __proto__: {
</span><span class="cm">
</span><span class="cm">    __proto__: {
</span><span class="cm">      自我介绍: ƒ (),
</span><span class="cm">      constructor: ƒ Person(姓名),
</span><span class="cm">      __proto__: Object,
</span><span class="cm">    }
</span><span class="cm">
</span><span class="cm">  }
</span><span class="cm">}
</span><span class="cm">*/</span>

<span class="nx">小花</span><span class="p">.</span><span class="nx">自我介绍</span><span class="p">(</span><span class="p">)</span>
<span class="c1">// &#39;你好，我是 小花&#39;
</span></code></pre></td></tr></table>
</div>
</div>
<p>小花现在会自我介绍了，但是还有个小问题，我们发现 <code>小花.__proto__</code> 中的 <code>constructor</code> 不见了！我们得赶紧修复一下。</p>

<h3 id="第三步-解决-constructor-的问题">第三步：解决 constructor 的问题</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">Student</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Student</span>
</code></pre></td></tr></table>
</div>
</div>
<p>看看现在 <code>Student</code> 的样子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// Student
</span><span class="c1"></span><span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Student&#34;</span><span class="p">,</span>
  <span class="nx">prototype</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">Student</span><span class="p">(</span><span class="nx">姓名</span><span class="p">,</span> <span class="nx">学号</span><span class="p">)</span><span class="p">,</span>
    <span class="nx">__proto__</span><span class="o">:</span><span class="p">{</span>
      <span class="nx">自我介绍</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span><span class="p">,</span>
      <span class="nx">constructor</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span><span class="p">,</span>
      <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">__proto__</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span> <span class="c1">// Function
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>最后请出我们的小红</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">小红</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s1">&#39;小花&#39;</span><span class="p">,</span> <span class="mi">345678</span><span class="p">)</span>
<span class="cm">/*
</span><span class="cm">{
</span><span class="cm">  姓名: &#34;小红&#34;,
</span><span class="cm">  学号: 345678,
</span><span class="cm">  __proto__: {
</span><span class="cm">
</span><span class="cm">    constructor: ƒ Student(姓名, 学号),
</span><span class="cm">
</span><span class="cm">    __proto__: {
</span><span class="cm">      自我介绍: ƒ (),
</span><span class="cm">      constructor: ƒ Person(姓名),
</span><span class="cm">      __proto__: Object,
</span><span class="cm">    }
</span><span class="cm">
</span><span class="cm">  }
</span><span class="cm">}
</span><span class="cm">*/</span>

<span class="nx">小红</span><span class="p">.</span><span class="nx">自我介绍</span><span class="p">(</span><span class="p">)</span>
<span class="c1">// ‘你好，我是 小红’
</span></code></pre></td></tr></table>
</div>
</div>
<p>OK，一切正常。</p>

<h3 id="总结">总结</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">姓名</span> <span class="o">=</span> <span class="nx">姓名</span>
<span class="p">}</span>

<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">自我介绍</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">你好，我是 </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">姓名</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">Student</span><span class="p">(</span><span class="nx">姓名</span><span class="p">,</span> <span class="nx">学号</span><span class="p">)</span><span class="p">{</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">姓名</span><span class="p">)</span> <span class="c1">// 调用父级构造函数
</span><span class="c1"></span>  <span class="k">this</span><span class="p">.</span><span class="nx">学号</span> <span class="o">=</span> <span class="nx">学号</span>
<span class="p">}</span>

<span class="nx">Student</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span> <span class="c1">// 建立原型链
</span><span class="c1"></span>
<span class="nx">Student</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Student</span> <span class="c1">// 解决 constructor 问题
</span><span class="c1"></span><span class="cm">/*
</span><span class="cm">{
</span><span class="cm">  name: &#34;Student&#34;,
</span><span class="cm">
</span><span class="cm">  prototype: {
</span><span class="cm">
</span><span class="cm">    constructor: ƒ Student(姓名, 学号),
</span><span class="cm">    // Student.prototype 里面的 constructor 就是 Student
</span><span class="cm">
</span><span class="cm">    __proto__:{
</span><span class="cm">      // Student.prototype 里面的 __proto__ 是 Person.prototype
</span><span class="cm">      自我介绍: ƒ (),
</span><span class="cm">      constructor: ƒ Person(姓名),
</span><span class="cm">      __proto__: Object,
</span><span class="cm">    }
</span><span class="cm">
</span><span class="cm">  },
</span><span class="cm">
</span><span class="cm">  __proto__: ƒ () // Function
</span><span class="cm">}
</span><span class="cm">*/</span>

<span class="nx">Student</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">报数</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">我的学号是 </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">学号</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">小红</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s1">&#39;小红&#39;</span><span class="p">,</span> <span class="mi">345678</span><span class="p">)</span>
<span class="cm">/*
</span><span class="cm">{
</span><span class="cm">  姓名: &#34;小红&#34;
</span><span class="cm">  学号: 345678
</span><span class="cm">  __proto__: {
</span><span class="cm">
</span><span class="cm">    constructor: ƒ Student(姓名, 学号)
</span><span class="cm">    // 小红 是由 Student 构造的
</span><span class="cm">    // 小红.__proto__ 跟 Student.prototype 是一样的
</span><span class="cm">
</span><span class="cm">    __proto__: {
</span><span class="cm">      自我介绍: ƒ ()
</span><span class="cm">      constructor: ƒ Person(姓名)
</span><span class="cm">      __proto__: Object
</span><span class="cm">    }
</span><span class="cm">
</span><span class="cm">  }
</span><span class="cm">}
</span><span class="cm">*/</span>

<span class="nx">小红</span><span class="p">.</span><span class="nx">自我介绍</span><span class="p">(</span><span class="p">)</span>
<span class="nx">小红</span><span class="p">.</span><span class="nx">报数</span><span class="p">(</span><span class="p">)</span>
<span class="c1">// ‘你好，我是 小红’
</span></code></pre></td></tr></table>
</div>
</div>
<h3 id="用-class-继承">用 class 继承</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">姓名</span> <span class="o">=</span> <span class="nx">姓名</span>
    <span class="p">}</span>
    <span class="nx">自我介绍</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">你好，我是 </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">姓名</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">Student</span> <span class="kr">extends</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">姓名</span><span class="p">,</span> <span class="nx">学号</span><span class="p">)</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span> <span class="c1">// 这里的 姓名 两个字要与父类中的一样
</span><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">学号</span> <span class="o">=</span> <span class="nx">学号</span>
    <span class="p">}</span>
    <span class="nx">报数</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">我的学号是 </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">学号</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">小红</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s1">&#39;小红&#39;</span><span class="p">,</span> <span class="mi">345678</span><span class="p">)</span>

<span class="nx">小红</span><span class="p">.</span><span class="nx">自我介绍</span><span class="p">(</span><span class="p">)</span>
<span class="nx">小红</span><span class="p">.</span><span class="nx">报数</span><span class="p">(</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">小项目：会动的代码 - Usagi & Piske</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-17-usagi-piske/" />
            <id>http://hais-teatime.com/post/2019-12-17-usagi-piske/</id>
            <updated>2020-01-28T17:22:13+08:00</updated>
            <published>2019-12-17T12:43:58+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[初学前端，使用原生 JavaScript 和 CSS 所做的一个小项目。点击可以查看 代码仓库 和 效果预览。]]></summary>
            
                <content type="html"><![CDATA[<p>初学前端，使用原生 JavaScript 和 CSS 所做的一个小项目。点击可以查看 <a href="https://github.com/Hyuain/usagi-piske-animated" target="_blank">代码仓库</a> 和 <a href="http://hais-teatime.com/usagi-piske-animated" target="_blank">效果预览</a>。</p>

<h1 id="css-部分">CSS 部分</h1>

<h2 id="关于选题">关于选题</h2>

<p>关于练习 CSS 最常见的就是仿写某个页面，但是总感觉这样做让人有些提不起兴趣，毕竟以后工作之后也会写很多页面，不如学习的时候就仿些别的东西？比如某个可爱的小生物？正巧又结识了 CodePen，看到上面有很多有趣的小栗子，着实让人有一试的欲望。于是就选择了 Kanahei 的 Usagi 和 Piske，图片不难又比较可爱，对于我现在的水平来说具有一定的可操作度。</p>

<h2 id="在项目中学习">在项目中学习</h2>

<h3 id="1-如何让屏幕不乱滚">1. 如何让屏幕不乱滚？</h3>

<p>首先我想要让移动端的屏幕不能随意缩放，因为我会针对移动端做特定的分辨率适配，而且两个小可爱是在屏幕底部的，如果让用户随意缩放，就可能产生一些不必要的错误，因此我得修改 VSCode 默认的 <code>viewport</code>，从淘宝手机版抄得 <code>width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,viewport-fit=cover</code>。</p>

<p>然后我发现 Usagi 实际上是圆角矩形的一部分，我不能让其他的部分也被用户看到，所以得给 <code>html</code> 和 <code>body</code> 加上 <code>overflow:hidden</code>，同时把它们的 <code>height</code> 都设置为 <code>100%</code>，如果只有一个设置，有时候可能会出现问题，所以索性两个都加上了。这样屏幕就不会乱滚了。</p>

<h3 id="2-usagi-的耳朵怎么画">2. Usagi 的耳朵怎么画？</h3>

<p>感觉图上的耳朵并不是完全对称的，恍惚间记得之前学习的时候 <code>border-radius</code> 有一个加斜线的高级用法，当时搞得不是很清楚，于是又去查了一下，最终使用了比较容易理解的 <code>border-top-left-radius</code> <code>border-top-right-radius</code> 来分别定义两个圆角，每个属性给予两个值，在控制台调试得到了比较合适的数值。</p>

<h3 id="3-usagi-的耳朵下面为什么有条细线">3. Usagi 的耳朵下面为什么有条细线？</h3>

<p>仔细观察总感觉 Usagi 的耳朵下面有一条细线，怎么调整他的位置都不会消失，怀疑可能是由于是斜线或者是四舍五入导致的细线，为了美观，为两个耳朵添加伪元素 <code>::after</code> 来遮住细线。</p>

<h3 id="4-usagi-的上嘴唇怎么画">4. Usagi 的上嘴唇怎么画？</h3>

<p>之前学习过一个用 <code>border</code> 来画三角形的案例，知道隐藏掉一些 <code>border</code> 可能会得到一些特殊的图案。总而言之先尝试隐藏掉两边，再用 <code>border-radius: 50%</code> 看看效果，发现效果还比较理想。</p>

<h3 id="5-移动端适配怎么做">5. 移动端适配怎么做？</h3>

<p>（2020-01-28 更新）</p>

<p>当之前所有的内容做完之后发现一个很大的问题，就是手机上有可能显示不下，因为所有的内容都是用 <code>px</code> 写死的，于是就又建了一个 CSS 文件，加上媒体查询，直接用 VSCode 替换将所有的属性在 <code>500px</code> 下时全部替换为 <code>calc(0.7*__px)</code> （笑）。今天 Renew 这个项目的时候，使用了 rem 方案来做移动端的适配，不过也比较简单，只是以 <code>500px</code> 为界设置了不同的 <code>font-size</code>，也没有用 JS 来动态改变 <code>font-size</code>，因为不希望在大屏设备上的两个小家伙变得太大。</p>

<h1 id="javascript-部分">JavaScript 部分</h1>

<h2 id="基本思路">基本思路</h2>

<p>思路其实蛮简单，就是将之前写好的 CSS 文件变成字符串，然后将这个字符串同时写到 <code>&lt;style&gt;&lt;/style&gt;</code> 标签和文本中，用计时器使得他一个字符一个字符地写入，同时控制写入的速度。</p>

<h2 id="在项目中学习-1">在项目中学习</h2>

<h3 id="1-如何一个字一个字地显示">1. 如何一个字一个字地显示？</h3>

<p>直接使用 <code>setInterval</code>，回调中写 <code>style.innerHTML</code> 和 <code>text.innerHTML</code> 均为 <code>styleCode.substring(0, n + 1)</code> 即可，<code>n</code> 从 <code>0</code> 开始，每次累加，当 <code>n &gt;= 0</code> 时，<code>clearInterval</code> 即可。</p>

<h3 id="2-如何显示空格和换行">2. 如何显示空格和换行？</h3>

<p>当被写入 <code>text</code> 之后，空格和换行都被忽略掉了，于是需要对要显示给用户看的 <code>text</code> 里面的文本内容进行特殊处理，将 <code>'\n'</code> 变为 <code>'&lt;br&gt;'</code>，将 <code>' '</code> 变为 <code>'nbsp'</code>。</p>

<h3 id="3-代码优化">3. 代码优化</h3>

<p>将整个控制组件封装到一个对象 <code>player</code> 中，通过 <code>init</code> 方法来初始化对象，在初始化时执行 <code>play</code> 和 <code>bindEvents</code> 方法，开始播放并为播放控件（三档速度调节、播放和暂停按钮）绑定事件。</p>

<h1 id="打包">打包</h1>

<p>（2020-01-28 更新）</p>

<p>最开始项目使用全局安装的 parcel 进行打包，因此项目没有 <code>package.json</code> 文件，项目的入口文件是 <code>src/index.html</code>，可以直接使用 parcel 命令来预览和开发。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">parcel src/index.html</code></pre></td></tr></table>
</div>
</div>
<p>项目 Renew 后加入了 <code>deploy.sh</code> 文件用于打包和上传，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 构建</span>
rm -rf dist <span class="o">&amp;&amp;</span> parcel build src/index.html --public-url ./ --no-cache --no-minify

<span class="c1"># 进入生成的构建文件夹</span>
<span class="nb">cd</span> dist

<span class="c1"># 初始化 git</span>
git init
git add -A
git commit -m <span class="s1">&#39;deploy&#39;</span>

<span class="c1"># 部署到 GitHub Pages</span>
git push -f git@github.com:Hyuain/usagi-piske-animated.git master:gh-pages

<span class="nb">cd</span> -</code></pre></td></tr></table>
</div>
</div>
<p>parcel 打包出来的 <code>index.html</code> 中引用的 CSS 和 JS 文件路径默认是根目录 <code>'/'</code>，但是如果部署在了二级目录下面，比如 GitHub Pages 的项目页下面，就会找不到地址，所以需要添加 <code>--public-url ./</code> ，将打包后的引用地址改为相对路径。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/css/" term="CSS" label="CSS" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E9%A1%B9%E7%9B%AE/" term="项目" label="项目" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">AJAX 和前后端分离</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-17-ajax/" />
            <id>http://hais-teatime.com/post/2019-12-17-ajax/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-17T11:04:23+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[AJAX 也是前端相关的比较难理解的概念之一，本文对其进行说明，并介绍一些与之相关的概念，比如异步、跨域等。]]></summary>
            
                <content type="html"><![CDATA[<p>AJAX 也是前端相关的比较难理解的概念之一，本文对其进行说明，并介绍一些与之相关的概念，比如异步、跨域等。</p>

<blockquote>
<p>本文部分内容是 <a href="http://jirengu.com" target="_blank">饥人谷</a> 方老师课上的讲的内容的总结，并参考了 Wikipedia 和互联网上的其他公开资料。</p>
</blockquote>

<h2 id="ajax">AJAX</h2>

<blockquote>
<p>AJAX 即 Asynchronous JavaScript and XML（异步的 JavaScript 与 XML 技术），其实就是一套综合了多项技术的浏览器端网页开发技术。Google 在它多个著名的交互应用程序中使用了这套技术，如 Google 讨论组、Google 地图、Google 搜索建议、Gmail 等，这使得人们看到了前端领域新的可能性。</p>

<p>传统的Web应用允许用户端填写表单（form），当提交表单时就向网页服务器发送一个请求；服务器接收并处理传来的表单，然后送回一个<strong>新的网页</strong>。</p>

<p>但这个做法浪费了许多带宽，因为在前后两个页面中的大部分 HTML 码往往是相同的。由于每次应用的沟通都需要向服务器发送请求，应用的回应时间依赖于服务器的回应时间。这导致了用户界面的回应比本机应用慢得多。</p>

<p>与此不同，AJAX 应用可以仅向服务器发送并取回必须的数据，并在客户端采用 JavaScript 处理来自服务器的回应。因为在服务器和浏览器之间交换的数据大量减少，服务器回应更快了。同时，很多的处理工作可以在发出请求的客户端机器上完成，因此Web服务器的负荷也减少了。</p>
</blockquote>

<p>简单来讲：</p>

<ol>
<li>AJAX 是浏览器上的功能，浏览器可以使用 AJAX 发请求、收响应；</li>
<li>浏览器在 <code>window</code> 上面加了一个 <code>XMLHttpRequest</code>，方便开发者通过 JS 来发请求、收响应，这是一个构造函数</li>
</ol>

<p>如果想要使用 <code>XMLHttpRequest</code> 让浏览器来帮我们加载 CSS / JS / HTML / XML，一共需要进行四步：</p>

<ol>
<li>创建 XMLHttpResquest 对象</li>
<li>调用他的 open() 方法</li>
<li>使用 onreadystatechange 监听他的成功和失败事件</li>

<li><p>调用他的 send() 方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">(</span><span class="p">)</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/{url}&#39;</span><span class="p">)</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nx">request</span><span class="p">.</span><span class="nx">status</span> <span class="o">&lt;</span> <span class="mi">300</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Success&#39;</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Error&#39;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>

<p>这样我们在监听成功事件的时候，就可以对其 <code>request.response</code> 进行解析，比如如果是 CSS，我们可以新建一个 <code>style</code> 标签，把 <code>innerHTML</code> 填上；如果是 JS，可以新建一个 <code>script</code> 标签；如果是 HTML，可以新建一个 <code>div</code>；如果是 XML，我们拿到的 <code>request.responseXML</code> 实际上就已经是一个 DOM 节点了；那么如果拿到的是 JSON 怎么办呢？JSON 实际上是什么呢？</p>

<h2 id="json">JSON</h2>

<p>实际上，JSON 也是一种标记语言（就像 HTML、XML、Markdown 一样），他的全称是（JavaScript Object Natation），这里可以看到他的 <a href="http://json.org/json-zh.html" target="_blank">中文官网</a></p>

<p>从官网中我们可以看到 JSON 支持的变量类型，包括：</p>

<ul>
<li>string（但是只支持双引号）</li>
<li>number（支持科学计数法）</li>
<li>bool</li>
<li>null</li>
<li>object</li>
<li>array</li>
</ul>

<p>注意在 JSON 中，不支持函数和变量</p>

<h3 id="json-parse">JSON.parse()</h3>

<ul>
<li>将符合 JSON 语法的字符串转换为 JS 对应类型的数据</li>
<li>JSON 字符串 ⇒ JS 数据</li>
<li>由于 JSON 只有六种类型，所以转换出的数据也只有六种</li>

<li><p>如果不符合 JSON 语法，则会抛出 Error，一般用 try catch 捕获错误，比如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">object</span>
<span class="k">try</span> <span class="p">{</span>
	<span class="nx">object</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="sb">`</span><span class="sb">{&#39;name&#39;:&#39;harvey&#39;}</span><span class="sb">`</span><span class="p">)</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;出错了，错误详情是：&#39;</span><span class="p">)</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
	<span class="nx">object</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;no name&#39;</span><span class="p">}</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>

<h3 id="json-stringify">JSON.stringify()</h3>

<ul>
<li>是 JSON.parse 的逆运算</li>
<li>JS 数据 ⇒ JSON 字符串</li>
<li>由于 JS 的数据类型比 JSON 多，所以不一定能够成功</li>
<li>如果失败，则会抛出一个 Error 对象</li>
</ul>

<h2 id="异步">异步</h2>

<h3 id="同步与异步">同步与异步</h3>

<p>简单来说，<strong>同步</strong> 就是指 <strong>能直接拿到结果，不拿到结果就不离开</strong>，就像医院挂号一样，可能需要花上几分钟，但是 <strong>拿到号之后才会离开窗口</strong>；</p>

<p><strong>异步</strong> 则 <strong>不能直接拿到结果</strong>，比如在餐厅门口等位，拿到号之后我们可以去逛街，那什么时候真正吃上饭呢？我们可以：</p>

<ul>
<li>每 10 分钟去餐厅问一下（<strong>轮询</strong>）</li>
<li>也可以扫码用微信接收通知（<strong>回调</strong>）</li>
</ul>

<p>拿 AJAX 的栗子来说，当 <code>request.send()</code> 之后，并不能直接得到 <code>response</code>，必须要等待 <code>readyState</code> 变成 <code>4</code> 之后，浏览器回头调用 <code>request.onreadystatechange</code> 函数</p>

<h3 id="回调-callback">回调（callback）</h3>

<p>回调就是 <strong>给别人写了一个函数</strong>，放在一个地方，<strong>让他来调用</strong>，而不是我自己调用。</p>

<p>举个栗子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">function</span> <span class="nx">f1</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span>
    <span class="kd">function</span> <span class="nx">f2</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span><span class="p">{</span>
        <span class="nx">fn</span><span class="p">(</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">f2</span><span class="p">(</span><span class="nx">f1</span><span class="p">)</span>
    <span class="c1">// 我调用了 f2，因此 f2 不是回调
</span><span class="c1"></span>    <span class="c1">// 我把 f1 传给了 f2
</span><span class="c1"></span>    <span class="c1">// 我没有调用，而是 f2 调用了 f1
</span><span class="c1"></span>    <span class="c1">// 所以 f1 是回调
</span></code></pre></td></tr></table>
</div>
</div>
<h3 id="异步与回调">异步与回调</h3>

<p><strong>关联</strong></p>

<p>异步任务需要在得到结果时通知 JS 来拿结果，怎么通知呢？</p>

<ul>
<li>可以让 JS 留一个函数地址（电话号码）给浏览器</li>
<li>异步任务 浏览器调用该函数的地址（拨打电话）</li>
<li>同时 <strong>把结果作为参数</strong> 传给该函数（电话里说可以来吃了）</li>
</ul>

<p>这个函数是我写给浏览器调用的，所以是回调函数</p>

<p><strong>区别</strong></p>

<ul>
<li>异步任务需要用回调函数来通知结果</li>
<li>但异步可以用 <strong>轮询</strong></li>
<li>回调也不一定用在异步里面，比如 <code>array.forEach( n ⇒ console.log(n) )</code>，这就是 <strong>同步回调</strong></li>
</ul>

<blockquote>
<p>如何判断一个函数是同步回调还是异步回调？</p>
</blockquote>

<p>如果一个函数的返回值处于以下这三个内部，即为异步函数：</p>

<ul>
<li>setTimeout</li>
<li>AJAX（即 XMLHttpRequest）</li>
<li>AddEventListener</li>
</ul>

<p>举个栗子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">摇骰子</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
	<span class="nx">setTimeout</span><span class="p">(</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">(</span><span class="p">)</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
	<span class="p">}</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
	<span class="c1">// return undefined
</span><span class="c1"></span><span class="p">}</span>

<span class="c1">// 如果是按上面这样写，将拿不到 1 ~ 6 的随机数，而是 undefined
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">摇骰子</span><span class="p">(</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// undefined
</span><span class="c1"></span>
<span class="c1">// 通过回调来拿到异步的结果
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">摇骰子</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span><span class="p">{</span>
	<span class="nx">setTimeout</span><span class="p">(</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
		<span class="nx">fn</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">(</span><span class="p">)</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
	<span class="p">}</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">f1</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span><span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">}</span>
<span class="nx">摇骰子</span><span class="p">(</span><span class="nx">f1</span><span class="p">)</span>

<span class="c1">// 可以简化代码，因为 f1 只用了一次
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">摇骰子</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span><span class="p">{</span>
	<span class="nx">setTimeout</span><span class="p">(</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
		<span class="nx">fn</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">(</span><span class="p">)</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span><span class="mi">1</span><span class="p">)</span>
	<span class="p">}</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">摇骰子</span><span class="p">(</span><span class="nx">x</span> <span class="p">=&gt;</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
<span class="p">}</span><span class="p">)</span>

<span class="c1">// 可以再简化为
</span><span class="c1"></span><span class="nx">摇骰子</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">)</span> <span class="c1">// 但是如果参数个数不一致就不能这样简化
</span></code></pre></td></tr></table>
</div>
</div>
<p>可以再看一下下面这道题：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">]</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="c1">// [1, NaN, NaN]
</span><span class="c1"></span>    
    <span class="c1">// 正确的写法，i 和 arr 可以省略
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">]</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    	<span class="k">return</span> <span class="nx">paseInt</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
    <span class="p">}</span><span class="p">)</span>
    
    <span class="c1">// 最开始的写法相当于
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">]</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    	<span class="k">return</span> <span class="nx">paseInt</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span>
    	<span class="c1">// parseInt(&#39;1&#39;, 0, arr)，0 为无效参数，忽略
</span><span class="c1"></span>    	<span class="c1">// parseInt(&#39;2&#39;, 1, arr)，相当于把 &#39;2&#39; 作为 1 进制来进行解析 =&gt; NaN
</span><span class="c1"></span>    	<span class="c1">// parseInt(&#39;3&#39;, 2, arr)，相当于把 &#39;3&#39; 作为 2 进制来进行解析 =&gt; NaN
</span><span class="c1"></span>    <span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<h2 id="promise">Promise</h2>

<blockquote>
<p>如果异步任务有两个结果：成功或失败，怎么做？</p>
</blockquote>

<p>方法一：回调接受两个参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;./1.txt&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    	<span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span><span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;失败&#39;</span><span class="p">)</span><span class="p">;</span> <span class="k">return</span> <span class="p">}</span>
    	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>
    <span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>方法二：使用两个回调</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;get&#39;</span><span class="p">,</span> <span class="s1">&#39;/1.json&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">=&gt;</span><span class="p">{</span><span class="p">}</span><span class="p">,</span> <span class="nx">error</span><span class="p">=&gt;</span><span class="p">{</span><span class="p">}</span><span class="p">)</span>
<span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;get&#39;</span><span class="p">,</span> <span class="s1">&#39;/1.json&#39;</span><span class="p">,</span> <span class="p">{</span>
	<span class="nx">success</span><span class="o">:</span> <span class="p">(</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">{</span><span class="p">}</span><span class="p">,</span> <span class="nx">fail</span><span class="o">:</span> <span class="p">(</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">{</span><span class="p">}</span>
<span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>但是这两个方法都有问题：</p>

<ol>
<li>不规范，名称五花八门，有人用 <code>success + error</code>，有人用 <code>success + fail</code>，有人用 <code>done + fail</code></li>
<li>容易出现回调地狱，代码看不懂</li>
<li>很难进行错误处理</li>
</ol>

<p>下面以 AJAX 的封装为例介绍 Promise 的基本用法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">ajax</span> <span class="o">=</span> <span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
	<span class="kr">const</span> <span class="p">{</span><span class="nx">success</span><span class="p">,</span> <span class="nx">fail</span><span class="p">}</span> <span class="o">=</span> <span class="nx">options</span>
	<span class="kr">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">(</span><span class="p">)</span>
	<span class="nx">request</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span>
	<span class="nx">request</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">status</span> <span class="o">&lt;</span> <span class="mi">400</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">success</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">response</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">400</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">fail</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nx">request</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;get&#39;</span><span class="p">,</span> <span class="s1">&#39;/xxx&#39;</span><span class="p">,</span> <span class="p">{</span>
	<span class="nx">success</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span><span class="p">{</span><span class="p">}</span><span class="p">,</span> <span class="nx">fail</span><span class="o">:</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span><span class="p">}</span>
<span class="p">}</span><span class="p">)</span>  <span class="c1">// 左边是 function 的缩写，右边是箭头函数
</span></code></pre></td></tr></table>
</div>
</div>
<p>↑ 上面是普通的写法，↓ 下面是 Promise 的写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">ajax</span> <span class="o">=</span> <span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>  <span class="c1">// return new Promise((resolve, reject)=&gt;{..})
</span><span class="c1"></span>    	<span class="kr">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">(</span><span class="p">)</span>
    	<span class="nx">request</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span>
    	<span class="nx">request</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    		<span class="k">if</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
    			<span class="k">if</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">status</span> <span class="o">&lt;</span> <span class="mi">400</span><span class="p">)</span> <span class="p">{</span>
    				<span class="nx">resolve</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">response</span><span class="p">)</span>  <span class="c1">// 成功调用 resolve(result)，他再回调用第一个函数
</span><span class="c1"></span>    			<span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">400</span><span class="p">)</span> <span class="p">{</span>
    				<span class="nx">reject</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span>  <span class="c1">// 失败调用 reject(error)，他再会调用第二个函数
</span><span class="c1"></span>    			<span class="p">}</span>
    		<span class="p">}</span>
    	<span class="p">}</span>
    	<span class="nx">request</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="p">)</span>
    <span class="p">}</span><span class="p">)</span>
<span class="p">}</span>
    
<span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;get&#39;</span><span class="p">,</span> <span class="s1">&#39;/xxx&#39;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span><span class="p">}</span><span class="p">,</span> <span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span><span class="p">}</span> <span class="p">)</span>   <span class="c1">// Promise 的回调（成功/失败）只能接受一个参数
</span></code></pre></td></tr></table>
</div>
</div>
<h2 id="跨域">跨域</h2>

<h3 id="同源">同源</h3>

<p>输入 <code>window.origin</code> 或者 <code>location.origin</code>，我们就可以看到 <strong>源</strong>，实际上他就是 <strong>协议 + 域名 + 端口号</strong>。</p>

<p>当两个 url 的源（协议、域名、端口号）完全一致，则称之为 <strong>同源</strong>，比如 <code>https://baidu.com</code> 和 <code>https://www.baidu.com</code> 就不同源。</p>

<p><strong>浏览器</strong> 规定：如果 JS <strong>运行在</strong>源 A 里，那么就不能获取源 B 的数据，这就是 <strong>同源策略</strong> ——不允许不同源的资源 <strong>跨域访问</strong>。</p>

<p>要注意的是，同源策略限制的是 <strong>数据的访问</strong>，引用 CSS、JS 和图片的时候，其实并不知道其内容，只是在 <strong>引用</strong>，因此不受同源策略限制。</p>

<p>下面将介绍两种跨域的解决方案。</p>

<h3 id="cors">CORS</h3>

<p>CORS 的全称是 Cross-Origin Resource Sharing，操作起来很简单，只需要在响应头里面写 <code>Access-Control-Allow-Origin: http://foo.example</code> 就可以了，但是 IE 6、7、8、9 都不支持，得用 JSONP。</p>

<h3 id="jsonp">JSONP</h3>

<p>其实 JSONP 和 JSON 并没有多大的关系，下面介绍一下他的思路：</p>

<p>如果我们想让 <code>frank.com</code> 访问 <code>qq.com</code></p>

<ol>
<li><code>qq.com</code> 将 数据写到 <code>/friends.js</code></li>
<li><code>frank.com</code> 用 <code>script</code> 标签引用 <code>/friends.js</code></li>
<li><code>/friends.js</code> 执行，执行 <code>frank.com</code> 事先定义好的 <code>window.xxx</code> 函数（<code>window.xxx({friends:[...]})</code>）</li>
<li>然后 <code>frank.com</code> 通过 <code>window.xxx</code> 获取到了数据，这也是一个回调</li>
</ol>

<p>但是，JSONP 存在安全性问题</p>

<ul>
<li>因为每个人都可以引用 js，需要进行 <code>referer</code> 检查</li>
<li>仍然存在安全问题，如果 <code>frank.com</code> 被攻陷，则 <code>qq.com</code> 也被攻陷</li>
</ul>

<p>如何自动生成 window.xxx（如何把 frank.com 定义好的函数传给后台）？</p>

<ul>
<li>通过查询参数</li>
</ul>

<blockquote>
<p>什么是 JSONP？</p>

<p>背景：当前浏览器或者由于某些因素导致不支持跨域</p>

<p>方法：请求一个 JS 文件，文件会执行一个回调，回调里面有我们的数据，回调的名字可以随机生成，我们把名字用 callback 参数传给后台，后台再返回给我们再执行</p>

<p>优点：兼容 IE、可以跨域</p>

<p>缺点：由于是 <code>script</code> 标签，所以读不到 AJAX 那么精确的状态（比如 Status、响应头等等），并且只能发 <code>GET</code> 请求，不支持 <code>POST</code></p>
</blockquote>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/html/" term="HTML" label="HTML" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/ajax/" term="AJAX" label="AJAX" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">jQuery 初见</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-08-jquery/" />
            <id>http://hais-teatime.com/post/2019-12-08-jquery/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-08T10:34:18+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[本文是初学 jQuery API 的一些记录。]]></summary>
            
                <content type="html"><![CDATA[<p>本文是初学 jQuery API 的一些记录。</p>

<blockquote>
<p>本文参考了 <a href="http://www.ruanyifeng.com/blog/2011/07/jquery_fundamentals.html" target="_blank">阮一峰的博客</a> 、<a href="https://www.jquery123.com/jQuery/" target="_blank">jQuery中文文档</a> 及互联网上的公开内容</p>
</blockquote>

<h2 id="获取元素">获取元素</h2>

<p>通过使用执行 <code>jQuery()</code> 函数，我们可以得到一个 jQuery 对象，这个对象可以对选定的元素集合进行操作。<code>jQuery()</code> 也可以写作 <code>$()</code>。</p>

<p>他接受以下几种常用的参数（但不限于此）：</p>

<ul>
<li>CSS 选择器（selector），比如 <code>$('#myId')</code> <code>$('input[name=first]')</code> 等。</li>
<li>DOM 元素（组）（element / elementArray)</li>
<li>jQuery 对象</li>
<li>HTML 字符串，比如 <code>&lt;div&gt;&lt;/div&gt;</code>。jQuery 会根据它创建一个新的 DOM 元素，然后再创建一个 jQuery 对象。我们可以用一些方法使得他展现在页面上，具体例子比如：<code>$( &quot;&lt;p id='test'&gt;My &lt;em&gt;new&lt;/em&gt; text&lt;/p&gt;&quot; ).appendTo( &quot;body&quot; )</code></li>
</ul>

<p>我们可以通过对结果进行进一步操作，来缩小范围</p>

<ul>
<li><code>$('div').find('p')</code>，选择 <code>div</code> 中的 <code>p</code> 元素</li>
<li><code>$('div').next('p')</code>，选择 <code>div</code> 后面紧邻的 <code>p</code> 元素</li>
<li><code>$('div').prev('p')</code>，选择 <code>div</code> 前面紧邻的 <code>p</code> 元素</li>
<li><code>$('div').parent()</code>， 选择 <code>div</code> 的父元素</li>
<li><code>$('div').children()</code>，选择 <code>div</code> 的所有子元素</li>
<li><code>$('div').siblings()</code>，选择 <code>div</code> 的兄弟元素</li>
</ul>

<p>等等。</p>

<h2 id="链式操作">链式操作</h2>

<p>由于在 jQuery 中，每一个操作（方法）都将会返回一个 jQuery 对象，因此我们可以把下一个操作紧接着写在后面，具体表现为：</p>

<p><code>$('div').find('p').remove()</code></p>

<p>当我们使用 <code>.find()</code> 方法后，操作的元素就不再是 <code>div</code>，而是 <code>div p</code>，比如上面操作表示 <code>div p</code> 将被移除。此时若我们想返回上一层操作，只需要使用 <code>end()</code> 方法。</p>

<p><code>$('div').find('p').end()</code></p>

<h2 id="dom-操作">DOM 操作</h2>

<p>常用的 DOM 操作有这些：</p>

<ul>
<li><code>addClass()</code>：为选定的元素添加 class 名</li>
<li><code>after()</code>：在选定的元素同级的后面增加新元素</li>
<li><code>before()</code>：在选定的元素同级的前面增加新元素</li>
<li><code>append()</code>：在选定元素内部的末尾添加新元素</li>
<li><code>appendTo()</code>：将选定元素插入到某个元素内部的末尾（也就是成为其子元素）</li>
<li><code>attr()</code>：获取选定的第一个元素的属性值</li>
<li><code>clone()</code>：创建一个深拷贝副本</li>
<li><code>css()</code>：获取选定的第一个元素的某个 CSS 属性值；或者为每一个选定的元素添加一个 CSS 属性</li>
<li><code>empty()</code>：从 DOM 中移除选定元素的所有子节点</li>
<li><code>html()</code>：获取选定的第一个元素的 HTML 内容；或者为每一个选定的元素添加 HTML 内容</li>
<li><code>remove()</code>：删除匹配元素，同时删除事件</li>
<li><code>wrap()</code>：为每一个选定元素的外层包上一个 HTML 元素</li>
<li><code>wrapAll()</code>：在所有选定元素的外层包上一层 HTML 元素</li>
</ul>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/jquery/" term="jQuery" label="jQuery" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">JavaScript 入门 V：函数</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-06-js-5/" />
            <id>http://hais-teatime.com/post/2019-12-06-js-5/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-03T09:00:59+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[本文将介绍对象的另外的一种比较重要的形式：函数。除了比较函数一些比较基本的概念以外，也记录了关于 this、作用域、调用时机等对于新手来说比较复杂的东西。]]></summary>
            
                <content type="html"><![CDATA[<p>本文将介绍对象的另外的一种比较重要的形式：函数。除了比较函数一些比较基本的概念以外，也记录了关于 this、作用域、调用时机等对于新手来说比较复杂的东西。</p>

<blockquote>
<p>本文大部分内容是 <a href="http://jirengu.com" target="_blank">饥人谷</a> 方老师课上的讲的内容的总结，并参考了 Wikipedia 和互联网上的其他公开资料。</p>
</blockquote>

<h2 id="函数的定义">函数的定义</h2>

<p>函数的定义大致有以下几种：</p>

<p>具名函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">函数名</span><span class="p">(</span><span class="nx">形参</span><span class="p">)</span> <span class="p">{</span> <span class="nx">函数体</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>匿名函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">形参</span><span class="p">)</span> <span class="p">{</span> <span class="nx">函数体</span> <span class="p">}</span> <span class="c1">// 右边的部分也叫函数表达式
</span></code></pre></td></tr></table>
</div>
</div>
<p>也可以用构造函数来进行定义</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>ES 6 新语法中引入了箭头函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">输入参数</span> <span class="p">=&gt;</span> <span class="nx">输出参数</span>
<span class="p">(</span> <span class="nx">输入参数1</span><span class="p">,</span> <span class="nx">输入参数2</span> <span class="p">)</span>  <span class="p">=&gt;</span> <span class="nx">输出参数</span>
<span class="p">(</span> <span class="nx">输入参数1</span><span class="p">,</span> <span class="nx">输入参数2</span> <span class="p">)</span>  <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">语句1</span>
    <span class="nx">语句2</span>
    <span class="k">return</span> <span class="nx">语句</span>
<span class="p">}</span>
<span class="nx">x</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;...&#39;</span> <span class="p">}</span><span class="p">)</span> <span class="c1">// 如果要返回对象，就要加圆括号
</span></code></pre></td></tr></table>
</div>
</div>
<h2 id="作用域">作用域</h2>

<p>Key Points:</p>

<ul>
<li><strong>全局变量与局部变量</strong>：在 <strong>顶级作用域</strong> 声明的变量是全局变量（比如 window 上的变量是全局变量）；其他的都是局部变量</li>
<li><strong>就近原则</strong>：如果有多个作用域有同名变量 <code>a</code>，那么查找 <code>a</code> 的声明时，就向上取最近的作用域</li>
<li><strong>闭包</strong>：函数用到了外部的变量，则 <strong>函数 + 这个变量 = 闭包</strong></li>
<li><strong>作用域的确定与函数的执行无关（JavaScript 的作用域为静态作用域），但变量的值在函数执行的时候才能确定</strong></li>
</ul>

<p>下一段将会讲解一个关于作用域的比较麻烦的情况</p>

<h2 id="函数的执行时机">函数的执行时机</h2>

<blockquote>
<p>函数中变量的值是在执行的时候确定的，而不是在定义的时候。</p>
</blockquote>

<p>我们再来看一下这一段代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">// 创建一个全局变量 i
</span><span class="c1"></span><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
    <span class="p">}</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>上面代码运行的结果是将会打印出 6 个 <code>6</code>，这是因为 setTimeout 有 <strong>超时延迟</strong> ，如果当前页面（或者操作系统/浏览器本身）<strong>被其他任务占用</strong>，则会产生延时，<strong>等到其他任务执行完之后，setTimeout 里面的函数才会被执行</strong>。</p>

<p>也就是说，等到该执行 <code>console.log(i)</code> 这句话的时候，<code>i</code> 的值已经被因为循环而修改成了 <code>6</code>。</p>

<p>为了让上面的代码能够打印出 <code>0 1 2 3 4 5</code>，我们可以这样改写代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
    <span class="p">}</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>这样 <code>i</code> 的作用域就只在 <code>for 循环</code> 内部，同时每次循环的时候，都会创建一个 <strong>新的局部变量 <code>i</code></strong>。当然要注意的是，这并不是改变了函数的执行顺序，<code>console.log(i)</code> 这句话仍然是在 <code>for 循环</code> 执行完毕之后再执行的，我们可以做一个实验：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
    <span class="p">}</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;End&#39;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>这样写代码最后将会先打印 6 个 <code>'End'</code>，再打印 <code>0 1 2 3 4 5</code>。</p>

<blockquote>
<p>那么还没有别的解决方法呢？</p>
</blockquote>

<p>其实是有的，在 <code>let</code> 出现之前，我们仍然有其他的方法来达到想要的效果，下面就简单介绍一下其中的几种方法，他们的核心思路其实都是 <strong>把每一次的 <code>i</code> 都保存起来</strong>：</p>

<p><strong>第一种方法</strong> 实际上跟刚才的新语法原理上差不多，只不过更容易理解一些，先上代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span>   <span class="c1">// 创建全局变量 i
</span><span class="c1"></span><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span>   <span class="c1">// 创建局部变量 j
</span><span class="c1"></span>    <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>
    <span class="p">}</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;End&#39;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>原理非常简单，我们在 <code>for 循环</code> 内部创建了一个新的 <strong>具有块级作用域的局部变量 <code>j</code></strong>，每次循环的时候，都会创建一个新的 <code>j</code>，于是我们用 <code>j</code> 来保存了每次的 <code>i</code>，当然他也会先打印 6 个 <code>'End'</code>，再打印 <code>0 1 2 3 4 5</code>。</p>

<p><strong>第二种方法</strong>，在 <code>let</code> 诞生之前，我们可以借助函数的传值来保存每一次的 <code>i</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">i</span>   <span class="c1">// 这里是 let 还是 var 都不要紧，都是创建了一个全局变量，就像最开始的情况一样
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">doSetTimeout</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
    <span class="p">}</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">doSetTimeout</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;End&#39;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>看看代码执行的流程：</p>

<ol>
<li>首先我们定义了一个中间函数 <code>doSetTimeout</code></li>
<li>然后在 <code>for 循环</code> 中调用了这个函数</li>
<li>每次循环调用的时候，就传入一个参数 <code>i</code> 给 <code>doSetTimeout</code>，</li>
<li><code>doSetTimeout</code> 用形参 <code>i</code> 接收了这个传给他的参数，在这一步，实际上已经产生了 <strong>2 个 <code>i</code></strong>：

<ul>
<li>一个是 <strong>全局变量 <code>i</code></strong>（也就是 <code>for 循环</code> 中的 <code>i</code>）</li>
<li>一个是 <code>doSetTimeout</code> 这个函数里面的 <strong>局部变量 <code>i</code></strong></li>
</ul></li>
<li>每一次循环就会调用 <code>doSetTimeout</code> 一次，同时 <code>doSetTimeout</code> 会给自己创建一个 <strong>不一样的、新的局部变量 <code>i</code></strong></li>
<li>等循环结束后，<code>doSetTimeout</code> 再打印出所有的 <strong>局部变量 <code>i</code></strong></li>
</ol>

<blockquote>
<p>注意这里仍然没有改变执行的顺序！最终的结果仍然是先打印出 6 个 <code>'End'</code>，再打印 <code>0 1 2 3 4 5</code>。</p>
</blockquote>

<p>当我们理解了上面的写法的时候，我们可以最后看一下在 <code>let</code> 还没有出来的时代，是怎么借助函数创建 <strong>块级局部变量</strong> 的，也就是我们的 <strong>第三种写法</strong>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">i</span>   <span class="c1">// 创建全局变量 i
</span><span class="c1"></span><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span>   <span class="c1">// 创建局部变量 j
</span><span class="c1"></span>        <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>
        <span class="p">}</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;End&#39;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>这里，我们使用了 <strong>立即执行函数</strong>：<code>(function(...){...})()</code>，这种写法表示我声明一个函数，并且马上执行他。当执行结束之后，因为这个函数没有名字，也没有将地址赋值给某个变量，因此我们没办法再从别的地方再调用他，相当于是“一次性函数”。</p>

<p><code>var</code> 的作用域是函数级作用域，因此每个函数里面的 <code>j</code> 都是不一样的，我们再一次聪明地用 <strong>局部变量</strong> 保存了每一次 <strong>全局变量</strong> 的变化！</p>

<blockquote>
<p>总结：这几种写法都是为了利用 <strong>局部作用域</strong> ——他们有的利用了 ES 6 为我们提供的 <strong><code>let</code></strong>，有的使用了 <strong>函数</strong> ——来保存每一次 <code>for 循环</code> 中 <strong>全局变量</strong> 不同的值，<strong>但是，他们均不会改变执行的顺序！</strong></p>
</blockquote>

<h2 id="参数">参数</h2>

<p>Key Points：</p>

<ul>
<li><strong>参数传递</strong>：简单类型复制值，对象复制地址</li>
<li><strong>形参</strong>：实际上就函数中一个<strong>新变量的声明</strong>：<code>var x = arguments[0]</code></li>
<li><strong><code>arguments</code></strong>：调用函数就会传入 <code>arguments</code>，他实际上是一个包含传入参数的 <strong>伪数组</strong></li>
</ul>

<p>形参传递可多可少，看下面一段代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="p">}</span>
<span class="c1">// 此时若执行 add(1, 2)，将会返回 3
</span><span class="c1"></span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span>
<span class="p">}</span>
<span class="c1">// 此时若执行 add(1, 2)，将会返回 3
</span></code></pre></td></tr></table>
</div>
</div>
<h2 id="this">this</h2>

<p>Key Points:</p>

<ul>
<li>如果不给定任何条件，<code>this</code> 为 <code>window</code></li>
<li>如果想要指定 <code>this</code>，需要使用 <code>fn.call(..., 1, 2, 3)</code>，如果传入的 <code>this</code> 不是对象，则将会默认会被封装成对象</li>
</ul>

<h3 id="this-解决了什么问题">this 解决了什么问题？</h3>

<blockquote>
<p>this 的存在是为了解决函数想要获取一个对象的引用的问题</p>
</blockquote>

<p>直接看 this 是怎么解决这个问题的吧：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;harvey&#39;</span><span class="p">,</span>
        <span class="nx">sayHi</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">(</span><span class="p">)</span>  <span class="c1">// 在这句话中，系统会自动地把 person 作为 this 传给 sayHi，这样就解决了 sayHi 想要用到某个对象的问题了
</span></code></pre></td></tr></table>
</div>
</div>
<p>因为平时都是 JavaScript 自动帮我们传递了 <code>this</code>，所以我们可能对其中发生了什么并不了解。</p>

<p>在这里，我们把常用的函数调用的方法称为 <code>this</code> 的 <strong>隐式传递</strong>，与之相对应的则是使用 <code>call</code> 或者 <code>apply</code> 的 <strong>显式传递</strong>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">(</span><span class="p">)</span>              <span class="c1">// 隐式传递
</span><span class="c1"></span><span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>   <span class="c1">// 显式传递
</span></code></pre></td></tr></table>
</div>
</div>
<p>当然我们还可以再后面加参数：<code>person.sayHi.call(person, 1, 2, 3)</code>，使用 <code>apply</code> 和 <code>call</code> 的不同就在于 <code>apply</code> 后面的参数要用中括号括起来，因为他传递的是数组。</p>

<h3 id="绑定-this">绑定 this</h3>

<p>使用 <code>bind</code> 可以绑定 <code>this</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">f3</span> <span class="o">=</span> <span class="nx">f1</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;hai&#39;</span><span class="p">}</span><span class="p">,</span> <span class="s1">&#39;hi&#39;</span> <span class="p">)</span>  <span class="c1">// 相当于让 f3 的 this 和 arguments 永远等于 bind 的内容
</span><span class="c1"></span><span class="nx">f3</span><span class="p">(</span><span class="p">)</span>    <span class="c1">// 等价于 f1.call( {name:&#39;hai&#39;}, &#39;hi&#39; )，
</span></code></pre></td></tr></table>
</div>
</div>
<h3 id="箭头函数">箭头函数</h3>

<p>箭头函数没有 <code>arguments</code> 和 <code>this</code>，箭头函数里面的 <code>this</code> 就是外面的 <code>this</code>，就算加 <code>call</code> 也没有</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>                   <span class="c1">// window
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="nx">fn</span><span class="p">(</span><span class="p">)</span>                                <span class="c1">// window
</span><span class="c1"></span><span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;hai&#39;</span><span class="p">}</span> <span class="p">)</span>             <span class="c1">// window
</span></code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">JavaScript 入门 IV：数组</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-02-js-4/" />
            <id>http://hais-teatime.com/post/2019-12-02-js-4/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-02T15:35:22+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[本文将介绍对象的其中的一种比较特别的形式：数组。
这里需要注意的是，JavaScript 中的数组不是典型的数组，而是一个对象；具体表现在：元素的 数据类型可以不同，内存不一定连续，并且是通过字符串下标 （而不是数字下标）获取元素。]]></summary>
            
                <content type="html"><![CDATA[<p>本文将介绍对象的其中的一种比较特别的形式：数组。</p>

<p>这里需要注意的是，JavaScript 中的数组不是典型的数组，<strong>而是一个对象</strong>；具体表现在：元素的 <strong>数据类型可以不同</strong>，<strong>内存不一定连续</strong>，并且是通过<strong>字符串下标</strong> （而不是数字下标）获取元素。</p>

<blockquote>
<p>本文大部分内容是 <a href="http://jirengu.com" target="_blank">饥人谷</a> 方老师课上的讲的内容的总结，并参考了 Wikipedia 和互联网上的其他公开资料。</p>
</blockquote>

<h2 id="新建数组">新建数组</h2>

<p>我们可以通过以下两种方式来新建一个数组：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 数组的简便定义
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="c1">// 数组的标准写法
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="c1">// 或者只传入一个参数，表示数组的长度
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>除此之外，数组还可以从字符串或对象转化而来：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 以&#39;,&#39;分隔的字符串
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="s1">&#39;1,2,3&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
<span class="c1">// 没有间隔的字符串
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="s1">&#39;123&#39;</span><span class="p">)</span>
<span class="c1">// 由对象转换
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>当然数组也可以重新转换为字符串：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>数组对象除了 <code>__proto__</code> 之外，还包括 <strong>索引</strong> 和 <strong>长度（<code>length</code>）</strong> 这两个自身属性。</p>

<blockquote>
<p>什么是伪数组？</p>

<p>伪数组看起来像 JavaScript 的数组，但是他的的原型链中 <strong>没有数组的原型</strong>，不能使用数组常用的一些方法，比如一个普通的对象只是加上 <code>length</code> 属性，得到的是一个伪数组。</p>

<p>一些 DOM 操作也会产生伪数组：<code>let divList = document.querySelector('div')</code>。</p>

<p>但是因为伪数组很不方便，我们通常还是会再将其转换为数组：<code>let divArray = Array.from(divList)</code>。</p>
</blockquote>

<p>我们还可以通过其他的一些操作得到一些新数组：</p>

<ul>
<li><strong>合并数组</strong>：<code>let arr3 = arr1.concat(arr2)</code>，生成新数组，原数组不变</li>
<li><strong>截取数组</strong>：<code>let arr2 = arr1.slice(2)</code>，生成新数组，原数组不变</li>
<li><strong>复制数组</strong>：<code>let arr2 = arr1.slice(0)</code>，生成新数组，原数组不变</li>
</ul>

<h2 id="删除元素">删除元素</h2>

<p>我们可以用对象通用的 <code>delete</code> 方法删除元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span>
<span class="k">delete</span> <span class="nx">arr</span><span class="p">[</span><span class="s1">&#39;0&#39;</span><span class="p">]</span>
<span class="c1">// 之后 arr 变成 [ empty, &#39;b&#39;, &#39;c&#39;]，如果 3 个值都是 empty，则称为稀疏数组，不推荐这种方法
</span></code></pre></td></tr></table>
</div>
</div>
<p>此外，我们也可以通过改 <code>length</code> 也可以删除数组的元素，但同样不推荐。</p>

<p>下面是推荐的元素删除方法，每种方法均不会生成新的数组，原来的数组会被修改。</p>

<ul>
<li><code>arr.shift()</code>，删除最开始的元素，并返回他，<code>arr</code> 被修改</li>
<li><code>arr.pop()</code>，删除最后一个元素，并返回他，<code>arr</code> 被修改</li>
<li><code>arr.splice(2, 3)</code>，从 <code>2</code> 开始，删除 <code>3</code> 个，并返回删除的部分，<code>arr</code> 被修改</li>
<li><code>arr.splice(2, 3, 'x', 'y')</code>，从 <code>2</code> 开始，删除 <code>3</code> 个，增加 <code>'x'</code> 和 <code>'y'</code>，并返回删除的部分，<code>arr</code> 被修改</li>
</ul>

<h2 id="查看元素">查看元素</h2>

<p>首先是数组的遍历。同样的，我们可以使用对象通用的 <code>Object.keys(arr)</code> 和 <code>Object.values(arr)</code> 方法，也可以使用 <code>for in</code> 来打印，但这三种方法我们均不推荐。</p>

<p>我们可以采用以下方法来遍历数组：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">i</span><span class="si">}</span><span class="sb"> : </span><span class="si">${</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>

<span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">$</span><span class="sb">(index) : </span><span class="sb">$</span><span class="sb">(item)</span><span class="sb">`</span><span class="p">)</span>
<span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>以上两种基本没有区别，但 <code>for</code> 关键字有 <code>continue</code> 和 <code>break</code>，<code>forEach</code> 没有；<code>for</code> 是块级作用域，<code>forEach</code> 是函数作用域。</p>

<p>同时我们可以自己尝试手写一个 <code>forEach</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">forEach</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span><span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span>
        <span class="nx">fn</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<blockquote>
<p>注意有时会遇到索引越界的情况，比如 <code>arr[arr.length] === undefined</code> 或者 <code>a[-1] === undefined</code></p>
</blockquote>

<p>我们可以通过 <code>arr.indexOf(item)</code> 来查找 <code>item</code> 是否在数组里面，若存在就会返回索引，否则就返回 <code>-1</code>；</p>

<p>还可以通过条件来查找元素：<code>arr.find(item =&gt; item % 2 === 0)</code>，找到第一个偶数；也可以用 <code>arr.findIndex(item =&gt; item % 2 === 0)</code>，找到第一个偶数的索引</p>

<h2 id="增加元素">增加元素</h2>

<p>通过下面这三种方法可以实现在尾部、头部、中间增加元素，每种方法都会改变原数组，但他们的返回值有所不同：</p>

<ul>
<li><code>arr.push()</code>，在尾部添加，返回数组长度，<code>arr</code> 被修改</li>
<li><code>arr.unshift()</code>，在头部添加，返回数组长度，<code>arr</code> 被修改</li>
<li><code>arr.splice(8, 0, 'x', 'y')</code>，增加 <code>'x'</code> 和 <code>'y'</code>，并返回删除的部分 <code>[]</code> ，arr 被修改</li>
</ul>

<h2 id="修改元素">修改元素</h2>

<p>数组还提供了一些其他方法来操作元素：</p>

<p><code>arr.reverse()</code>，数组反向，<code>arr</code> 被修改</p>

<p><code>arr.sort()</code>，数组排序，<code>arr</code> 被修改，通过下面这种方式可以修改排序的方式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span><span class="p">)</span><span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span>
    <span class="k">else</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
<span class="p">}</span>
<span class="c1">// 若返回 1，则 a 在 b 后面；返回 0，则不变，返回 -1 则 b 在 a 后面。
</span></code></pre></td></tr></table>
</div>
</div>
<p>还可以进行自定义排序：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span><span class="p">)</span><span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">score</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">score</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">score</span> <span class="o">===</span> <span class="nx">b</span><span class="p">.</span><span class="nx">score</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span>
    <span class="k">else</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
<span class="p">}</span>
<span class="c1">// 以上可以简写为
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span><span class="p">.</span><span class="nx">score</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">score</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<h2 id="数组变换">数组变换</h2>

<p>有三种方法可以实现数组变换：</p>

<p><code>map</code>：n 变 n</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span> <span class="o">*</span> <span class="nx">item</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p><code>filter</code>：n 变少</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p><code>reduce</code>：n 变 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="nx">sum</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">sum</span> <span class="o">+</span> <span class="nx">item</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span> <span class="o">*</span> <span class="nx">item</span><span class="p">)</span><span class="p">,</span> <span class="p">[</span><span class="p">]</span><span class="p">)</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="p">[</span><span class="p">]</span> <span class="o">:</span> <span class="nx">item</span><span class="p">)</span><span class="p">,</span> <span class="p">[</span><span class="p">]</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">JavaScript 入门 III：对象</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-02-js-3/" />
            <id>http://hais-teatime.com/post/2019-12-02-js-3/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-02T12:14:00+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[本文将介绍 JavaScript 中非常重要的一个知识点——对象，以及关于原型的相关内容。]]></summary>
            
                <content type="html"><![CDATA[<p>本文将介绍 JavaScript 中非常重要的一个知识点——对象，以及关于原型的相关内容。</p>

<blockquote>
<p>本文大部分内容是 <a href="http://jirengu.com" target="_blank">饥人谷</a> 方老师课上的讲的内容的总结，并参考了 Wikipedia 和互联网上的其他公开资料。</p>
</blockquote>

<p>简单来说，对象实际上就是无序的数据集合，或者说是 <strong>键/值对（Key/Value Paris）</strong>的集合，他可以有以下几种写法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 对象的简便声明
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;harvey&#39;</span><span class="p">,</span>
    <span class="s1">&#39;age&#39;</span><span class="o">:</span> <span class="mi">18</span>
    <span class="p">}</span>
<span class="c1">// 对象的标准写法
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">(</span><span class="p">{</span>
    <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;harvey&#39;</span><span class="p">,</span>
    <span class="s1">&#39;age&#39;</span><span class="o">:</span> <span class="mi">18</span>
<span class="p">}</span><span class="p">)</span>
<span class="c1">// 对象也可以作为参数直接传入函数
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="p">{</span>
    <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;harvey&#39;</span><span class="p">,</span>
    <span class="s1">&#39;age&#39;</span><span class="o">:</span> <span class="mi">18</span>
<span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>在这里我们需要注意以下几个细节：</p>

<ul>
<li>键名是 <strong>字符串</strong>，<strong>不是标识符</strong>，可以是任意字符</li>
<li>引号可以省略，省略之后就只能写标识符或者以数字开头</li>
<li><strong>但就算引号省略了，键名也还是字符串</strong>

<ul>
<li>有时候遇到一些奇怪的属性名，比如 <code>1e2</code> 会变成 <code>'100'</code>，<code>.234</code> 会变成 <code>'0.234'</code>，<code>0xFF</code> 会变成 <code>'255'</code></li>
</ul></li>
<li>变量也可以作为属性名，比如：<code>let obj = { [p1]: 'harvey' }</code>，这样就会用 <code>p1</code> 里面的值了，<strong>中括号里面的东西都会先求值</strong></li>
</ul>

<h2 id="对象的属性">对象的属性</h2>

<h3 id="隐藏的属性">隐藏的属性</h3>

<p><strong>每一个</strong> 对象都有一个隐藏属性 <code>__proto__</code>，这个属性存着 <strong>一个对象的地址</strong>，这个对象包含了这类对象（普通对象、数组、函数等）的 <strong>共有属性</strong>。</p>

<p><code>__proto__</code> 里面存的实际上就是 <strong>原型的地址</strong>。</p>

<p>因此，<strong>每一个对象都有原型</strong>。</p>

<p>比如 <code>obj = {}</code>，他的原型的地址就存储在 <code>obj.__proto__</code> 中，而<code>obj.__proto__</code> 也是一个对象，因此他也有原型，但我们规定，他的原型值为 <code>null</code>。</p>

<h3 id="属性的删除">属性的删除</h3>

<p>有以下两种删除对象属性的方法：</p>

<ol>
<li><code>obj.name = undefined</code>，这样做只会删除属性的值，不会把属性完全删除</li>
<li><code>delete obj.name</code>，同时删除属性名和属性值，或者用 <code>delete obj['name']</code> 也是可以的</li>
</ol>

<p>删除完成后我们可以对删除的结果进行检查：</p>

<ol>
<li><code>'name' in obj</code>，检查 <code>'name'</code> 是不是 <code>obj</code> 的属性名，如果是用上面的第一种方法删除，检查的结果将是 <code>true</code>；如果是第二种方法删除，则会返回 <code>false</code>；注意属性名有引号（因为属性名实际上是字符串）</li>
<li><code>'name' in obj &amp;&amp; obj.name === undefined</code>，检查是否含有属性名且值为 <code>undefined</code>，如果是上面第一种方法删除，则会返回 <code>true</code></li>
</ol>

<h3 id="属性的查看">属性的查看</h3>

<p>有以下几种方法可以查看对象的属性名（或属性值）</p>

<ul>
<li><code>Object.keys(obj)</code>，查看 <code>obj</code> 的 <strong>自身</strong> 属性名</li>
<li><code>Object.values(obj)</code>，查看 <code>obj</code> 的  <strong>自身</strong> 属性值</li>
<li><code>Object.entries(obj)</code>，返回结果包含两个数组，第一个数组是 <code>obj</code> 的 <strong>自身</strong> 属性名，第二个数组是 <code>obj</code> 的 <strong>自身</strong> 属性值</li>
<li><code>console.dir(obj)</code>，查看 <code>obj</code> 的 <strong>自身属性 + 共有属性</strong></li>
<li><code>in</code>，查看是不是 <strong>自身属性 + 共有属性</strong> （相当于所有属性）</li>
<li><code>obj.hasOwnProperty('toString')</code>，查看 <code>'toString'</code> 是不是 <code>'obj'</code> <strong>自身的</strong> 属性</li>
</ul>

<blockquote>
<p>注意 <code>obj.name</code> 等价于 <code>obj['name']</code>，不等价于 <code>obj[name]</code></p>
</blockquote>

<h3 id="添加或修改属性">添加或修改属性</h3>

<p>我们可以直接为原有属性进行赋值，或者增加新的属性并赋值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;harvey&#39;</span>
<span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;harvey&#39;</span>
<span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;na&#39;</span><span class="o">+</span><span class="s1">&#39;me&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;harvey&#39;</span> <span class="c1">// 因为属性名本质是字符串，上面三句话实际上是一样的
</span></code></pre></td></tr></table>
</div>
</div>
<p>我们也可以批量进行赋值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="nx">p1</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">p2</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span> <span class="nx">p3</span><span class="o">:</span><span class="mi">3</span><span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>但是，我们无法直接修改共有属性（原型上的属性），比如，我们不能通过 <code>obj.toString</code> 来修改原型上的<code>'toString'</code>，这样只会为 <code>obj</code> 增添一个本身的<code>'toString'</code> 属性，而不会修改原型。</p>

<p>如果我们一定要修改原型的属性，我们可以这样做，但是我们非常不建议这样做。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> 
<span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> 
</code></pre></td></tr></table>
</div>
</div>
<p>我们也可以将 <code>obj</code> 的原型改成别的值，比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 先创建一个对象，叫做 people，注意 people 的原型是这类对象的共有属性的集合（里面系统默认创建了一些属性）
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">people</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span>
<span class="c1">// 我们再以 people 为原型创建一个新的对象，叫做 chinese
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">chinese</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">people</span><span class="p">)</span>
<span class="c1">// 上面这句话相当于 chinese.__proto__ = people，但是我们非常不建议直接操作 __proto__ 属性
</span></code></pre></td></tr></table>
</div>
</div>
<p>经过上面这一番操作之后，我们来分析一下：</p>

<p><code>chinese</code> 的原型（也就是说 <code>chinese.__proto__</code>）实际上已经变成了 <code>people</code>，而 <code>people</code> 的原型（<code>people.__proto__</code>）是这类对象的<strong>共有属性的集合</strong>——这就形成了 <strong>原型链</strong>。</p>

<h2 id="对象的分类">对象的分类</h2>

<blockquote>
<p>所有的函数自带 <code>prototype</code></p>

<p><code>prototype</code> 中自带 <code>constructor</code></p>

<p><code>constructor</code> 里面的东西就是函数的内容</p>
</blockquote>

<p>当我们使用 <code>new X()</code> 的时候，系统自动帮我们做了 4 件事情：</p>

<ol>
<li>自动创建了一个空对象</li>
<li>自动为空对象关联原型（即为 <code>新对象.__protp__</code> 赋值），原型的地址为 <code>X.prototype</code></li>
<li>自动将空对象作为 <code>this</code> 关键字运行构造函数</li>
<li>自动 <code>return this</code></li>
</ol>

<p>我们将 <code>X</code> 称为 <strong>构造函数</strong>，他有以下两个功能：</p>

<ol>
<li><code>X</code> 自己里面写的东西，用于添加新对象的 <strong>自身属性</strong></li>
<li><code>X.prototype</code> 负责保存对象的 <strong>共有属性</strong></li>
</ol>

<p>用另种方式表达，也就是说，当我们执行 <code>let 对象 = new 构造函数()</code> 之后，将会得到结果 <code>对象.__proto__ === 其构造函数.prototype</code></p>

<blockquote>
<p>插播两条代码规范：</p>

<ol>
<li>所有构造函数首字母大写（这就是为什么上文用大写的 <code>X</code> 表示构造函数，被构造出来的对象首字母小写）</li>
<li><code>new</code> 后面的函数使用名词；其他的函数一般用动词开头</li>
</ol>

<p>区别 <strong>数据类型</strong> 与 <strong>对象的分类</strong>：</p>

<ul>
<li>数据类型是 JavaScript 数据的类型，一共有 7 种；</li>
<li>对象的分类则有无数种，常见的有 Array、Function、Date、RegExp 等</li>
</ul>
</blockquote>

<p>我们常见的有这几种类型的对象：</p>

<ul>
<li><p>数组对象</p>

<ul>
<li>自身属性：<code>'0'</code> <code>'1'</code> <code>'2'</code> <code>'length'</code></li>
<li>共有属性：<code>'push'</code> <code>'pop'</code> <code>'shift'</code> <code>'unshift'</code> <code>'join'</code></li>
</ul></li>

<li><p>函数对象</p>

<ul>
<li>自身属性：<code>'name'</code> <code>'length'</code></li>
<li>共有属性：<code>'call'</code> <code>'apply'</code> <code>'bind'</code></li>
</ul></li>
</ul>

<blockquote>
<p>Extra Questions:</p>

<p><strong>Q: window 是谁构造出来的？</strong></p>

<p>A: 可以通过 constructor 属性看出构造者</p>

<p><strong>Q: window.Object 是谁构造的？</strong></p>

<p>A: window.Function，所有的函数都是 window.Function 构造的</p>

<p><strong>Q: window.Function 是谁构造的？</strong></p>

<p>A: window.Function，所有的函数都是 window.Function 构造的，浏览器构造了 Function，然后指定它的构造者是自己</p>
</blockquote>

<h3 id="class-语法糖">class 语法糖</h3>

<p>关于 class 的相关用法详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes" target="_blank">MDN 文档</a>，相对简单，这里不再赘述。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">JavaScript 入门 II：数据类型</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-02-js-2/" />
            <id>http://hais-teatime.com/post/2019-12-02-js-2/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-02T11:21:59+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[本文将介绍 JavaScript 的 7 种数据类型、变量声明，以及类型转换相关的知识，主要是为下一篇对象的介绍做准备。]]></summary>
            
                <content type="html"><![CDATA[<p>本文将介绍 JavaScript 的 7 种数据类型、变量声明，以及类型转换相关的知识，主要是为下一篇对象的介绍做准备。</p>

<blockquote>
<p>本文大部分内容是 <a href="http://jirengu.com" target="_blank">饥人谷</a> 方老师课上的讲的内容的总结，并参考了 Wikipedia 和互联网上的其他公开资料。</p>
</blockquote>

<h2 id="数据类型">数据类型</h2>

<h3 id="number">number</h3>

<p>Key Points:</p>

<ul>
<li>由 64 位浮点数组成</li>
<li>特殊值：

<ul>
<li><code>0</code>、<code>+0</code>、<code>-0</code>；</li>
<li><code>Infinity</code>、<code>+Infinity</code>（1/0 得到）、<code>-Infinity</code>（1/-0 得到）；</li>
<li><code>NaN</code>（0/0 得到，注意他也是 number 类型的，此外 NaN === NaN 为 false）</li>
</ul></li>
<li>范围和精度：从 <code>Number.MIN_VALUE 到 Number.MAX_VALUE</code>，精度大概是 15 个 10 进制有效数字</li>
</ul>

<h3 id="string">string</h3>

<p>Key Points:</p>

<ul>
<li>每个字符两个字节（JavaScript 使用阉割版 UTF-8，两个字符定长）</li>
<li>写法：单引号、双引号、反引号，注意 <strong>引号不是字符串的一部分</strong></li>
<li>转义：<code>\r</code> 表示回车，<code>\uFFFF</code> 表示对应的 Unicode 字符，<code>\xFF</code> 表示前 256 个 Unicode 字符</li>
<li>字符串的属性：<em>（字符串本来不应该有属性，只有对象才有属性，这里面有故事，后续填坑）</em>

<ul>
<li>长度：<code>s.length</code></li>
<li>下标：<code>s[0]</code></li>
</ul></li>
<li>Base64 转码：<code>window.btoa</code> 编码，<code>window.atob</code> 反编码，注意这个编码不是加密，很容易解开</li>
</ul>

<h3 id="bool">bool</h3>

<p>Key Points:</p>

<ul>
<li>否定运算、相等运算、比较运算可以得到 bool 值</li>
<li><strong>五个 falsy 值：<code>undefined</code> <code>null</code> <code>0</code> <code>NaN</code> <code>''</code></strong></li>
</ul>

<h3 id="symbol">symbol</h3>

<h3 id="undefined">undefined</h3>

<p>Key Points:</p>

<ul>
<li>如果声明了没有赋值，默认是 <code>undefined</code></li>
<li>如果函数没有写 <code>return</code>，默认是 <code>undefined</code></li>
</ul>

<h3 id="null">null</h3>

<p>习惯上把非对象空值写成 <code>undefined</code>，对象空值写成 <code>null</code></p>

<h3 id="object">object</h3>

<p><strong>数组、函数、日期</strong>都是 <code>object</code>，不是单独的数据类型，关于对象的相关问题可以参考下一篇文章。</p>

<h2 id="变量声明">变量声明</h2>

<p>目前 JavaScript 一共有三种声明方式：</p>

<ul>
<li><code>var</code>：过时的，不好的</li>
<li><code>let</code>：新的，更合理的，跟 <code>var</code> 主要有以下几点不同：

<ul>
<li>遵循块作用域</li>
<li>不能重复声明</li>
<li>声明时可以赋值，也可以不赋值</li>
<li>必须先声明再使用</li>
<li>全局声明的 <code>let</code> 变量不会再变成 <code>window</code> 的属性</li>
<li><code>let</code> 配合 <code>for 循环</code> 有奇效，因为每次循环都会新加一个 let</li>
</ul></li>
<li><code>const</code>：跟 let 几乎一样，但声明时必须赋值，且不能再更改（类似于常量声明）</li>
</ul>

<blockquote>
<p>注意：</p>

<p>变量声明指定值的时候同时 <strong>也指定了类型</strong>，但是值和类型都可以随意变化</p>
</blockquote>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">JavaScript 入门 I：诞生与基础语法</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-01-js-1/" />
            <id>http://hais-teatime.com/post/2019-12-01-js-1/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-01T17:17:48+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[JavaScript 的诞生为网页的互动带来了更多的可能性，虽然现在已经出现了很多方便好用的 JavaScript 库，但我们还是应该认真学习原生 JS 的相关知识。本文是 JavaScript 入门系列的第一篇，将从 JavaScript 的诞生和基本的一些语法开始着手介绍。]]></summary>
            
                <content type="html"><![CDATA[<p>JavaScript 的诞生为网页的互动带来了更多的可能性，虽然现在已经出现了很多方便好用的 JavaScript 库，但我们还是应该认真学习原生 JS 的相关知识。本文是 JavaScript 入门系列的第一篇，将从 JavaScript 的诞生和基本的一些语法开始着手介绍。</p>

<blockquote>
<p>本文参考了：</p>

<p><a href="http://jirengu.com" target="_blank">饥人谷</a> 方老师上课讲的内容；</p>

<p>阮一峰的博客 <a href="http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html" target="_blank">JavaScript 诞生记</a> 和 <a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html" target="_blank">JavaScript 的 10 个设计缺陷</a>；</p>

<p><a href="https://zh.wikipedia.org/wiki/JavaScript#%E5%8E%86%E5%8F%B2" target="_blank">JavaScript 的维基百科</a>；</p>

<p>以及其他在互联网上未标明出处的内容。</p>
</blockquote>

<h2 id="javascript-的诞生">JavaScript 的诞生</h2>

<p>1994 年，网景公司（当时叫 Mosaic Communications）发布了一款名为 <strong>Mosaic Netscape</strong> 的网页浏览器，在四个月内，这款浏览器就占据了四分之三的浏览器市场，并成为 1990 年代互联网的主要浏览器。</p>

<blockquote>
<p>因为世界最早流行的图形接口网页浏览器 <strong>NCSA Mosaic</strong> 是美国国家超级电脑应用中心（NCSA）与 1993 年发布的，网景公司为了避免版权纠纷，将浏览器改名为 <strong>Netscape Navigator</strong>，而公司则改名为 <strong>Netscape Communications</strong>。</p>
</blockquote>

<p>这款浏览器发布之后，网景意识到，<strong>光有静态的页面是不行的，需一种网页脚本语言，使得浏览器可以与网页互动。</strong></p>

<p>1995 年，昇阳（Sun）正式向市场推出 Java，网景公司看到 Java 的前景，决定与之结盟，并在浏览器中支持 Java，但如果直接将Java作为脚本语言嵌入网页，只是因为这样会使HTML网页过于复杂。</p>

<p>同年，网景招募了布兰登（Brendan Eich），授意其开发一款 <strong>“未来的脚本语言”</strong> ，这种语言需要：“看上去与Java足够相似，但是比Java简单，使得非专业的网页作者也能很快上手。”——这个决定就排除了 Perl、Python、Tcl 或 Scheme 这些选项，同时也促成了 JavaScript 的诞生。</p>

<p>由于对 Java 不感兴趣，布兰登只用了十天时间就设计出了这款语言的原型，并命名为 <strong>Mocha</strong>，后续又改名为 <strong>LiveScript</strong>，但在 1995 年 12 月，公司为了蹭 Java 的热度，改名为 <strong>JavaScript</strong>。而事实上，JavaScript 和 Java 关系并不大。</p>

<blockquote>
<p>总的来说，布兰登的设计思路是这样的：</p>

<ol>
<li>借鉴 C 的基本语法；</li>
<li>借鉴 Java 的数据类型和内存管理；</li>
<li>借鉴 Scheme，将函数提升到“第一等公民”（first class）的地位；</li>
<li>借鉴 Self，使用基于原型（prototype）的继承机制。</li>
</ol>
</blockquote>

<p>由于 JavaScript 在浏览器上的大获成功，微软（Microsoft）在后续推出的 IE 3 上也使用了 <strong>JScript</strong> ——这与 JavaScript 是类似、但不同标准的语言。于是当年市场上出现了两者对峙的情况，网页设计者通常会在主页放上“用Netscape可达到最佳效果”或“用IE可达到最佳效果”的标志。</p>

<p>1996 年 11 月，网景正式向 <strong>欧洲计算机制造商协会（ECMA）</strong> 提交语言标准；1997 年 6 月，ECMA 以 JavaScript 语言为基础制定了 ECMAScript 标准规范 ECMA-262。自然 JavaScript 也成为了 ECMAScript 最著名的实现之一。</p>

<p>由于只有短短十天的设计时间，而且世界上之前没有出现过结合了函数式编程和对象编程的语言，以及发展的迅速导致没有时间调整设计，JavaScript 成功成为了有着众多设计缺陷的语言，在这里不做细谈。</p>

<p>2001 年，微软发布 Windows XP，并捆绑了 IE 6。由于 Windows XP 迅速爆火以及长期的垄断，IE 6 也随之占据非常高的市场份额。前文已经说过，IE 6 对 JavaScript 支持并不好，同时 IE 6 对 CSS 标准的支持也不尽完善，导致前端技术的发展进入了漫长的蛰伏期。</p>

<p>2004 年，谷歌（Google）发布爆款应用 Gmail。这款应用在刚推出时，容量就比起其他受欢迎的电子邮箱服务如雅虎和微软的 Hotmail 多出过百倍，成为市场爆品，同时也让众多开发者看到了页面交互的巨大前景和可能性。</p>

<p>2005 年，Jesse 将谷歌用到的技术命名为 AJAX。</p>

<p>2006 年，至今为止最为长寿的 JavaScript 库—— jQuery，发布。</p>

<p>2008 年，谷歌发布 Chrome 浏览器；同年，Chrome 的使用率上升至 1%。其使用高性能 JavaScript 引擎 V8。</p>

<p>2009 年，Ryan 基于 V8 写了 Node.js。</p>

<p>2010 年，Isaac 基于 Node.js 写了 npm。</p>

<p>2010 年，TJ 受 Sinatra 启发，写了 Express.js。赶上了这几波顺风车的 JavaScript 迅速发展，并将触手伸向了后端。自此，JavaScript 也能胜任后端的一些工作了。</p>

<p>2012 年，Chrome 全球占有率达到 33%，超越 IE 跃居首位。</p>

<p>2015 年 12 月，Chrome 中国占有率大都 37%，超越 IE。</p>

<h2 id="javascript-基础语法">JavaScript 基础语法</h2>

<h3 id="表达式和语句">表达式和语句</h3>

<p>Key Points:</p>

<ul>
<li>表达式一般都有值，语句可能有也可能没有</li>
<li>语句一般会改变环境（声明、赋值），逗号表示语句没完</li>
</ul>

<p>举个栗子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 表达式
</span><span class="c1"></span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>          <span class="c1">// 值为 3
</span><span class="c1"></span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>      <span class="c1">// 值为函数的返回值
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span>    <span class="c1">// 值为函数本身
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">// 值为函数的返回值：undefined
</span><span class="c1"></span>
<span class="c1">// 语句
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div>
<h3 id="标识符">标识符</h3>

<p>标识符是代码中用来标识变量、函数、或属性的字符序列。</p>

<blockquote>
<p>在 JavaScript 中，标识符只能包含字母或数字或下划线（“_”）或美元符号（“$”），且不能以数字开头。（有时候也可以用其他的 Unicode 字符，比如中文，比如 Emoji）</p>

<p>标识符与字符串不同之处在于字符串是数据，而标识符是代码的一部分。在 JavaScript 中，无法将标识符转换为字符串，但有时可以将字符串解析为标识符。</p>
</blockquote>

<h3 id="if-else-语句">if...else 语句</h3>

<p>与其他大多数语言的 if...else 没有区别，详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else" target="_blank">MDN 文档</a>。</p>

<p>举个栗子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">if</span> <span class="p">(</span><span class="nx">cipher_char</span> <span class="o">===</span> <span class="nx">from_char</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">result</span> <span class="o">=</span> <span class="nx">result</span> <span class="o">+</span> <span class="nx">to_char</span>
   <span class="nx">x</span><span class="o">++</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
   <span class="nx">result</span> <span class="o">=</span> <span class="nx">result</span> <span class="o">+</span> <span class="nx">clear_char</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<blockquote>
<p><code>&amp;&amp;</code>：如果前面是真的，就执行后面的（若前面是假的，表达式的值为前面；若前面是真的，表达式的值为后面）</p>

<p>比如：</p>

<p><code>window.f1 &amp;&amp; console.log('f1存在')</code></p>

<p><code>console &amp;&amp; console.log &amp;&amp; console.log('hi')</code>，IE 没有 <code>console.log</code></p>

<p><code>||</code>：如果前面是假的，就执行后面的</p>

<p>比如：</p>

<p><code>a = a || 100</code>，可以用于设置保底值</p>
</blockquote>

<h3 id="循环语句">循环语句</h3>

<h4 id="while-循环">while 循环</h4>

<p>与其他大多数语言的 while 循环没有区别，详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/while" target="_blank">MDN 文档</a>。</p>

<p>举个栗子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">n</span><span class="o">++</span>
  <span class="nx">x</span> <span class="o">+=</span> <span class="nx">n</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<h4 id="for-循环">for 循环</h4>

<p>与其他大多数语言的 for 循环区别不大，但注意 let 和 var 有区别，详见下面的栗子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 使用 var
</span><span class="c1"></span><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
       <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
   <span class="p">}</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 输出 5 个 5，因为 setTimeout 表示过会儿再执行。
</span><span class="c1"></span>
<span class="c1">// 使用 let
</span><span class="c1"></span><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
       <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
   <span class="p">}</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 输出 0 1 2 3 4 5，因为 for 每一次循环都为 let 新建了一个作用域，他保留了每一次 i 的值
</span></code></pre></td></tr></table>
</div>
</div>
<h3 id="label">label</h3>

<p>比较复杂，留个坑，以后再填，需要注意的是：
<code>{ a:1 }</code> 这句话，不一定是表示一个对象，也可能表示 <strong>a 是一个 label，值为 1</strong>。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">浅析 URL</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-11-30-url/" />
            <id>http://hais-teatime.com/post/2019-11-30-url/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-11-30T17:16:17+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[本文将介绍万维网三大技术之一的 URL，其实是自己的一个小 FAQ（笑）。]]></summary>
            
                <content type="html"><![CDATA[<p>本文将介绍万维网三大技术之一的 URL，其实是自己的一个小 FAQ（笑）。</p>

<h2 id="url-和-uri">URL 和 URI？</h2>

<p>URL 实际上是 URI 的一个子集，除识别资源外还提供定位资源的方法。</p>

<p>下面是一个 URI 的组成：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">                    hierarchical part
        ┌───────────────────┴─────────────────────┐
                    authority               path
        ┌───────────────┴───────────────┐┌───┴────┐
  abc://username:password@example.com:123/path/data?key=value&amp;key2=value2#fragid1
  └┬┘   └───────┬───────┘ └────┬────┘ └┬┘           └─────────┬─────────┘ └──┬──┘
scheme  user information     host     port                  query         fragment

  urn:example:mammal:monotreme:echidna
  └┬┘ └──────────────┬───────────────┘
scheme              path</code></pre></td></tr></table>
</div>
</div>
<p>举一个我们常见的 URL（URI） 的例子：</p>

<p><a href="https://zh.wikipedia.org/w/index.php?title=Special:随机页面#5" target="_blank">https://zh.wikipedia.org/w/index.php?title=Special:随机页面#5</a></p>

<ol>
<li><code>https</code>：协议</li>
<li><code>zh.wikipedia.org</code>：域名</li>
<li><code>/w/index.php</code>：路径（不同的页面）</li>
<li><code>?title=Special:随机页面</code>：查询参数（相同页面，不同内容）</li>
<li><code>#5</code>：锚点（相同页面，相同内容，不同位置）</li>
<li>其中若不写端口号，则表示使用 https 对应的默认端口号 443</li>
</ol>

<h2 id="nslookup">nslookup？</h2>

<p>直接使用可以查询到域名的 A 记录。比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">nslookup hais-teatime.com</code></pre></td></tr></table>
</div>
</div>
<h2 id="顶级域名-二级域名">顶级域名？二级域名？</h2>

<p>比如对于 www.baidu.com</p>

<ul>
<li>顶级域名：com</li>
<li>二级域名：baidu.com</li>
<li>三级域名：www.baidu.com</li>
</ul>

<p>三级域名跟二级域名可以没关系，有可能都不是属于一家公司，注意辨别。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/url/" term="URL" label="URL" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">CSS 入门</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-11-30-css/" />
            <id>http://hais-teatime.com/post/2019-11-30-css/</id>
            <updated>2020-01-28T12:46:11+08:00</updated>
            <published>2019-11-30T14:47:37+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[随着网络的发展，人们开始对网页有了更多美学上的追求，希望网页能在提供基本的文字和图像信息的同时能够拥有美观、良好的排版，这也就促使 CSS（Cascading Style Sheets）不断发展，本文则将对现阶段所学 CSS 知识做一个简单的总结。]]></summary>
            
                <content type="html"><![CDATA[<p>随着网络的发展，人们开始对网页有了更多美学上的追求，希望网页能在提供基本的文字和图像信息的同时能够拥有美观、良好的排版，这也就促使 CSS（Cascading Style Sheets）不断发展，本文则将对现阶段所学 CSS 知识做一个简单的总结。</p>

<blockquote>
<p>大部分的内容是 <a href="http://jirengu.com" target="_blank">饥人谷</a> 方老师课上的讲的内容的总结，转载请注明。</p>
</blockquote>

<h2 id="基本概念">基本概念</h2>

<h3 id="文档流-normal-flow">文档流（Normal Flow）</h3>

<p>文档流的英文叫 <strong>Normal Flow</strong>，其实把它翻译成 <strong>正常布局流</strong> 更为合适。
当我们没有使用过任何 CSS 规则来改变元素的展现方式的时候，他们会按照正常的布局流来组织——也就是默认情况下的元素布局——这也就是我们所说的 <strong>Noraml Flow</strong>，即 <strong>文档流</strong> 。</p>

<p>我们可以修改元素的 <code>display</code> 属性，来为元素指定他的显示方式，通常我们可以将其值指定为 <code>inline</code> <code>block</code> 或 <code>inline-block</code>，下面将从 <strong>流动方向、宽度、高度</strong> 这三个方面来介绍 <code>display</code> 的三个值的不同特性。</p>

<h4 id="流动方向">流动方向</h4>

<ul>
<li><code>inline</code> 从左到右排列，行尾会截断成两行</li>
<li><code>block</code> 从上到下排列（每个占一行）</li>
<li><code>inline-block</code> 从左到右排列，行尾不会截断成两行</li>
</ul>

<h4 id="宽度">宽度</h4>

<ul>
<li><code>inline</code> 的宽度为里面所有 <code>inline</code> 元素之和，不接受指定 <code>width</code></li>
<li><code>block</code> 的宽度默认为 <code>auto</code>（这个值不是 100%），可以指定 <code>width</code>，<strong>但建议不要写 <code>width = 100%</code>，容易出 BUG</strong></li>
<li><code>inline-block</code> 的默认为里面所有 <code>inline</code> 元素之和，但接受指定 <code>width</code></li>
</ul>

<h4 id="高度">高度</h4>

<ul>
<li><code>inline</code> 的实际高度由行高（<code>line-height</code>）间接确定（与字体有关）；<code>padding</code> 只能改变看得见的高度（而不是实际高度）；如果没有内容，也有高度，其值为 <code>line-height</code>（具体内容可以参照方老师写的<a href="https://zhuanlan.zhihu.com/p/25808995?group_id=825729887779307520" target="_blank">这篇文章</a>）</li>
<li><code>block</code> 的高度由里面所有的 <strong>文档流元素</strong>（即还在 Normal Flow 的元素，下文会阐述什么情况下会 <a href="#脱离文档流">脱离文档流</a>）决定，也可以设置 <code>height</code>；如果没有内容，高度为 0</li>
<li><code>inline-block</code> 的高度由里面所有的 <strong>文档流元素</strong> 决定，也可以设置 <code>height</code></li>
</ul>

<h4 id="脱离文档流">脱离文档流</h4>

<p>目前有两种方式会使得元素脱离文档流，分别是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css">    <span class="nt">position</span><span class="o">:</span> <span class="nt">absolute</span> <span class="o">|</span> <span class="nt">fixed</span><span class="o">;</span>
    <span class="c">/* OR */</span>
    <span class="nt">float</span><span class="o">:</span> <span class="nt">left</span> <span class="o">|</span> <span class="nt">right</span><span class="o">;</span></code></pre></td></tr></table>
</div>
</div>
<h3 id="盒模型-box-model">盒模型（Box Model)</h3>

<p>事实上，我们可以把网页中显示的 HTML 元素看成是一个个盒子，盒子具有四层：</p>

<ul>
<li>内容（content）</li>
<li>内边距（padding）</li>
<li>边框（border）</li>
<li>外边距（margin）</li>
</ul>

<p>现在主要有两种盒模型，一种是 <code>content-box</code>，一种是 <code>border-box</code>。他们的主要区别在于：</p>

<ol>
<li>我们对 <strong>content-box</strong> 指定 <code>width</code> 或 <code>height</code> 时，说的是他的最里面的 <code>content</code> 的 宽或高；</li>
<li>而对 <strong>border-box</strong> 指定 <code>width</code> 或 <code>heihgt</code> 时，除了 <code>content</code> 的宽或高之外，还包括了 <code>padding</code> 和 <code>border</code> 的厚度。</li>
</ol>

<p>我们可以通过设定属性 <code>box-sizing: content-box | border-box</code>，来选择我们想使用的宽度计算方式。</p>

<h3 id="margin-合并"><code>margin</code> 合并</h3>

<p>是说我们上下两个元素若都有 margin，那么他们的 margin 将不会同时生效。有以下几个注意点：</p>

<ol>
<li>只有上下才会发生 <code>margin</code> 合并，左右不会发生</li>
<li>只有 <code>block</code> 会发生 <code>margin</code> 合并，<code>inline-block</code> 不会发生</li>
<li><code>first-child</code> 和 <code>last-child</code> 也会和 <code>parent</code> 发生 margin 合并</li>
</ol>

<p>取消 margin 合并的方法：</p>

<ol>
<li>使用 <code>overflow:hidden</code> 之后就不会再合并</li>
<li>使用 <code>display:flex</code> 之后就不会再合并</li>
<li>通过给 <code>parent</code> 上面加东西（<code>padding</code> <code>border</code> <code>overflow</code> 等）之后就不会再合并</li>
</ol>

<h3 id="浏览器的渲染过程">浏览器的渲染过程</h3>

<p>根据 <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction" target="_blank">Google 团队的文章</a>分析，我们可以将网页的渲染过程大致分为以下几步：</p>

<ol>
<li>根据 HTML 构建 HTML 树（DOM）</li>
<li>根据 CSS 构建 CSS 树（CSSOM）</li>
<li>将两棵树合并为渲染树（Render Tree）</li>
<li>布局 <strong>Layout</strong>（文档流、盒模型、计算大小和位置）</li>
<li>绘制 <strong>Paint</strong>（边框颜色、文字颜色、阴影）</li>
<li>合成 <strong>Compose</strong>（根据层叠关系展示画面）</li>
</ol>

<p><img src="/images/render-tree-construction.png" alt="Render Tree Construction" /></p>

<p>同时我们知道，如果用 JS 对网页中的元素进行修改的话，将会引起网页的重新渲染，这里有三种网页内容的更新方式：</p>

<ul>
<li>JS &gt; Style &gt; <strong>Layout &gt; Paint &gt; Composite</strong>：remove</li>
<li>JS &gt; Style &gt; <strong>Paint &gt; Composite</strong>：改变背景颜色</li>
<li>JS &gt; Style &gt; <strong>Composite</strong>：transform</li>
</ul>

<h2 id="css-布局">CSS 布局</h2>

<p>布局是 CSS 的最重要的用途之一，也是众多新人苦手的地方，现在就来总结一下三种常用布局以及在什么地方使用他们。</p>

<h3 id="应该如何选用哪种布局方式">应该如何选用哪种布局方式？</h3>

<p>根据方老师的工作经验总结，我们可以通过以下问题来进行分析：</p>

<ol>
<li>需要兼容 IE 9 吗？

<ul>
<li>需要，使用 <strong>float 布局</strong>；左浮两个，固定宽度，不要响应式；记得 <strong>clearfix</strong>，必要时采用负 margin</li>
<li>不需要，往下看</li>
</ul></li>
<li>只兼容最新的浏览器吗？

<ul>
<li>是，使用 <strong>grid 布局</strong></li>
<li>不是，使用 <strong>flex布局</strong>，必要时采用负 margin</li>
</ul></li>
</ol>

<h3 id="float-布局">float 布局</h3>

<p>float 布局其实很简单，我们只需要做两步就可以了：</p>

<ol>
<li>在子元素上加 <code>float: left</code> 和 <code>width</code></li>

<li><p>在父元素上加 <code>class=&quot;clearfix&quot;</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">.clearfix:after{
content: &#39;&#39;;
display: block;
clear: both;
}</code></pre></td></tr></table>
</div>
</div></li>
</ol>

<p>关于 float 布局也有一些经验：</p>

<ul>
<li>留一些空间或最后一个不设置 <code>width</code>（可以设置一个 <code>max-width</code>）</li>
<li>不需要考虑响应式，因为手机上没有 IE，这个布局是专门为 IE 准备的</li>
<li>在 IE 上有 BUG ：最左边浮动元素的 <code>margin-left</code> 会变成双倍

<ul>
<li>可以加一句兼容性写法：<code>_margin-left: ?px</code>;</li>
<li>也可以加上 <code>display: inline-block</code></li>
</ul></li>
<li>如果图片下面有空隙，加上 <code>vertical-align: middle | top</code> 就可以消除</li>
<li>float 元素外边距不合并</li>
</ul>

<h3 id="flex-布局">flex 布局</h3>

<p>我们可以通过 <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank">CSS Tricks</a> 的一个详细的教程来学习 flex 布局，下面还是做一下介绍以便后日复习。</p>

<h4 id="container">container</h4>

<ul>
<li>让一个元素变成 flex 容器：<code>display: flex | inline-flex</code></li>
<li>改变 itmes 的流动方向（主轴）：<code>flex-direction: row | row-reverse | colum | colum-reverse</code></li>
<li>改变折行：<code>flex-wrap: nowrap | wrap | wrap-revers</code></li>
<li>主轴的对齐方式：<code>justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly</code></li>
<li>次轴对齐：<code>align-items: flex-start | flex-end | center | stretch（默认）</code></li>
<li>多行对齐（基本不用）：<code>align-content: flex-start | flex-end | center | strech | space-between | space-around</code></li>
</ul>

<h4 id="items">items</h4>

<ul>
<li><code>order</code>：改变显示顺序</li>
<li><code>flex-grow</code>：控制自己如何长胖（占多余所有空间的权重），默认是 0（尽可能窄）

<ul>
<li>导航栏常用左边 logo 和右边用户头像都是 0，中间是 1</li>
</ul></li>
<li><code>flex-shrink</code>：控制如何变瘦，（在空间不够用的时候，压缩的比例）默认是 1（大家一起变小），可以写 0（防止变小）</li>
<li><code>flex-basis</code>：控制基准宽度，一般用得比较少，默认是 <code>auto</code>（跟宽度一样）</li>
<li>以上可以缩写为：<code>flex: grow shrink basis</code></li>
<li><code>align-self: flex-start | flex-end</code></li>
</ul>

<h4 id="经验">经验</h4>

<ul>
<li>永远不要把 <code>width</code> 和 <code>height</code> 写死</li>
<li>尽量使用 <code>min-width | max-width</code> 等来写</li>
<li><code>margin-xxx: auto</code>，有奇效，类似于 <code>between</code></li>
</ul>

<h3 id="grid-布局">grid 布局</h3>

<p>同样对于 grid 布局，我们也可以通过 <a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank">CSS Tricks</a> 来学习。</p>

<h4 id="container-1">container</h4>

<ul>
<li>让一个元素变成 grid 容器：<code>display: grid | inline-grid</code></li>
<li><code>grid-template-columns</code>: 每一列的宽度，可以写 <code>auto</code></li>
<li><code>grid-template-rows</code>: 每一行的高度，可以写 <code>auto</code></li>

<li><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">grid-template-areas:
&#34;header header header&#34;
&#34;aside main ad&#34;
&#34;footer footer&#34;</code></pre></td></tr></table>
</div>
</div></li>
</ul>

<h4 id="items-1">items</h4>

<p><img src="/images/grid.png" alt="grid" /></p>

<h2 id="定位">定位</h2>

<p>定位也是 CSS 比较难以理解的部分，主要是需要记忆的内容比较多，有时候容易搞晕，在这里我们主要需要关注的有两个知识点：一是 <code>positon</code> 属性，二是 <strong>层叠上下文（The Stacking Context）</strong>。</p>

<h3 id="position-属性"><code>position</code> 属性</h3>

<p><code>position</code> 主要可以取以下几个值：</p>

<ul>
<li><code>static</code>：默认值，当前元素在文档流中</li>
<li><code>relative</code>：距离自己原来的位置的偏离（<code>top | left</code>），<strong>还是占据原来的空间</strong>，可以用来：

<ul>
<li>做位移</li>
<li>做 <code>absolute</code> 元素的 <code>parent</code></li>
<li>配合 <code>z-index</code>，默认是 <code>auto</code>，<code>auto</code> 计算出来的值为 <code>0</code></li>
</ul></li>
<li><code>absolute</code>：脱离原来的位置，另起一层；会相对于祖先元素中最近的一个 <strong>定位元素</strong>（即非 <code>static</code> 元素） 来进行定位

<ul>
<li>某些浏览器如果不写 <code>top | left</code> 会引起混乱</li>
<li>善用 <code>left: 100%</code>，善用 <code>left: 50%</code> 加 <code>负 margin</code></li>
</ul></li>
<li><code>fixed</code>：相对于 <strong>视口</strong> 定位，但是如果放到具有 <code>transform</code> 属性的元素里面，会有问题

<ul>
<li>某些浏览器如果不写 <code>top | left</code> 会引起混乱</li>
<li>手机上尽量不要使用 fixed</li>
</ul></li>
<li><code>sticky</code>：兼容性很差</li>
</ul>

<h3 id="层叠上下文-the-stacking-context">层叠上下文（The Stacking Context）</h3>

<p><img src="/images/the-stacking-context.png" alt="The Stacking Context" /></p>

<blockquote>
<p>我们假定用户正面向（浏览器）视窗或网页，而 HTML 元素沿着其相对于用户的一条虚构的 z 轴排开，<strong>层叠上下文</strong> 就是对这些 HTML 元素的一个 <strong>三维构想</strong>。众 HTML 元素基于其元素属性 <strong>按照优先级顺序</strong> 占据这个空间。</p>
</blockquote>

<p>默认的元素的三维层叠顺序如上图所示，可以看到定位元素会超出原来的高度范畴，换句话说，<strong>原来的 background、border、块级子元素、浮动元素、内联子元素均处在 z-index = -1 ~ 0 这个区间之内</strong>。</p>

<p>每一个层叠上下文就好像一个小世界，只有这里面的 <code>z-index</code> 才能进行比较，具有不同 <code>z-index</code> 的父元素之中的子元素根本无法同台竞技。</p>

<p>这些常见的属性（或元素）可以创建一个层叠上下文：</p>

<ul>
<li><code>HTML</code>（根元素）</li>
<li><code>z-index</code> 值不为 <code>auto</code> 的 <code>relative | absolute</code> 元素</li>
<li><code>z-index</code> 值不为 <code>auto</code> 的 <code>flex</code> <code>grid</code> 子项</li>
<li><code>transform</code> 值不为 <code>none</code> 的元素</li>
<li><code>opacity</code> 值小于 <code>1</code> 的元素</li>
</ul>

<p>更多资料可以查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context" target="_blank">MDN 文档</a> 。</p>

<h2 id="动画">动画</h2>

<p>得益于 CSS 动画的帮助，我们的网页可以显得更加生动有趣，下面就我们常用的 CSS 动画的实现方式来进行简单的说明。</p>

<h3 id="变型-transform">变型 <code>transform</code></h3>

<p>值得注意的是，我们可以通过使用 JS 直接通过改变 CSS 样式（比如 <code>left: 50px</code>）来修改元素的大小、位置、方向等，但是这种效率非常低，网页需要不停地 <strong>repaint</strong>，而如果通过 <code>transform</code> 属性来进行修改，则不会 <strong>repaint</strong> 那么多次，将会大幅提高网页的流畅度。——整个浏览器的渲染过程我们已经在 <a href="#浏览器的渲染过程">前面</a> 讲过了。</p>

<p><code>transform</code> 属性可以取以下值:</p>

<ul>
<li>位移 translate：<code>translateX(50px) | translateY(50%) | translateZ(50px) | translate(50px, 50px)</code></li>
<li>视点的确定（在父元素上）：<code>perspective: 1000px</code>，表示父元素的中心为坐标原点，距离屏幕为 <code>1000px</code></li>
<li>缩放 scale：<code>scaleX(&lt;number&gt;) | scaleY(&lt;number&gt;) | scale(&lt;number&gt;, &lt;number&gt;?)</code>，<code>border</code> 也会一起变</li>
<li>旋转 rotate：<code>rotate([&lt;angle&gt;|&lt;zero&gt;]) | rotateZ([&lt;angle&gt;|&lt;zero&gt;]) | rotateX([&lt;angle&gt;|&lt;zero&gt;])</code>，一般用来做360度旋转的 loading 或者按钮的交互</li>
<li>扭曲 skew：<code>skewX(&lt;angle&gt;|&lt;zero&gt;) | skewY(&lt;angle&gt;|&lt;zero&gt;) | skew(&lt;angle&gt;|&lt;zero&gt;, &lt;angle&gt;|&lt;zero&gt;?)</code></li>
</ul>

<p>使用 <code>transform: none</code> 可以取消所有变化</p>

<p>此外，我们可以用 <code>top: 50%; left: 50%; transform(-50%, -50%)</code> 做绝对定位的居中</p>

<p><strong>然而， transform 只是静态的变型，而要实现动画，我们还需要使用下面介绍的 transition 或者 animation</strong></p>

<h3 id="过渡-transition">过渡 <code>transition</code></h3>

<p><code>transition</code> 可以合在一起这样写：</p>

<p><code>属性名(可以写all)</code> <code>时长</code> <code>过渡方式( linear | ease | ease-in | ease-in-out | cubic-bezier | step-start | step-end | steps )</code> <code>延迟</code></p>

<p>比如：</p>

<p><code>transition: width 2s linear 3s</code></p>

<p><strong>但请注意，不是所有属性都有过渡，比如：</strong></p>

<p><code>display: none =&gt; block</code></p>

<p>一般改成</p>

<p><code>visibility: hidden =&gt; visible</code></p>

<h3 id="动画-animation">动画 animation</h3>

<p><code>animation</code> 可以合在一起这样写：</p>

<p><code>时长</code> <code>过渡方式</code> <code>延迟</code> <code>次数( infinite )</code> <code>方向( reverse | alternate | alternate-reverse )</code> <code>填充模式( none | forwards | backwards | both)</code> <code>是否暂停(paused)</code> <code>自定义的动画名</code></p>

<p>在使用 animation 之前，我们需要先制作一个动画（添加关键帧），比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">@</span><span class="k">keyframes</span> <span class="nt">自定义的动画名</span> <span class="p">{</span>
    <span class="nt">0</span><span class="o">%</span> <span class="p">{</span>
        <span class="k">transform</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nt">66</span><span class="p">.</span><span class="nc">66</span><span class="o">%</span> <span class="p">{</span>
        <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">200</span><span class="kt">px</span><span class="p">)</span>
    <span class="p">}</span><span class="p">}</span></code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/css/" term="CSS" label="CSS" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">HTML 入门与重难点标签</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-11-28-html/" />
            <id>http://hais-teatime.com/post/2019-11-28-html/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-11-28T17:22:28+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[近四十年前，万维网（WWW）最初的构想于世界上诞生，现在已经融入了人们的日常生活之中，甚至可以说已然成为现代文明的重要组成部分。
将网址输入浏览器，回车得到想要的页面；亦或是点击一个链接，就可以看到想要的内容——理所当然，易如反掌，这就是我们所说的万维网。
这万维网之中，有三个核心技术：URI、HTTP 与 HTML，本文则将简单对其中的 HTML 及其部分重点标签进行介绍，作为笔记。]]></summary>
            
                <content type="html"><![CDATA[<p>近四十年前，万维网（WWW）最初的构想于世界上诞生，现在已经融入了人们的日常生活之中，甚至可以说已然成为现代文明的重要组成部分。</p>

<p>将网址输入浏览器，回车得到想要的页面；亦或是点击一个链接，就可以看到想要的内容——理所当然，易如反掌，这就是我们所说的万维网。</p>

<p>这万维网之中，有三个核心技术：URI、HTTP 与 HTML，本文则将简单对其中的 HTML 及其部分重点标签进行介绍，作为笔记。</p>

<h2 id="html-的历史">HTML 的历史</h2>

<p>1989年，李爵士（Berners-Lee）在一份备忘录中提出一个基于互联网的超文本系统；
1991年，李爵士公开了名为 HTML Tags 的文章中，在这篇文章中，他设计了18个元素（如今最新的 HTML 大概有110个标签），至此，HTML (HyperText Markup Language) 宣告诞生。
目前我们所使用的 HTML 5 于2014年10月28日作为 W3C 推荐标准发布。</p>

<h2 id="html-起手式">HTML 起手式</h2>

<p>用 <code>Emmet</code> 所提供的速写法可以很快地写出你在写 <code>HTML</code> 所需要写的一个骨架。
你只需要在安装了插件的编辑器（某些编辑器默认具有此功能）中输入 <code>!</code> 再敲击 <code>Tab</code>，便可以很方便地输入以下内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span> <span class="c">&lt;!--</span><span class="c"> 表示文档类型是 HTML 5 </span><span class="c">--&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p"></span><span class="p">&gt;</span> <span class="c">&lt;!--</span><span class="c"> html 标签，可以在这里设置语言，比如 lang=&#34;zh</span><span class="c">-</span><span class="c">CN&#34; </span><span class="c">--&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p"></span><span class="p">&gt;</span>  <span class="c">&lt;!--</span><span class="c"> 这里的东西不会显示到页面上 </span><span class="c">--&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p"></span><span class="p">&gt;</span>  <span class="c">&lt;!--</span><span class="c"> 文件的字符编码 </span><span class="c">--&gt;</span>
    <span class="c">&lt;!--</span><span class="c"> 设置视口大小为设备宽度（以兼容手机），并设置初始缩放为 1.0 并禁用缩放 </span><span class="c">--&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&#34;</span><span class="p"></span><span class="p">&gt;</span> 
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p"></span><span class="p">&gt;</span> <span class="c">&lt;!--</span><span class="c"> 让 IE 浏览器使用最新的内核 </span><span class="c">--&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p"></span><span class="p">&gt;</span>Document<span class="p">&lt;</span><span class="p">/</span><span class="nt">title</span><span class="p">&gt;</span> <span class="c">&lt;!--</span><span class="c"> 标题 </span><span class="c">--&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">head</span><span class="p">&gt;</span> 
<span class="p">&lt;</span><span class="nt">body</span><span class="p"></span><span class="p">&gt;</span> <span class="c">&lt;!--</span><span class="c"> 内容 </span><span class="c">--&gt;</span>
    
<span class="p">&lt;</span><span class="p">/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">html</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<h2 id="常用标签">常用标签</h2>

<h3 id="常用的表示章节的标签">常用的表示章节的标签</h3>

<p>在 HTML 5 强化语义之后，增加了一些表示章节的标签，通过对这些标签的合理使用，我们可以更好地优化页面的结构，与此同时也为盲人同胞提供了方便。
目前我们常用的标签有：</p>

<ul>
<li>标题 <code>&lt;h1&gt;</code>~<code>&lt;h6&gt;</code></li>
<li>章节 <code>&lt;section&gt;</code></li>
<li>文章 <code>&lt;article&gt;</code></li>
<li>段落 <code>&lt;p&gt;</code></li>
<li>头部 <code>&lt;header&gt;</code></li>
<li>脚部 <code>&lt;footer&gt;</code></li>
<li>主要内容 <code>&lt;main&gt;</code></li>
<li>旁支内容 <code>&lt;aside&gt;</code></li>
<li>划分 <code>&lt;div&gt;</code></li>
</ul>

<h3 id="常用的内容标签">常用的内容标签</h3>

<ul>
<li>有序列表 <code>&lt;ol&gt;</code> + <code>&lt;li&gt;</code></li>
<li>无序列表 <code>&lt;ul&gt;</code> + <code>&lt;li&gt;</code></li>
<li>描述 <code>&lt;dl&gt;</code> + <code>&lt;dt&gt;</code> + <code>&lt;dd&gt;</code>，其中 <code>&lt;dt&gt;</code> 表示描述词，<code>&lt;dd&gt;</code> 表示描述的内容（ <code>Emmet</code> 速写: <code>dl+</code>）</li>
<li>保留空格的段落 <code>&lt;pre&gt;</code></li>
<li>分割线 <code>&lt;hr&gt;</code></li>
<li>换行 <code>&lt;br&gt;</code></li>
<li>定位符、超链接 <code>&lt;a&gt;</code></li>
<li>语气的强调 <code>&lt;em&gt;</code></li>
<li>本质的强调 <code>&lt;strong&gt;</code></li>
<li>代码 <code>&lt;code&gt;</code>，默认是内联元素，可以用 <code>&lt;pre&gt;</code> 包住 <code>&lt;code&gt;</code></li>
<li>引用 <code>&lt;quote&gt;</code></li>
<li>块级引用 <code>&lt;blockquote&gt;</code></li>
</ul>

<h2 id="全局属性">全局属性</h2>

<ul>
<li><code>class</code> 类</li>
<li><code>contenteditable</code> 用户可以直接编辑页面上的东西</li>
<li><code>hidden</code> 隐藏</li>
<li><code>id</code> 标记</li>
<li><code>style</code> 样式</li>
<li><code>tabindex</code> 控制 <code>Tab键</code> 激活元素的顺序，<code>tabindex=0</code> 是最后一个，<code>tabindex=-1</code> 代表永远不会访问</li>
<li><code>title</code> 鼠标悬浮显示的内容</li>
</ul>

<h2 id="重点标签">重点标签</h2>

<h3 id="a-标签"><code>&lt;a&gt;</code> 标签</h3>

<h4 id="href-属性"><code>href</code> 属性</h4>

<ul>
<li>网址

<ul>
<li><code>http://google.com</code></li>
<li><code>https://google.com</code></li>
<li><code>//google.com</code> 无协议网址</li>
</ul></li>
<li>路径

<ul>
<li><code>/a/b/c</code> 绝对路径，但是是基于 <strong>HTTP 服务</strong> 开启的根目录，不是整个计算机的根目录</li>
<li><code>a/b/c</code> 相对路径，基于当前路径的目录</li>
<li><code>index.html</code> 当前目录的文件</li>
<li><code>./index.html</code> 当前目录的文件</li>
</ul></li>
<li><code>#id</code></li>
<li>伪协议

<ul>
<li><code>javascript:alert(1);</code></li>
<li><code>javasrcript:;</code> 可以写一个什么都不做的a标签</li>
<li><code>mailto:xxx@xxx.com</code> 会呼出邮件客户端</li>
<li><code>tel:1300000000</code> 会呼出拨号界面</li>
</ul></li>
</ul>

<h4 id="target-属性"><code>target</code> 属性</h4>

<ul>
<li>内置名字

<ul>
<li><code>_blank</code> 新标签</li>
<li><code>_top</code> 在最顶层打开（比如 <code>iframe</code> 的最外层页面）</li>
<li><code>_parent</code> 在父级窗口打开，没有 <code>_top</code> 那么高层</li>
<li><code>_self</code> 在当前页面打开（比如 <code>iframe</code> 的当前层）</li>
</ul></li>
<li>其他自定义的新窗口的名字或者 <code>iframe</code> 的名字</li>
</ul>

<h4 id="download-属性"><code>download</code> 属性</h4>

<p>下载，而不是查看网页，但是大部分都不支持</p>

<h3 id="iframe-标签"><code>iframe</code> 标签</h3>

<p>内嵌窗口，但是现在大都不用了</p>

<h3 id="table-标签"><code>&lt;table&gt;</code> 标签</h3>

<p>里面必须写<code>&lt;thead&gt;</code> <code>&lt;tbody&gt;</code> <code>&lt;tfoot&gt;</code>，否则浏览器也会自己加上，并且显示的顺序与实际写的这三个顺序无关，浏览器一定是按照<code>&lt;thead&gt;</code> <code>&lt;tbody&gt;</code> <code>&lt;tfoot&gt;</code>的顺序显示</p>

<p>相关的样式有：</p>

<ul>
<li><code>table-layout</code>

<ul>
<li><code>auto</code> 按照内容的多少来分配宽度权重</li>
<li><code>fixed</code> 等宽</li>
</ul></li>
<li><code>border-collapse: collapse</code> 表示两个单元格的边线合并</li>
<li><code>border-spacing</code> 两个单元格中间的空隙</li>
</ul>

<h3 id="img-标签"><code>&lt;img&gt;</code> 标签</h3>

<p>发出一个GET请求，展示一张图片</p>

<h4 id="src-属性"><code>src</code> 属性</h4>

<p>可以是相对路径，也可以是绝对路径</p>

<h4 id="alt-属性"><code>alt</code> 属性</h4>

<p>图片加载失败的时候显示的内容</p>

<h4 id="height-和-width-属性"><code>height</code> 和 <code>width</code> 属性</h4>

<p>若只写高度或宽度，图像比例保持不变</p>

<h4 id="事件">事件</h4>

<ul>
<li><code>onload</code>图片加载成功</li>
<li><code>onerror</code> 图片加载失败</li>
</ul>

<h4 id="响应式">响应式</h4>

<p><code>max-width: 100%</code></p>

<h3 id="form-标签"><code>&lt;form&gt;</code> 标签</h3>

<p>发出一个GET或POST请求，然后刷新页面</p>

<h4 id="action-属性"><code>action</code> 属性</h4>

<p>请求到哪个页面</p>

<h4 id="method-属性"><code>method</code> 属性</h4>

<h4 id="autocomplete-属性"><code>autocomplete</code> 属性</h4>

<p>为 <code>on</code> 则打开自动填充，下面的 <code>text</code> 要写 <code>name</code></p>

<h4 id="target-属性-1"><code>target</code> 属性</h4>

<p>把哪个页面（ 值可以为 <code>_blank</code> 等等）变成要请求到的那个页面（也就是说哪个页面需要刷新）</p>

<blockquote>
<p><code>&lt;input type=&quot;submit&quot;&gt;</code> 和 <code>&lt;button type=&quot;submit&quot;&gt;</code> 的区别？</p>

<ul>
<li>input里面不能再有标签（但是文字可以用 <code>value=&quot;&quot;</code> 进行更改）</li>
<li>button里面可以有任何东西（包括图片等其他标签）</li>
</ul>
</blockquote>

<h4 id="注意事项">注意事项</h4>

<ul>
<li>一般不监听 <code>input</code> 的 <code>click</code> 事件</li>
<li><code>form</code> 里面的 <code>input</code> 要有 <code>name</code></li>
<li>一个 <code>form</code> 必须要有一个 <code>type=&quot;submit&quot;</code>，如果 <code>button</code> 不写 <code>type</code>，默认为 <code>submit</code></li>
</ul>

<h3 id="input-标签"><code>&lt;input&gt;</code> 标签</h3>

<h4 id="type-属性"><code>type</code> 属性</h4>

<ul>
<li><code>text</code></li>
<li><code>color</code></li>
<li><code>password</code></li>
<li><code>radio</code> 所有的 <code>input</code> 要有同一个 <code>name</code></li>
<li><code>checkbox</code> 所有的 <code>input</code> 要有同一个 <code>name</code></li>
<li><code>file</code> 加上 <code>multiple</code> 属性可以同时选多个文件</li>
<li><code>hidden</code></li>
<li><code>tel</code></li>
<li><code>email</code></li>
<li><code>search</code></li>
</ul>

<h4 id="事件-1">事件</h4>

<ul>
<li><code>onchange</code></li>
<li><code>onfocus</code></li>
<li><code>onblur</code></li>
</ul>

<h3 id="textarea-标签"><code>&lt;textarea&gt;</code> 标签</h3>

<ul>
<li><code>style=&quot;resize: none&quot;</code> 让右下角不能拖动</li>
</ul>

<h3 id="select-标签"><code>&lt;select&gt;</code> 标签</h3>

<ul>
<li><code>&lt;option value=&quot;1&quot;&gt;星期一&lt;/option&gt;</code></li>
</ul>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/html/" term="HTML" label="HTML" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">使用 Hugo 搭建个人博客</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-11-24-hugo/" />
            <id>http://hais-teatime.com/post/2019-11-24-hugo/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-11-24T15:17:20+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[作为一名前端开发者，平时可能会经常需要用到个人博客来记录学到的新知识来进行消化和方便后续的回顾，在这里就介绍一下如何使用 Hugo 这个工具来快速搭建一个模板化的、维护起来较为简单的个人博客。当然，在这里我们还需要使用到 GitHub Pages。]]></summary>
            
                <content type="html"><![CDATA[<p>作为一名前端开发者，平时可能会经常需要用到个人博客来记录学到的新知识来进行消化和方便后续的回顾，在这里就介绍一下如何使用 Hugo 这个工具来快速搭建一个模板化的、维护起来较为简单的个人博客。当然，在这里我们还需要使用到 GitHub Pages。</p>

<h2 id="github-pages">GitHub Pages</h2>

<p>首先我们可能需要了解一下什么是 <a href="https://pages.github.com/" target="_blank">GitHub Pages</a> ：</p>

<blockquote>
<p>GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，通过构建过程运行文件，然后发布网站。</p>
</blockquote>

<p>也就是说通过 GitHub 的这项服务，我们可以通过这样的方式来展示自己的 <strong>个人主页</strong>（*这里只讨论个人主页，当然他也可以用来托管组织或项目页面），他的域名是 <code>http(s)://&lt;username&gt;.github.io</code>：</p>

<ol>
<li><strong>Create</strong>: 在 GitHub 中创建一个名为 <code>&lt;username&gt;.github.io</code> 的仓库</li>
<li><strong>Clone</strong>: 把这个仓库拷贝到本地</li>
<li><strong>Edit</strong>: 在仓库中创建 <code>index.html</code> 等你所有想要的可以用来构建网站的文件</li>
<li><strong>Push</strong>: 将这个本地仓库 <code>Push</code> 到 GitHub 中</li>
<li><strong>Success</strong>：打开 <code>&lt;username&gt;.github.io</code> 即可访问</li>
</ol>

<h2 id="hugo">Hugo</h2>

<p>简单来说， Hugo 是一个由 GO 语言实现的静态网站生成器，我们可以把 Hugo 生成的页面部署到 GitHub Pages 服务中。</p>

<p>我们可以参照 Hugo 的 <a href="https://gohugo.io/" target="_blank">官方文档</a> 来指导我们操作。</p>

<h3 id="第一步-安装-hugo">第一步：安装 Hugo</h3>

<p>这里以 Windows 版本为例，其他操作系统的安装方法可以参照官方文档。</p>

<ol>
<li><a href="https://github.com/gohugoio/hugo/releases" target="_blank">点击链接</a> ，下载对应的压缩文件，比如 hugo_0.59.1_Windows-64bit.zip</li>
<li>解压缩，将 hugo.exe 文件放到一个安全的目录下（最好不要有空格），比如 <code>C:\Software\hugo\</code> 中</li>
<li><code>此电脑</code> - 右键 - <code>属性</code> - <code>高级系统设置</code> - <code>高级</code> - <code>环境变量</code> - 双击 <code>PATH</code> - 将 <code>C:\Software\hugo\</code> 添加进去</li>
</ol>

<h3 id="第二步-创建一个网页-生成器">第二步：创建一个网页（生成器）</h3>

<p>打开命令行，在喜欢的地方执行:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">hugo new site &lt;username&gt;.github.io-creator</code></pre></td></tr></table>
</div>
</div>
<p>上面的 <code>&lt;username&gt;.github.io-creator</code> 可以根据自己的需要进行更改，这一步是相当于创建了一个 Hugo 网页生成器</p>

<h3 id="第三步-添加默认主题">第三步：添加默认主题</h3>

<p>执行命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">git init
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
cd &lt;username&gt;.github.io-creator
echo &#39;theme = &#34;ananke&#34;&#39; &gt;&gt; config.toml</code></pre></td></tr></table>
</div>
</div>
<h3 id="第四步-添加文章">第四步：添加文章</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">hugo new posts/我的第一篇文章.md</code></pre></td></tr></table>
</div>
</div>
<h3 id="第五步-修改文章">第五步：修改文章</h3>

<p>将会打开这样的一个 <code>markdown</code> 文件，在下面编辑好了之后，将 <code>draft</code> 改为 <code>false</code> 然后保存。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">---
title: &#34;我的第一篇文章&#34;
date: 2019-03-26T08:47:11+01:00
draft: true
---
# 大家好！

这是我的第一篇文章</code></pre></td></tr></table>
</div>
</div>
<h3 id="第六步-修改配置">第六步：修改配置</h3>

<p>打开 <code>config.toml</code>，将会出现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">baseURL = &#34;https://example.org/&#34;
languageCode = &#34;en-us&#34;
title = &#34;My New Hugo Site&#34;
theme = &#34;ananke&#34;</code></pre></td></tr></table>
</div>
</div>
<p>将其中的语言改为 <code>zh-Hans</code>，标题改为自己喜欢的标题即可</p>

<h3 id="第六步-运行-hugo-server">第六步：运行 Hugo Server</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">hugo server -D</code></pre></td></tr></table>
</div>
</div>
<p>他会提示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">                   | EN
+------------------+----+
  Pages            | 10
  Paginator pages  |  0
  Non-page files   |  0
  Static files     |  3
  Processed images |  0
  Aliases          |  1
  Sitemaps         |  1
  Cleaned          |  0

Total in 11 ms
Watching for changes in /Users/bep/quickstart/{content,data,layouts,static,themes}
Watching for config changes in /Users/bep/quickstart/config.toml
Environment: &#34;development&#34;
Serving pages from memory
Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender
Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
Press Ctrl+C to stop</code></pre></td></tr></table>
</div>
</div>
<p>这样整个博客就将会被部署到本地服务器 <code>http://localhost:1313/</code> 上面了</p>

<h3 id="第七步-发布到-public">第七步：发布到 Public</h3>

<p>执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">hugo -D</code></pre></td></tr></table>
</div>
</div>
<p>hugo 就会创建一个新的目录，叫做 Public ，接下来我们要做三件事：</p>

<ol>
<li>在 <code>&lt;username&gt;.github.io-creator</code> 里面创建 <code>.gitignore</code> 文件，在里面添加 <code>/public/</code></li>
<li>打开 <code>public</code> 目录，将 <code>public</code> 目录单独上传到 GitHub 中名为 <code>&lt;username&gt;.github.io</code> 中</li>
<li>打开 <code>http://&lt;username&gt;.github.io</code> 就可以看到自己的博客啦</li>
</ol>

<p><em>注意 GitHub Pages 服务会默认将 <code>&lt;username&gt;.github.io</code> 仓库中的 <code>Master</code> 分支里的内容放到页面上，GitHub Pages 相关的设置可以在仓库的 Settings 中的 GitHub Pages 里找到</em></p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/html/" term="HTML" label="HTML" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%8D%9A%E5%AE%A2/" term="博客" label="博客" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">开博大吉</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-11-22-new/" />
            <id>http://hais-teatime.com/post/2019-11-22-new/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-11-22T17:55:49+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html"><![CDATA[大家好 这是我的第一篇博客，希望以后能写出好文章哦]]></summary>
            
                <content type="html"><![CDATA[

<h1 id="大家好">大家好</h1>

<p>这是我的第一篇博客，希望以后能写出好文章哦</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%8D%9A%E5%AE%A2/" term="博客" label="博客" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
</feed>