<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">Hai&#39;s Teatime</title>
    <subtitle type="html">我的第一个博客，记录了一些学习随笔。</subtitle>
    <updated>2020-02-21T10:13:25+08:00</updated>
    <id>http://hais-teatime.com/</id>
    <link rel="alternate" type="text/html" href="http://hais-teatime.com/" />
    <link rel="self" type="application/atom+xml" href="http://hais-teatime.com/atom.xml" />
    <author>
            <name>Harvey Zhang</name>
            <uri>http://hais-teatime.com/</uri>
            
                <email>Hyuain97@163.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.63.2">Hugo</generator>
        <entry>
            <title type="text">小项目：番茄闹钟 - Potado</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2020-01-30-potado/" />
            <id>http://hais-teatime.com/post/2020-01-30-potado/</id>
            <updated>2020-02-12T09:35:53+08:00</updated>
            <published>2020-02-07T10:53:19+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[初学 React 和 TypeScript，尝试做了一个简单的番茄闹钟，可以在点这里 在线预览，也可以进 代码仓库 去看看。]]></summary>
            
                <content type="html"><![CDATA[<p>初学 React 和 TypeScript，尝试做了一个简单的番茄闹钟，可以在点这里 <a href="https://hais-teatime.com/potado/" target="_blank">在线预览</a>，也可以进 <a href="https://github.com/Hyuain/hais-ui" target="_blank">代码仓库</a> 去看看。</p>

<h1 id="项目介绍">项目介绍</h1>

<p>本项目是一个简单的番茄你闹钟，分为番茄和任务两部分：在番茄部分可以定义一个番茄闹钟，并查阅番茄历史；在任务部分可以自己新建任务并查看任务历史，此外具有登录和注册功能，可以同步番茄信息，在 PC 端和移动端均具有良好的适配性。</p>

<p>本项目是一个基于 React 的简单单页应用，并且使用 TypeScript 进行书写，使用 axios 发送请求、React-Router 来进行页面跳转、Redux 管理任务信息。</p>

<h1 id="登录与注册页面及页面跳转">登录与注册页面及页面跳转</h1>

<p>和 Vue 比较类似，我们要在 <code>App.tsx</code> 中使用 React Router：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">import {
  HashRouter,
  Switch,
  Route
} from &#39;react-router-dom&#39;;

export default function App() {
  return (
    &lt;HashRouter&gt;
      &lt;Switch&gt;
        &lt;Route path=&#39;/login&#39;&gt;
          &lt;Login/&gt;
        &lt;/Route&gt;
        &lt;Route path=&#39;/register&#39;&gt;
          &lt;Register/&gt;
        &lt;/Route&gt;
        &lt;Route path=&#39;/&#39;&gt;
          &lt;Home/&gt;
        &lt;/Route&gt;
      &lt;/Switch&gt;
    &lt;/HashRouter&gt;
  );
}</code></pre></td></tr></table>
</div>
</div>
<p>本来我最开始是按照官方文档写的 <code>Router</code>，折腾了半天搞好了发布到 GH-Pages 之后发现页面并不能像我想象的那样跳转，都跳到 <code>/hais-teatime.com/login/</code> 去了，跟我预期的 <code>/hais-teatime.com/potado/login/</code> 不同。
因为我也是刚开始用 Router，并没有对 <code>HashRouter</code> 和 <code>BrowserRouter</code> 理解得很好（之后有空我会专门写一篇文章来看看这个 React Router），然后我突然想起来我以前用 <code>vue-cli</code> 创建项目的时候，选择 <code>Vue-Router</code> 之后他会问我用哪种模式，其中他说有一种模式需要服务器端设置好，我一般当然就选择的是不需要服务器端设置的，后来 Google 发现这种就叫哈希路由。于是我想是不是这个 React 也需要使用哈希路由，于是就在文档中按照对应的设置好。</p>

<p>另外还有几个问题，一是在组件中如何来进行跳转，以达到 Vue 的 <code>Link</code> 或者 <code>push</code> 的效果？这里我采用了 <code>useHistory</code> 这个 Hook：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">import {Link, useHistory} from &#39;react-router-dom&#39;;
export default function() {
  let history = useHistory();
  // 登录成功之后跳转到主页
  const onLogin = async () =&gt; {
    try {
      // await ... 发送请求
      history.push(&#39;/&#39;) 
    } catch (e) {
      //...
    }
  };
  return (
    &lt;div&gt;
      &lt;button onClick={onLogin}&gt;登录&lt;/button&gt;
      &lt;p&gt;如果还没有账号，请&lt;Link to=&#39;/register&#39;&gt;点击这里注册&lt;/Link&gt;&lt;/p&gt;
    &lt;/div&gt;
  )
}</code></pre></td></tr></table>
</div>
</div>
<p>二是如何在组件外进行跳转，我发现需要借助 <code>history</code> 这个库，而且还有点麻烦：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-typescript" data-lang="typescript"><span class="c1">// history.ts
</span><span class="c1"></span><span class="kr">import</span> <span class="p">{</span><span class="nx">createHashHistory</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;history&#39;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">history</span> <span class="o">=</span> <span class="nx">createHashHistory</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="nx">history</span><span class="p">;</span>

<span class="c1">// axios.ts
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">history</span> <span class="nx">from</span> <span class="s1">&#39;./history&#39;</span><span class="p">;</span>

<span class="c1">// 发现未登录时跳转到登录页
</span><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="p">.</span><span class="p">.</span><span class="p">.</span><span class="p">)</span><span class="p">{</span>
  <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<h1 id="主页">主页</h1>

<p>主页最主要的任务有以下两个：</p>

<ol>
<li>从服务器获取并初始化数据</li>
<li>整体布局</li>
</ol>

<p>其中需要获取的数据包括用户数据、todos 和 tomatoes 这三部分，todos 和 tomatoes 获取之后需要使用 Redux 存到 Store 中，方便其他组件使用。</p>

<h2 id="redux">Redux</h2>

<p>由于有实际上我们有 todos 和 tomatoes 两个模块，所以我们可能需要按照下面的方式来使用 Redux：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-text" data-lang="text"> redux
 ├── actions
 │   ├── index.ts
 │   ├── todos.ts
 │   └── tomatoes.ts
 ├── reducers
 │   ├── index.ts
 │   ├── todos.ts
 │   └── tomatoes.ts
 ├── actionTypes.ts
 ├── selectors.ts
 └── store.ts</code></pre></td></tr></table>
</div>
</div>
<p>action 主要是用来抽象行为，并且触发一个 reducer；reducer 则是处理不同 action 的 state；store 则可以理解为 state 的容器。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-typescript" data-lang="typescript"><span class="c1">// actions/index.ts 用来汇总 actions
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">todos</span> <span class="nx">from</span> <span class="s1">&#39;./todos&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">tomatoes</span> <span class="nx">from</span> <span class="s1">&#39;./tomatoes&#39;</span><span class="p">;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="p">.</span><span class="p">.</span><span class="p">.</span><span class="nx">todos</span><span class="p">,</span>
  <span class="p">.</span><span class="p">.</span><span class="p">.</span><span class="nx">tomatoes</span>
<span class="p">}</span><span class="p">;</span>

<span class="c1">// actions/todos.ts 里面是 todos 的 actions
</span><span class="c1"></span><span class="kr">import</span> <span class="p">{</span><span class="nx">INIT_TODOS</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../actionTypes&#39;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">initTodos</span> <span class="o">=</span> <span class="p">(</span><span class="nx">payload</span>: <span class="kt">any</span><span class="p">[</span><span class="p">]</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">type</span>: <span class="kt">INIT_TODOS</span><span class="p">,</span>
    <span class="nx">payload</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-typescript" data-lang="typescript"><span class="c1">// reducers/index.ts 用来汇总 reducers
</span><span class="c1"></span><span class="kr">import</span> <span class="p">{</span><span class="nx">combineReducers</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">todos</span> <span class="nx">from</span> <span class="s1">&#39;./todos&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">tomatoes</span> <span class="nx">from</span> <span class="s1">&#39;./tomatoes&#39;</span><span class="p">;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="nx">combineReducers</span><span class="p">(</span><span class="p">{</span><span class="nx">todos</span><span class="p">,</span> <span class="nx">tomatoes</span><span class="p">}</span><span class="p">)</span>

<span class="c1">// reducers/todos.ts 里面是 todos 的 reducers
</span><span class="c1"></span><span class="kr">import</span> <span class="p">{</span><span class="nx">INIT_TODOS</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../actionTypes&#39;</span><span class="p">;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">state</span>: <span class="kt">any</span><span class="p">[</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="p">]</span><span class="p">,</span> <span class="nx">action</span>: <span class="kt">any</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">INIT_TODOS</span>:
      <span class="kt">return</span> <span class="p">[</span><span class="p">.</span><span class="p">.</span><span class="p">.</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">]</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-typescript" data-lang="typescript"><span class="c1">// store.ts 创建 store
</span><span class="c1"></span><span class="kr">import</span> <span class="p">{</span><span class="nx">createStore</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">rootReducer</span> <span class="nx">from</span> <span class="s1">&#39;./reducers&#39;</span>
<span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">rootReducer</span><span class="p">)</span><span class="p">;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="nx">store</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div>
<p>在 Home 中，我们需要获取三块数据：用户信息、todos、tomatoes，我们可以借助 React Hooks 中的 <code>useEffect</code> 来进行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">const Home = (props: IHomeProps) =&gt; {
  React.useEffect(() =&gt; {
    // const getMe = ...
    // const getTomatoes = ...
    const getTodos = async () =&gt; {
      try {
        // 获取数据
        const response = await axios.get(&#39;todos&#39;);
        // 在 Redux 中初始化数据
        props.initTodos(todos);
      } catch (e) {
        // ...
      }
   } 
  })
  // return ... 
};
// 经过下面的代码，props 中就可访问到 state 和 actions 了
const mapStateToProps = (state: any, ownProps: any) =&gt; ({
  ...ownProps
});
const mapDispatchToProps = {
  initTodos: actions.initTodos,
  initTomatoes: actions.initTomatoes
};
export default connect(mapStateToProps, mapDispatchToProps)(Home);</code></pre></td></tr></table>
</div>
</div>
<p>这样我们就完成了从服务器获取所有 todos 的数据，然后装到 store 中的操作。</p>

<h1 id="任务列表-todos">任务列表 Todos</h1>

<p>Todos 的主要功能有两个：</p>

<ol>
<li>添加新任务</li>
<li>展示未完成的任务，并可以进行编辑</li>
</ol>

<p>因此 Todos 主要由 TodosInput 和 TodoItem 这两个构成，整体结构如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-text" data-lang="text"> Todos
 ├── TodoInput
 └── TodoList
     ├── TodoItem
     ├── TodoItem
     └── ...</code></pre></td></tr></table>
</div>
</div>
<p>我们之前就已经在主页中获取到了 todos 的全部数据，但是 TodoItem 需要展示的是未完成的 todos，为了方便今后使用，同时也要保证 reducer 的纯净性，我创建了一个 <code>selector.ts</code> 文件来专门处理这类对 state 进行过滤或分组的工作：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-typescript" data-lang="typescript"><span class="c1">// redux/selector.ts
</span><span class="c1"></span><span class="kr">import</span> <span class="p">{</span><span class="nx">TODO_FILTERS</span><span class="p">,</span> <span class="nx">TOMATO_FILTERS</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../constants&#39;</span>

<span class="kr">const</span> <span class="nx">getTodos</span> <span class="o">=</span> <span class="p">(</span><span class="nx">store</span>: <span class="kt">any</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">todos</span><span class="p">)</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">getNotDeletedTodos</span> <span class="o">=</span> <span class="p">(</span><span class="nx">store</span>: <span class="kt">any</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">getTodos</span><span class="p">(</span><span class="nx">store</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="nx">todo</span>: <span class="kt">any</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="p">(</span><span class="o">!</span><span class="nx">todo</span><span class="p">.</span><span class="nx">deleted</span><span class="p">)</span><span class="p">)</span>
<span class="p">}</span><span class="p">;</span>
<span class="kr">export</span> <span class="kr">const</span> <span class="nx">getTodosByFilter</span> <span class="o">=</span> <span class="p">(</span><span class="nx">store</span>: <span class="kt">any</span><span class="p">,</span> <span class="nx">todoFilter</span>: <span class="kt">string</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">notDeletedTodos</span> <span class="o">=</span> <span class="nx">getNotDeletedTodos</span><span class="p">(</span><span class="nx">store</span><span class="p">)</span><span class="p">;</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">todoFilter</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">TODO_FILTERS.IMCOMPLETED</span>:
      <span class="kt">return</span> <span class="nx">notDeletedTodos</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="p">(</span><span class="nx">todo</span>: <span class="kt">any</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="p">(</span><span class="o">!</span><span class="nx">todo</span><span class="p">.</span><span class="nx">completed</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
      <span class="k">return</span> <span class="nx">notDeletedTodos</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div>
<p>这样就可以在 Todos 组件中轻松拿到 <code>incompleteTodos</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-typescript" data-lang="typescript"><span class="kr">const</span> <span class="nx">mapStateToProps</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span>: <span class="kt">any</span><span class="p">,</span> <span class="nx">ownProps</span>: <span class="kt">any</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">incompleteTodos</span> <span class="o">=</span> <span class="nx">getTodosByFilter</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">TODO_FILTERS</span><span class="p">.</span><span class="nx">INCOMPLETE</span><span class="p">)</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">incompleteTodos</span><span class="p">,</span>
    <span class="p">.</span><span class="p">.</span><span class="p">.</span><span class="nx">ownProps</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<h2 id="如何切换-todoitem-的-editing-状态">如何切换 TodoItem 的 <code>editing</code> 状态？</h2>

<p>在 <code>initTodos</code> 的时候，我们可以再加上一个 <code>editing</code> 属性，这样以后就可以通过 <code>editing</code> 来判断这个 <code>TodoItem</code> 是不是处于编辑状态了。同时，可以使用 <code>classNames</code> 这个库来帮我们动态添加 <code>className</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">import classNames from &#39;classnames&#39;
const TodoItem = (props: ITodoItemProps) =&gt; {
  const todoItemClass = classNames({
    &#39;todo-item&#39;: true,
    &#39;editing&#39;: props.editing
  });
  return (
    &lt;div classNames={todoItemClass}&gt;
    {/* ... */}
    &lt;/div&gt;
  )
}</code></pre></td></tr></table>
</div>
</div>
<h1 id="番茄闹钟-tomato">番茄闹钟 Tomato</h1>

<p>番茄闹钟分为两个模块：计时器 和 最近的历史记录。</p>

<p>同样也是在 Tomatoes 组件中获取到所有需要的信息，然后再以 Props 的形式传给子组件。计时器会根据是否有未完成的番茄闹钟来判断是显示按钮还是倒计时。</p>

<h2 id="怎样实现倒计时">怎样实现倒计时</h2>

<p>使用内置的 <code>setInterval</code> 即可，开始倒计时的时候运行 <code>setInterval</code>，每 1000 ms 将剩余时间减少 1000 ms，结束之后再 <code>clearInterval</code>。</p>

<h2 id="怎样将已完成的番茄按天分组">怎样将已完成的番茄按天分组</h2>

<p>我将分组的函数 <code>groupByDay</code> 也放在了 <code>redux/selectors.ts</code> 中，方便日后调用，使用了 <code>lodash</code> 和 <code>date-fns</code> 这两个库，分别提供了分组函数和时间格式化方法。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-typescript" data-lang="typescript"><span class="kr">import</span> <span class="nx">_</span> <span class="nx">from</span> <span class="s1">&#39;lodash&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">format</span><span class="p">,</span> <span class="nx">parseISO</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;date-fns&#39;</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">groupByDay</span> <span class="o">=</span> <span class="p">(</span><span class="nx">dataBeforeGroup</span>: <span class="kt">any</span><span class="p">[</span><span class="p">]</span><span class="p">,</span> <span class="nx">keyOfTime</span>: <span class="kt">string</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">groupBy</span><span class="p">(</span><span class="nx">dataBeforeGroup</span><span class="p">,</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="nx">format</span><span class="p">(</span><span class="nx">parseISO</span><span class="p">(</span><span class="nx">item</span><span class="p">[</span><span class="nx">keyOfTime</span><span class="p">]</span><span class="p">)</span><span class="p">,</span> <span class="s1">&#39;yyyy-MM-dd&#39;</span><span class="p">)</span><span class="p">)</span>
  <span class="p">}</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<h1 id="统计模块">统计模块</h1>

<p>统计模块主要由统计图和历史记录构成，可以在番茄和土豆的统计数据中进行切换</p>

<h3 id="如何制作标签页的切换">如何制作标签页的切换</h3>

<p>React 没有 <code>v-if</code> 这样的指令，需要自己写条件判断，先给 <code>Tabs</code> 加上一个 <code>data-index</code> 属性，方便后续取用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">&lt;div&gt;
  &lt;ul&gt;
    &lt;li data-index=&#34;1&#34; onClick={this.onClick}&gt;&lt;/li&gt;
    &lt;li data-index=&#34;2&#34; onClick={this.onClick}&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;div&gt;
    {Content}
  &lt;/div&gt;
&lt;/div&gt;</code></pre></td></tr></table>
</div>
</div>
<p>然后给 <code>Body</code> 做一个选择判断：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">let Content: any;
switch (this.state.currentIndex) {
  case &#39;1&#39;:
    Content = ...;
    break;
  case &#39;2&#39;:
    Content = ...;
}</code></pre></td></tr></table>
</div>
</div>
<p>最后加上一个点击事件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-typescript" data-lang="typescript"><span class="nx">onClick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span>: <span class="kt">any</span><span class="p">)</span> <span class="o">=</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="p">{</span><span class="nx">currentIndex</span>: <span class="kt">e.currentTarget.getAttribute</span><span class="p">(</span><span class="s1">&#39;data-index&#39;</span><span class="p">)</span><span class="p">}</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<h2 id="怎样画折线统计图">怎样画折线统计图</h2>

<p>我是借助 <code>polygon</code> 标签来画的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">&lt;svg&gt;
&lt;polygon fill=&#34;rgba(215,78,78,.1)&#34; stroke=&#34;rgba(215,78,78,.5)&#34; strokeWidth=&#34;1&#34;
         points={genPoints()}/&gt;
&lt;/svg&gt;</code></pre></td></tr></table>
</div>
</div>
<p>只需要知道类似于这样的一个字符串即可：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">[`0,${height}`, ...pointArray, `${width},0`,`${width},${height}`].join(&#39; &#39;)</code></pre></td></tr></table>
</div>
</div>
<p><code>pointArray</code> 实际上就是我们需要的横纵坐标了。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/vue/" term="Vue" label="Vue" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E9%A1%B9%E7%9B%AE/" term="项目" label="项目" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">小项目：简单的 UI 框架 - Hais UI</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2020-01-27-hais-ui/" />
            <id>http://hais-teatime.com/post/2020-01-27-hais-ui/</id>
            <updated>2020-02-07T10:51:05+08:00</updated>
            <published>2020-01-27T16:36:13+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[尝试做了一个简单的基于 Vue 的 UI 框架，包含按钮、输入框、布局、弹出信息、标签、气泡卡片、折叠面板等常用组件。这篇博客是基于源码以及在搭建项目的过程中出现的问题进行的学习及讨论，而不是使用指导，组件的预览效果和使用方法可以查看 使用文档，源代码可以查看 代码仓库 。]]></summary>
            
                <content type="html"><![CDATA[<p>尝试做了一个简单的基于 Vue 的 UI 框架，包含按钮、输入框、布局、弹出信息、标签、气泡卡片、折叠面板等常用组件。这篇博客是基于源码以及在搭建项目的过程中出现的问题进行的学习及讨论，而不是使用指导，组件的预览效果和使用方法可以查看 <a href="https://hais-teatime.com/hais-ui/" target="_blank">使用文档</a>，源代码可以查看 <a href="https://github.com/Hyuain/hais-ui" target="_blank">代码仓库</a> 。</p>

<p>本项目基于 Vue，使用 parcel 搭建，最后发布到 npm 上可供下载，并使用 VuePress 撰写文档。</p>

<h1 id="按钮与按钮组">按钮与按钮组</h1>

<p>按钮组件相对比较简单，在这里我们需要的特别考虑的有以下几个点：</p>

<h2 id="如何控制-icon-的位置">如何控制 icon 的位置</h2>

<p>可以在组件的最外层加上一个动态绑定的 <code>class</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">button</span> <span class="na">:class</span><span class="o">=</span><span class="s">&#34;{[`icon-${iconPosition}`]: true}&#34;</span><span class="p"></span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">hai-icon</span><span class="p">/</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;content&#34;</span><span class="p"></span><span class="p">&gt;</span>按钮<span class="p">&lt;</span><span class="p">/</span><span class="nt">span</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">button</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<p>这样就可以通过传入 <code>iconPosition</code> 这个 Prop 来给组件动态地加上一个 <code>icon-left</code> 或者 <code>icon-right</code> 的类，然后使用 <code>flex</code> 的 <code>order</code> 来控制里面 icon 的位置了。</p>

<h2 id="如何让自定义组件响应原生的-click-事件">如何让自定义组件响应原生的 click 事件</h2>

<p>为了让用户使用的时候不需要使用 <code>.native</code>，在这里我的处理方式比较单纯，就是让 <code>button</code> 在被点击的时候出发点击事件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;$emit(&#39;click&#39;)&#34;</span><span class="p"></span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">hai-icon</span><span class="p">/</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;content&#34;</span><span class="p"></span><span class="p">&gt;</span>按钮<span class="p">&lt;</span><span class="p">/</span><span class="nt">span</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">button</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<h2 id="如何让按钮合并为按钮组">如何让按钮合并为按钮组</h2>

<p>这个只需要新增加一个按钮组组件，然后在这个按钮组组件里面修改 <code>:first-child</code> <code>:last-child</code> 和 <code>:not:first-child</code> 的样式即可</p>

<h1 id="输入框">输入框</h1>

<h2 id="如何让输入框能够使用-v-model">如何让输入框能够使用 <code>v-model</code></h2>

<p>为了让自定义的输入框组件能够使用 Vue 提供的 <code>v-model</code>，需要给里面的原生 <code>input</code> 组件加上几个事件监听：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span>
           <span class="err">@</span><span class="na">change</span><span class="o">=</span><span class="s">&#34;$emit(&#39;change&#39;, $event.target.value)&#34;</span>
           <span class="err">@</span><span class="na">input</span><span class="o">=</span><span class="s">&#34;$emit(&#39;input&#39;, $event.target.value)&#34;</span>
           <span class="err">@</span><span class="na">focus</span><span class="o">=</span><span class="s">&#34;$emit(&#39;focus&#39;, $event.target.value)&#34;</span>
           <span class="err">@</span><span class="na">blur</span><span class="o">=</span><span class="s">&#34;$emit(&#39;blur&#39;, $event.target.value)&#34;</span>
    <span class="p"></span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<h1 id="网格系统">网格系统</h1>

<h2 id="如何平均分配每个-col-的宽度">如何平均分配每个 <code>col</code> 的宽度</h2>

<p>如果在 <code>row</code> 上使用 <code>display: flex</code> 的话，默认是不会换行，并且每个 <code>col</code> 的宽度是一样的，但是考虑到在有些时候，我们可能需要让他换行、或者自行控制他是否能换行（比如在 PC 端我们横向布局的模块，换到移动端可能需要变成纵向布局等），因此我考虑使用 <code>auto</code> 这一个属性来进行控制，在源代码中实际上是控制了 <code>flex-wrap</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-scss" data-lang="scss">    <span class="nc">.</span><span class="nc">row</span> <span class="p">{</span>
      <span class="nt">display</span><span class="nd">:</span> <span class="nt">flex</span><span class="p">;</span>
      <span class="nt">flex-wrap</span><span class="nd">:</span> <span class="nt">wrap</span><span class="p">;</span>
      <span class="k">&amp;</span><span class="nc">.</span><span class="nc">auto</span> <span class="p">{</span>
        <span class="nt">flex-wrap</span><span class="nd">:</span> <span class="nt">nowrap</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span></code></pre></td></tr></table>
</div>
</div>
<p>最终得到的效果是：如果用户需要在同一行自动平均分配宽度，则使用 <code>auto</code>；若用户想要完全手动分配跨度比例则不使用 <code>auto</code>，在这种情况下，若总宽度超过一行，将会引起换行。</p>

<h2 id="如何将一行划分成-24-份">如何将一行划分成 24 份</h2>

<p>这其实是一个比较麻烦的问题，我们先假定用户可以用这种方式来使用我们的组件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">hai-row</span><span class="p"></span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">hai-col</span> <span class="na">span</span><span class="o">=</span><span class="s">&#34;4&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-col</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">hai-col</span> <span class="na">span</span><span class="o">=</span><span class="s">&#34;12&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-col</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">hai-col</span> <span class="na">span</span><span class="o">=</span><span class="s">&#34;8&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-col</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-row</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<p>可以传入一个 <code>span</code> 的 Prop 来告诉我们用户想让这个 <code>col</code> 占据二十四分之几的总宽度。那么比较简单粗暴的做法就是在这三个 <code>col</code> 上直接分别加 <code>col-4</code> <code>col-12</code> 和 <code>col-8</code>的类，对应样式分别是 <code>width: 4 / 24 * 100%</code> <code>width: 12 / 24 * 100%</code> 和 <code>width: 8 / 24 * 100%</code>。我们可以借助 SCSS 的循环来帮我们自动加样式。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-scss" data-lang="scss">    <span class="nc">.</span><span class="nc">col</span><span class="p">{</span>
      <span class="k">@for</span> <span class="nv">$n</span> <span class="ow">from</span> <span class="mi">1</span><span class="kt"></span> <span class="ow">through</span> <span class="mi">24</span><span class="kt"></span> <span class="p">{</span>
        <span class="k">&amp;</span><span class="nc">.</span><span class="nc">col-</span><span class="si">#{</span><span class="nv">$n</span><span class="si">}</span> <span class="p">{</span>
          <span class="nt">width</span><span class="nd">:</span> <span class="o">(</span><span class="err">$</span><span class="nt">n</span> <span class="o">/</span> <span class="nt">24</span><span class="o">)</span> <span class="o">*</span> <span class="nt">100</span><span class="err">%</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span></code></pre></td></tr></table>
</div>
</div>
<p>这样就写好了 <code>col-1</code> 到 <code>col-24</code> 的样式，我们只需要加上对应的 <code>class</code> 就行了。同样，我们的 <code>offset</code> 也是这样处理的。</p>

<h2 id="响应式布局参数的校验">响应式布局参数的校验</h2>

<p>在文档示例中的响应式部分我们可以看到这样的用法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">hai-row</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p"></span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">hai-col</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;item1&#34;</span> <span class="na">span</span><span class="o">=</span><span class="s">&#34;24&#34;</span>
             <span class="na">:pad</span><span class="o">=</span><span class="s">&#34;{span:8}&#34;</span>
             <span class="na">:narrow-pc</span><span class="o">=</span><span class="s">&#34;{span:6}&#34;</span>
             <span class="na">:pc</span><span class="o">=</span><span class="s">&#34;{span:4}&#34;</span>
             <span class="na">:wide-pc</span><span class="o">=</span><span class="s">&#34;{span:2}&#34;</span>
      <span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-col</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">hai-col</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;item2&#34;</span> <span class="na">span</span><span class="o">=</span><span class="s">&#34;24&#34;</span>
             <span class="na">:pad</span><span class="o">=</span><span class="s">&#34;{span:15, offset:1}&#34;</span>
             <span class="na">:narrow-pc</span><span class="o">=</span><span class="s">&#34;{span:17, offset:1}&#34;</span>
             <span class="na">:pc</span><span class="o">=</span><span class="s">&#34;{span:18, offset:2}&#34;</span>
             <span class="na">:wide-pc</span><span class="o">=</span><span class="s">&#34;{span:19, offset:3}&#34;</span>
      <span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-col</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-row</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<p>为了保证用户传入的 <code>pad</code> <code>narrow-pc</code> <code>pc</code><code>wide-pc</code> 的值的有效性，我们需要做一些校验。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kr">const</span> <span class="nx">validator</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
      <span class="kd">let</span> <span class="nx">valid</span> <span class="o">=</span> <span class="kc">true</span>
      <span class="nx">keys</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="p">[</span><span class="s1">&#39;span&#39;</span><span class="p">,</span> <span class="s1">&#39;offset&#39;</span><span class="p">]</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">valid</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
      <span class="p">}</span><span class="p">)</span>
      <span class="k">return</span> <span class="nx">valid</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<h2 id="如何动态添加类">如何动态添加类</h2>

<p>如果只有一种或两种类需要动态添加上去还比较好处理，比如说可以这样写：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">:class</span><span class="o">=</span><span class="s">&#34;span &amp;&amp; `col-${span}`&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<p>但是现在情况比较麻烦，我们的用户可能会传入响应式布局所需要的一些对象值。我们可以考虑用两个函数来完成这个处理过程：</p>

<p>首先使用用户输入的 <code>propsObj</code> 创建出我们想要加上去的 <code>classArray</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">createClass</span><span class="p">(</span><span class="nx">propsObj</span><span class="p">,</span> <span class="nx">device</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 如果没有传值，则输出的 classArray 为空
</span><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">propsObj</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">[</span><span class="p">]</span>
        <span class="p">}</span>
        <span class="kr">const</span> <span class="nx">classArray</span> <span class="o">=</span> <span class="p">[</span><span class="p">]</span>
        <span class="c1">// 如果有 span 或者 offset 属性，就给 classArray 加上对应的部分
</span><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="nx">propsObj</span><span class="p">.</span><span class="nx">span</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">classArray</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="sb">`</span><span class="sb">col-</span><span class="si">${</span><span class="nx">device</span><span class="si">}</span><span class="si">${</span><span class="nx">propsObj</span><span class="p">.</span><span class="nx">span</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">propsObj</span><span class="p">.</span><span class="nx">offset</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">classArray</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="sb">`</span><span class="sb">offset-</span><span class="si">${</span><span class="nx">device</span><span class="si">}</span><span class="si">${</span><span class="nx">propsObj</span><span class="p">.</span><span class="nx">offset</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">classArray</span>
      <span class="p">}</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>然后我们再借助计算属性来将 <code>classArray</code> 加到组件上：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">colClass</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="kr">const</span> <span class="p">{</span><span class="nx">span</span><span class="p">,</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">pad</span><span class="p">,</span> <span class="nx">narrowPc</span><span class="p">,</span> <span class="nx">pc</span><span class="p">,</span> <span class="nx">widePc</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span>
        <span class="kr">const</span> <span class="nx">createClass</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">createClass</span>
        <span class="k">return</span> <span class="p">[</span>
          <span class="p">...</span><span class="nx">createClass</span><span class="p">(</span><span class="p">{</span><span class="nx">span</span><span class="p">,</span> <span class="nx">offset</span><span class="p">}</span><span class="p">)</span><span class="p">,</span>
          <span class="p">...</span><span class="nx">createClass</span><span class="p">(</span><span class="nx">pad</span><span class="p">,</span> <span class="s1">&#39;pad-&#39;</span><span class="p">)</span><span class="p">,</span>
          <span class="p">...</span><span class="nx">createClass</span><span class="p">(</span><span class="nx">narrowPc</span><span class="p">,</span> <span class="s1">&#39;narrow-pc-&#39;</span><span class="p">)</span><span class="p">,</span>
          <span class="p">...</span><span class="nx">createClass</span><span class="p">(</span><span class="nx">pc</span><span class="p">,</span> <span class="s1">&#39;pc-&#39;</span><span class="p">)</span><span class="p">,</span>
          <span class="p">...</span><span class="nx">createClass</span><span class="p">(</span><span class="nx">widePc</span><span class="p">,</span> <span class="s1">&#39;wide-pc-&#39;</span><span class="p">)</span><span class="p">,</span>
        <span class="p">]</span>
      <span class="p">}</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">:class</span><span class="o">=</span><span class="s">&#34;colClass&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<h1 id="弹出信息">弹出信息</h1>

<h2 id="如何通过函数来触发-toast">如何通过函数来触发 <code>toast</code></h2>

<p>为了让用户更方便地使用 <code>toast</code>，我采取了插件的形式来提供 <code>toast</code>，将他放在了 <code>Vue.prototype</code> 上：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
      <span class="nx">install</span><span class="p">(</span><span class="nx">Vue</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">Vue</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">$toast</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">createToast</span><span class="p">(</span><span class="p">{</span><span class="nx">message</span><span class="p">,</span> <span class="nx">options</span><span class="p">}</span><span class="p">)</span> <span class="p">{</span>
          <span class="kr">const</span> <span class="nx">Constructor</span> <span class="o">=</span> <span class="nx">Vue</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Toast</span><span class="p">)</span>
          <span class="kr">const</span> <span class="nx">toast</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Constructor</span><span class="p">(</span><span class="p">{</span>
            <span class="nx">data</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
              <span class="k">return</span> <span class="p">{</span><span class="nx">message</span><span class="p">}</span>
            <span class="p">}</span><span class="p">,</span>
            <span class="nx">propsData</span><span class="o">:</span> <span class="nx">options</span>
          <span class="p">}</span><span class="p">)</span>
          <span class="nx">toast</span><span class="p">.</span><span class="nx">$slots</span><span class="p">.</span><span class="k">default</span> <span class="o">=</span> <span class="p">[</span><span class="nx">message</span><span class="p">]</span>
          <span class="nx">toast</span><span class="p">.</span><span class="nx">$mount</span><span class="p">(</span><span class="p">)</span>
          <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">toast</span><span class="p">.</span><span class="nx">$el</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<h2 id="autoclose-的两种用法"><code>autoClose</code> 的两种用法</h2>

<p>我将其设计为了如果 <code>autoClose</code> 为 <code>false</code> 则不自动关闭，否则就需要传入一个数字以指定自动关闭的时间，那么我们可以这样编写 <code>autoClose</code> 的验证：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">autoClose</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">type</span><span class="o">:</span> <span class="p">[</span><span class="nb">Boolean</span><span class="p">,</span> <span class="nb">Number</span><span class="p">]</span><span class="p">,</span>
        <span class="k">default</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
        <span class="nx">validator</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">value</span> <span class="o">===</span> <span class="kc">false</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s1">&#39;number&#39;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<h2 id="enablehtml-怎么实现"><code>enableHtml</code> 怎么实现</h2>

<p><code>slot</code> 里面是不支持 HTML 的，我采用了比较粗暴的 <code>v-if</code> 来控制是否显示 HTML：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">slot</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;!enableHtml&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">slot</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-else</span> <span class="na">v-html</span><span class="o">=</span><span class="s">&#34;message&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<h2 id="如何实现不同时出现多个-toast">如何实现不同时出现多个 toast</h2>

<p>这个时候我们就不能直接试用刚才的函数了，我们得把创建好的 <code>toast</code> 组件给记下来，然后在创建下一个组件之前销毁他：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">let</span> <span class="nx">currentToast</span>
    
    <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
      <span class="nx">install</span><span class="p">(</span><span class="nx">Vue</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">Vue</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">$toast</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// 销毁之前的 toast
</span><span class="c1"></span>          <span class="k">if</span> <span class="p">(</span><span class="nx">currentToast</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">currentToast</span><span class="p">.</span><span class="nx">close</span><span class="p">(</span><span class="p">)</span>
          <span class="p">}</span>
          <span class="c1">// 创建一个新的 toast
</span><span class="c1"></span>          <span class="nx">currentToast</span> <span class="o">=</span> <span class="nx">createToast</span><span class="p">(</span><span class="p">{</span>
            <span class="nx">Vue</span><span class="p">,</span>
            <span class="nx">message</span><span class="p">,</span>
            <span class="nx">propsData</span><span class="o">:</span> <span class="nx">options</span><span class="p">,</span>
            <span class="nx">onClose</span><span class="o">:</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
              <span class="nx">currentToast</span> <span class="o">=</span> <span class="kc">null</span>
            <span class="p">}</span>
          <span class="p">}</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="kd">function</span> <span class="nx">createToast</span><span class="p">(</span><span class="p">{</span><span class="nx">Vue</span><span class="p">,</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">propsData</span><span class="p">,</span> <span class="nx">onClose</span><span class="p">}</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">Constructor</span> <span class="o">=</span> <span class="nx">Vue</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Toast</span><span class="p">)</span>
      <span class="kr">const</span> <span class="nx">toast</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Constructor</span><span class="p">(</span><span class="p">{</span>
        <span class="nx">data</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">{</span><span class="nx">message</span><span class="p">}</span>
        <span class="p">}</span><span class="p">,</span>
        <span class="nx">propsData</span>
      <span class="p">}</span><span class="p">)</span>
      <span class="nx">toast</span><span class="p">.</span><span class="nx">$slots</span><span class="p">.</span><span class="k">default</span> <span class="o">=</span> <span class="p">[</span><span class="nx">message</span><span class="p">]</span>
      <span class="nx">toast</span><span class="p">.</span><span class="nx">$mount</span><span class="p">(</span><span class="p">)</span>
      <span class="nx">toast</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;beforeClose&#39;</span><span class="p">,</span> <span class="nx">onClose</span><span class="p">)</span>
      <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">toast</span><span class="p">.</span><span class="nx">$el</span><span class="p">)</span>
      <span class="k">return</span> <span class="nx">toast</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<h1 id="标签">标签</h1>

<h2 id="怎样切换标签页">怎样切换标签页</h2>

<p>先看看用法示例以方便理解，由于我们的 <code>tabs-item</code> 和 <code>tabs-pane</code> 分属于不同的组件，所以就没办法简单地用 <code>v-if</code> 来实现这个标签页的切换效果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">hai-tabs</span> <span class="na">selected</span><span class="o">=</span><span class="s">&#34;sports&#34;</span><span class="p"></span><span class="p">&gt;</span>
    
      <span class="p">&lt;</span><span class="nt">hai-tabs-head</span><span class="p"></span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">hai-tabs-item</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;anime&#34;</span><span class="p"></span><span class="p">&gt;</span>动漫<span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-tabs-item</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">hai-tabs-item</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;finance&#34;</span><span class="p"></span><span class="p">&gt;</span>财经<span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-tabs-item</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">hai-tabs-item</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;sports&#34;</span><span class="p"></span><span class="p">&gt;</span>体育<span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-tabs-item</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-tabs-head</span><span class="p">&gt;</span>
    
      <span class="p">&lt;</span><span class="nt">hai-tabs-body</span><span class="p"></span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">hai-tabs-pane</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;anime&#34;</span><span class="p"></span><span class="p">&gt;</span>动漫相关资讯<span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-tabs-pane</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">hai-tabs-pane</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;finance&#34;</span><span class="p"></span><span class="p">&gt;</span>财经相关资讯<span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-tabs-pane</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">hai-tabs-pane</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;sports&#34;</span><span class="p"></span><span class="p">&gt;</span>体育相关资讯<span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-tabs-pane</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-tabs-body</span><span class="p">&gt;</span>
    
    <span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-tabs</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<p>我选择了 eventBus 来解决这个问题。</p>

<ol>
<li>点击 <code>tabs-item</code> 的时候，在 eventBus 上触发事件 <code>update:selected</code>，并且将 <code>tabs-item</code> 的 <code>name</code> 和组件本身（<code>vm</code>）都传出去；</li>
<li><code>tabs-item</code> 监听事件，当事件中的 <code>name</code> 与自己的 <code>name</code> 相同，则激活这个 <code>tabs-item</code>（加上 <code>class</code>）；</li>
<li><code>tabs-pane</code> 监听事件，当事件中的 <code>name</code> 与自己的 <code>name</code> 相同，则激活这个 <code>tabs-pane</code>（显示出来）；</li>
<li><code>tabs-head</code> 监听事件，获取事件中的 <code>vm</code>，以做出线在不同的 <code>tabs-item</code> 之间来回滑动的感觉。</li>
</ol>

<p>这样，就基本实现了标签页的切换功能。</p>

<h2 id="设置默认标签页">设置默认标签页</h2>

<p>有些时候，我们还需要指定一个默认的标签页，在这里我认为直接以 Prop 的形式传给 <code>tabs</code> 比较合适：</p>

<ol>
<li>当拿到 <code>selected</code> 值的时候，遍历 <code>tabs</code> 的子元素，找到 <code>tabs-head</code>；</li>
<li>再在 <code>tabs-head</code> 中遍历子元素，找到 <code>name</code> 与 <code>selected</code> 相同的那一项；</li>
<li>触发 eventBus 上的 <code>update:selceted</code> 事件，并且将 <code>selected</code> 和这个子元素（<code>child</code>）都传出去。</li>
</ol>

<h2 id="如何实现-sync-语法">如何实现 <code>.sync</code> 语法</h2>

<p>我们有时候需要动态获取到 <code>selected</code> 的值，Vue 为我们提供了很方便的 <code>.sync</code> 语法，为了兼容这个语法，<code>tabs</code> 组件也必须监听 eventBus 上的 <code>update:selected</code> 事件，然后再在 <code>tabs</code> 组件上触发 <code>update:selected</code> 事件，并且把 <code>name</code> 传出去。这样 Vue 就会帮我们监听这个事件，并且动态更新 <code>selected</code> 的值。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="k">this</span><span class="p">.</span><span class="nx">eventBus</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;update:selected&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;update:selected&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
    <span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<h2 id="如何切换-horizontal-和-vertical">如何切换 <code>horizontal</code> 和 <code>vertical</code></h2>

<p>同样我也借助了 eventBus，在组件里面共享了 <code>direction</code> 这个值，各个部分拿到 <code>direction</code> 值之后对样式进行了修改。</p>

<h1 id="气泡卡片">气泡卡片</h1>

<h2 id="如何确定气泡卡片的位置">如何确定气泡卡片的位置？</h2>

<p>由于气泡卡片的内容实际上是在点击按钮之后 <code>append</code> 到 <code>body</code> 里面的（这样做是为了防止气泡卡片被父元素遮住），所以我们需要给气泡卡片确定位置。所以实际上要经历以下两个过程：</p>

<ol>
<li>用户点击按钮，<code>visible</code> 变为 <code>true</code>，气泡卡片出现</li>

<li><p>给气泡卡片定位</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">positioningConent</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="p">{</span><span class="nx">contentWrapper</span><span class="p">,</span> <span class="nx">triggerWrapper</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$refs</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">contentWrapper</span><span class="p">)</span>
    <span class="c1">// 获取按钮的位置和宽高
</span><span class="c1"></span>    <span class="kr">const</span> <span class="p">{</span><span class="nx">top</span><span class="p">,</span> <span class="nx">left</span><span class="p">,</span> <span class="nx">height</span><span class="p">,</span> <span class="nx">width</span><span class="p">}</span> <span class="o">=</span> <span class="nx">triggerWrapper</span><span class="p">.</span><span class="nx">getBoundingClientRect</span><span class="p">(</span><span class="p">)</span>
    <span class="c1">// 获取卡片的高度
</span><span class="c1"></span>    <span class="kr">const</span> <span class="p">{</span><span class="nx">height</span><span class="o">:</span> <span class="nx">contentHeight</span><span class="p">}</span> <span class="o">=</span> <span class="nx">contentWrapper</span><span class="p">.</span><span class="nx">getBoundingClientRect</span><span class="p">(</span><span class="p">)</span>
    <span class="kr">const</span> <span class="nx">positionTable</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">top</span><span class="o">:</span> <span class="p">{</span>
        <span class="c1">// 为了保证即使在滚动了鼠标之后再触发卡片，位置也不会错误
</span><span class="c1"></span>        <span class="nx">top</span><span class="o">:</span> <span class="nx">top</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">scrollY</span><span class="p">,</span>
        <span class="nx">left</span><span class="o">:</span> <span class="nx">left</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">scrollX</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="nx">bottom</span><span class="o">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span><span class="p">,</span>
      <span class="nx">left</span><span class="o">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span><span class="p">,</span>
      <span class="nx">right</span><span class="o">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>       
    <span class="p">}</span>
    <span class="c1">// 根据 this.position 的值来确定应该使用哪个气泡卡片的值
</span><span class="c1"></span>    <span class="nx">contentWrapper</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="nx">positionTable</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">]</span><span class="p">.</span><span class="nx">top</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span>
    <span class="nx">contentWrapper</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">positionTable</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">]</span><span class="p">.</span><span class="nx">left</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>

<h2 id="事件监听">事件监听</h2>

<p>气泡卡片组件还有一个比较麻烦的地方就是事件监听过程要考虑到的事情比较多。</p>

<p>比如对于 <code>click</code> 事件，我们需要处理这样几个问题：</p>

<ol>
<li>点击 <code>button</code>，若此时无卡片，则弹出卡片；若此时有卡片，则关闭卡片</li>
<li>卡片弹出后点击 <code>document</code>，关闭卡片（但是这个事件要排除之前的按钮上的事件，防止重复关闭）</li>
<li>卡片弹出后点卡片里面的内容，不关闭卡片，方便用户复制</li>
</ol>

<p>对于 <code>hover</code> 事件，我们考虑的问题也不一样：</p>

<ol>
<li>鼠标移入 <code>button</code>，弹出卡片；鼠标移出 <code>button</code>，关闭卡片</li>
<li>卡片弹出后，200ms 内鼠标移入卡片，卡片保持不关闭</li>
<li>鼠标移出卡片，卡片关闭</li>
</ol>

<p>这里面的 <code>EventListener</code> 需要及时 <code>remove</code> 掉，否则就会出现很多多余的监听器</p>

<h2 id="卡片里面的关闭按钮如何实现">卡片里面的关闭按钮如何实现</h2>

<p>可以借助 Vue 中作用域插槽的使用，在组件里面将写好的 <code>close</code> 方法给传出去：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">ref</span><span class="o">=</span><span class="s">&#34;contentWrapper&#34;</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;visible&#34;</span><span class="p"></span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">slot</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;content&#34;</span> <span class="na">:close</span><span class="o">=</span><span class="s">&#34;close&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">slot</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>=</code></pre></td></tr></table>
</div>
</div>
<p>这样在组件外面就可以这样来使用 <code>close</code> 方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">template</span> <span class="na">v-slot:content</span><span class="o">=</span><span class="s">&#34;methods&#34;</span><span class="p"></span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p"></span><span class="p">&gt;</span>这是气泡卡片的内容<span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">hai-button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;methods.close&#34;</span><span class="p"></span><span class="p">&gt;</span>点击<span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-button</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="p">/</span><span class="nt">template</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<p>或者使用 ES 6 的解构语法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">template</span> <span class="na">v-slot:content</span><span class="o">=</span><span class="s">&#34;{close}&#34;</span><span class="p"></span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p"></span><span class="p">&gt;</span>这是气泡卡片的内容<span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">hai-button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;close&#34;</span><span class="p"></span><span class="p">&gt;</span>点击<span class="p">&lt;</span><span class="p">/</span><span class="nt">hai-button</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="p">/</span><span class="nt">template</span><span class="p">&gt;</span></code></pre></td></tr></table>
</div>
</div>
<h1 id="折叠面板">折叠面板</h1>

<h2 id="如何实现折叠面板的效果">如何实现折叠面板的效果</h2>

<p>同样，我们需要借助 eventBus 来进行信息的传递，eventBus 上有这样几个事件：</p>

<h3 id="update-selected"><code>update:selected</code></h3>

<p><code>collapse-item</code> 会监听来自于父组件 <code>collapse</code> 的 <code>update:selected</code> 事件和一个数组 <code>selectedNames</code>，这个数组包含了当前被选中的（展开的）所有 <code>collapse-item</code> 的 <code>name</code>。</p>

<p>若 <code>collapse-item</code> 发现自己的 <code>name</code> 存在于 <code>selectedNames</code> 之中，就会展开。</p>

<h3 id="add-selected"><code>add:selected</code></h3>

<p>当 <code>collapse-item</code> 被点击后，如果是没有展开的状态，就触发事件 <code>add:selected</code>，并传出自己的 <code>name</code>，这个事件将在父组件 <code>collapse</code> 中得到处理。</p>

<p>父组件监听 <code>add:selected</code> 事件，但需要注意的是，父组件不能直接修改用户传进来的 <code>selected</code> 数组， 一来是这样不优雅，Vue 不建议我们修改用户传入的数据；二来是这样直接的修改并不能让外界（<code>collapse</code> 组件之外，以及 <code>collapse</code> 的各个子组件）感知到，并作出反应。因此，在作出一切的修改之前，我们需要对传入的 <code>selected</code> 数组做一次深拷贝：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="k">this</span><span class="p">.</span><span class="nx">selectedCopy</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">selected</span><span class="p">)</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>父组件在收到 <code>add:selected</code> 事件之后，根据用户是否传入 <code>alone</code> 来选择更新的方式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">alone</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">selectedCopy</span> <span class="o">=</span> <span class="p">[</span><span class="nx">name</span><span class="p">]</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">selectedCopy</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>然后，再触发 <code>update:selected</code> 事件，让子组件 <code>collapse-item</code> 自己处理。当然，在这里为了支持 <code>.sync</code> 语法，<code>collapse</code> 还需要在自己（而不是 eventBus 上）触发一个<code>update:selected</code> 事件。</p>

<h3 id="remove-selected"><code>remove:selected</code></h3>

<p>对应的，当 <code>collapse-item</code> 被点击后，如果是已经展开的状态，就触发事件 <code>remove:selected</code>，并传出自己的 <code>name</code>，这个事件将在父组件 <code>collapse</code> 中得到处理。</p>

<p>然后 <code>collapse</code> 中移除对应的 <code>name</code>，然后触发 <code>update:selected</code> 事件来更新。</p>

<h1 id="一键注册">一键注册</h1>

<p>我选择 <code>index.js</code> 作为项目的入口文件，为了给用户更好的使用体验，提供了两种使用的方式，首先是按需引入，只是提供一个汇总的入口，用户需要 <code>import</code> 之后自己手动注册组件或是使用插件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kr">import</span> <span class="nx">HaiButton</span> <span class="nx">from</span> <span class="s1">&#39;./src/button&#39;</span>
    <span class="kr">import</span> <span class="nx">HaiButtonGroup</span> <span class="nx">from</span> <span class="s1">&#39;./src/button-group&#39;</span>
    <span class="kr">import</span> <span class="nx">HaiToast</span> <span class="nx">from</span> <span class="s2">&#34;./src/plugin&#34;</span>

    <span class="kr">export</span> <span class="p">{</span>
      <span class="nx">HaiButton</span><span class="p">,</span>
      <span class="nx">HaiButtonGroup</span><span class="p">,</span>
      <span class="nx">HaiToast</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>同时也提供了全局自动安装的方式，将所有的组件封装成一个插件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kr">import</span> <span class="nx">HaiButton</span> <span class="nx">from</span> <span class="s1">&#39;./src/button&#39;</span>
    <span class="kr">import</span> <span class="nx">HaiButtonGroup</span> <span class="nx">from</span> <span class="s1">&#39;./src/button-group&#39;</span>
    <span class="kr">import</span> <span class="nx">HaiToast</span> <span class="nx">from</span> <span class="s2">&#34;./src/plugin&#34;</span>

    <span class="kr">const</span> <span class="nx">components</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">HaiButton</span><span class="p">,</span>
      <span class="nx">HaiButtonGroup</span>
    <span class="p">}</span>

    <span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Vue</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
      <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">components</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">components</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span><span class="p">)</span>
      <span class="p">}</span><span class="p">)</span>
      <span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">HaiToast</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>这样用户就可以使用 <code>Vue.use(HaisUI)</code> 一键注册了。</p>

<h1 id="单元测试">单元测试</h1>

<p>我使用了 Karma + Mocha 来进行单元测试，还 Sinon 来帮助完成测试。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">yarn add -D karma karma-chrome-launcher karma-mocha karma-sinon-chai mocha sinon sinon-chai karma-chai karma-chai-spies</code></pre></td></tr></table>
</div>
</div>
<p>比如在 <code>test/button.test.js</code> 文件中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">expect</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">expect</span>
<span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
<span class="kr">import</span> <span class="nx">Button</span> <span class="nx">from</span> <span class="s1">&#39;../src/button.vue&#39;</span>

<span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Button&#39;</span><span class="p">,</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;存在&#39;</span><span class="p">,</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">Button</span><span class="p">)</span><span class="p">.</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">ok</span>
  <span class="p">}</span><span class="p">)</span>
  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;可以设置 icon&#39;</span><span class="p">,</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">Constructor</span> <span class="o">=</span> <span class="nx">Vue</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Button</span><span class="p">)</span>
    <span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Constructor</span><span class="p">(</span><span class="p">{</span>
      <span class="nx">propsData</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">icon</span><span class="o">:</span> <span class="s1">&#39;settings&#39;</span>
      <span class="p">}</span>
    <span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="nx">$mount</span><span class="p">(</span><span class="p">)</span>
    <span class="kr">const</span> <span class="nx">useElement</span> <span class="o">=</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;use&#39;</span><span class="p">)</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">useElement</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;xlink:href&#39;</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;#icon-settings&#39;</span><span class="p">)</span>
    <span class="nx">vm</span><span class="p">.</span><span class="nx">$destroy</span><span class="p">(</span><span class="p">)</span>
  <span class="p">}</span><span class="p">)</span>
<span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<h1 id="持续集成">持续集成</h1>

<p>项目使用 Travis-CI 进行持续集成，编写 <code>.travis.yml</code> 文件如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">language</span><span class="p">:</span><span class="w"> </span>node_js<span class="w">
</span><span class="w"></span><span class="k">node_js</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="w">  </span>- <span class="s2">&#34;12&#34;</span><span class="w">
</span><span class="w"></span><span class="k">addons</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="w">  </span><span class="k">chrome</span><span class="p">:</span><span class="w"> </span>stable<span class="w">
</span><span class="w"></span><span class="k">sudo</span><span class="p">:</span><span class="w"> </span>required<span class="w">
</span><span class="w"></span><span class="k">before_script</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="w">  </span>- <span class="s2">&#34;sudo chown root /opt/google/chrome/chrome-sandbox&#34;</span><span class="w">
</span><span class="w">  </span>- <span class="s2">&#34;sudo chmod 4755 /opt/google/chrome/chrome-sandbox&#34;</span></code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/vue/" term="Vue" label="Vue" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E9%A1%B9%E7%9B%AE/" term="项目" label="项目" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">小项目：前端导航页面 - 维生素导航·Vue</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2020-01-16-navigation-vue/" />
            <id>http://hais-teatime.com/post/2020-01-16-navigation-vue/</id>
            <updated>2020-01-28T21:15:51+08:00</updated>
            <published>2020-01-16T17:14:39+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[初学 Vue，将第一个项目——用 jQuery 和原生 CSS 所做的一个导航页面——给 Renew 了一下。点击可以查看 代码仓库 和 效果预览。]]></summary>
            
                <content type="html"><![CDATA[<p>初学 Vue，将第一个项目——用 jQuery 和原生 CSS 所做的一个导航页面——给 Renew 了一下。点击可以查看 <a href="https://github.com/Hyuain/navigation-vue" target="_blank">代码仓库</a> 和 <a href="http://hais-teatime.com/navigation-vue" target="_blank">效果预览</a>。</p>

<h1 id="功能介绍">功能介绍</h1>

<p>目前维生素导航主要分为两个部分：<strong>搜索框</strong> 和 <strong>网页导航</strong>。</p>

<p>在上方的搜索框中输入文字可以使用对应的搜索引擎进行搜索，目前内置三款搜索引擎：Google、百度、Bing，默认为 Google。</p>

<p>点击下方的网页收藏可以进入到对应的页面，目前已经内置了一些默认的页面。</p>

<p>鼠标浮动到图标上会出现删除按钮，点击可以将网页删除；移动设备长按会弹出删除框，点击中间的红色小叉叉也可以删除网页。</p>

<p>点击 <strong>'+'</strong> 会弹出新增网页的对话框，可以输入网页的名称和 URL；若没有输入名称，则将默认使用域名作为名称。然后会自动请求图标，若图标请求失败，将会使用名称的第一个字符作为网页的图标。</p>

<p>网站的信息是存储在 LocalStorage 中的，所以清除历史记录的操作会清空之前添加的网站。</p>

<h1 id="在项目中学习">在项目中学习</h1>

<h2 id="搜索框">搜索框</h2>

<h3 id="1-如何实现三个不同搜索引擎的切换">1. 如何实现三个不同搜索引擎的切换？</h3>

<p>首先想到的是通过 <code>v-if</code> 来实现，设置一个变量 <code>searchEngine</code>，点到对应的搜索引擎的时候就将 <code>searchEngine</code> 变为对应的值。</p>

<p>那么怎样知道被点击的是哪一个图标呢？好在我们的图标比较少，在 <code>@click</code> 的点击事件中，我们可以在 <code>$event</code> 之后再传入一个参数，用来表示搜索引擎即可。</p>

<p>这样最简单的切换效果就实现了。</p>

<p>但是我们想再加一点过渡效果，Vue 为我们准备了在 <code>v-if</code> 切换出现和消失的时候可以使用的过渡 API。但是简单的使用之后发现一个问题，由于点击切换标签之间实际上是无间隔的，<code>v-if</code> 值为 <code>false</code> 之后就会马上消失，值为 <code>true</code> 的时候又会马上出现，但是动画是需要时间的（进入和退出都有时间），这就导致页面上可能同时出现好几个 LOGO，会变得非常混乱；同时因为 LOGO 在 DOM 中是有上下顺序的，所以按照 DOM 结构从上到下点是正常的，但是如果倒着点就会出现 BUG。</p>

<p>因此，我设计了这样的逻辑：</p>

<p>当我们点击切换搜索引擎时——</p>

<ol>
<li>立即清除之前的计时器；</li>
<li>立即置空 <code>searchEngine</code>（原来的 LOGO 退出 DOM）；</li>

<li><p>延迟 <code>400ms</code> 为 <code>searchEngine</code> 赋新值（新的 LOGO 进入 DOM），并记下计时器的 <code>timerID</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">changeSearchEngine</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">clearTimeout</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">timer</span><span class="p">)</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">searchEngine</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">searchEngine</span> <span class="o">=</span> <span class="nx">value</span>
  <span class="p">}</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>

<h2 id="网页列表">网页列表</h2>

<h3 id="1-如何实现移动端的长按效果">1. 如何实现移动端的长按效果？</h3>

<p>由于网页组件本身就已经比较大了，而且为了通过练习加深对 Vue 的熟悉，我选择将长按效果封装成一个指令来实现，在这里我使用的是全局组件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// longpress.js
</span><span class="c1"></span>    <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
      <span class="nx">install</span><span class="p">(</span><span class="nx">Vue</span><span class="p">,</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">time</span><span class="o">:</span> <span class="mi">1000</span>
      <span class="p">}</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">Vue</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;longpress&#39;</span><span class="p">,</span> <span class="p">{</span>
          <span class="nx">bind</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">binding</span><span class="p">,</span> <span class="nx">vnode</span><span class="p">,</span> <span class="nx">oldVnode</span><span class="p">)</span> <span class="p">{</span>
          <span class="p">}</span>
        <span class="p">}</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>

<span class="c1">// main.js
</span><span class="c1"></span>    <span class="kr">import</span> <span class="nx">LongPress</span> <span class="nx">from</span> <span class="s1">&#39;...&#39;</span>
    <span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">LongPress</span><span class="p">,</span> <span class="p">{</span>
      <span class="nx">time</span><span class="o">:</span> <span class="mi">350</span>
    <span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="c">&lt;!--</span><span class="c"> MyComponent.vue</span><span class="c">--&gt;</span>
    <span class="nt">&lt;template</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">v-longpress=</span><span class="s">&#34;doSomething&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/template&gt;</span></code></pre></td></tr></table>
</div>
</div>
<p>指令的钩子函数包含 <code>el</code>、<code>binding</code>、<code>vnode</code>、<code>oldVnode</code> 这四个参数，指令 <code>v-longpress</code> 的主要部分将会用到 <code>el</code> 和 <code>binding</code>：通过 <code>el</code> 我可以获取到指令绑定的元素，也就是现在正在被长按的元素；通过 <code>binding.value</code> 我可以获取到指令的绑定值，这里 Vue 会自动识别我的绑定值，我们可以让他绑定值为一个回调函数，在指令中来调用这个函数。</p>

<p>在移动端，我们主要依靠 <code>touchstart</code> <code>touchend</code> <code>touchmove</code> <code>touchcancel</code> 来监听触摸状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// pressTimer 变量用来存放计时器的 ID
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">pressTimer</span> <span class="o">=</span> <span class="kc">null</span>

<span class="c1">// longPress 变量用来标记是否是长按
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">longPress</span> <span class="o">=</span> <span class="kc">false</span>

<span class="c1">// handler 函数用来执行回调函数
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">binding</span><span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">el</span><span class="p">)</span>
    <span class="p">}</span>

<span class="c1">// start 用来启动长按事件：options.time 的时间之后触发 handler
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">start</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">(</span><span class="p">)</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;click&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">pressTimer</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">pressTimer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
          <span class="nx">handler</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
          <span class="nx">longPress</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="p">}</span><span class="p">,</span> <span class="nx">options</span><span class="p">.</span><span class="nx">time</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>

<span class="c1">// cancel 用来取消长按事件：清除计时器
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">cancel</span> <span class="o">=</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">pressTimer</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">pressTimer</span><span class="p">)</span>
        <span class="nx">pressTimer</span> <span class="o">=</span> <span class="kc">null</span>
        <span class="nx">longPress</span> <span class="o">=</span> <span class="kc">false</span>
      <span class="p">}</span>
    <span class="p">}</span>

<span class="c1">// 绑定事件
</span><span class="c1"></span><span class="c1">// touchstart 触发长按
</span><span class="c1"></span>    <span class="nx">el</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchstart&#39;</span><span class="p">,</span> <span class="nx">start</span><span class="p">)</span>
<span class="c1">// touchend 时进行判断，是长按还是短按，短按则触发 click 事件
</span><span class="c1"></span>    <span class="nx">el</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchend&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">pressTimer</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nx">longPress</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">el</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="p">)</span>
     <span class="p">}</span>
      <span class="nx">cancel</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
    <span class="p">}</span><span class="p">)</span>
<span class="c1">// touchcancel 和 touchmove 时取消长按事件
</span><span class="c1"></span>    <span class="nx">el</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchcancel&#39;</span><span class="p">,</span><span class="nx">cancel</span><span class="p">)</span>
    <span class="nx">el</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchmove&#39;</span><span class="p">,</span><span class="nx">cancel</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<h3 id="2-如何获取网页的-icon">2. 如何获取网页的 ICON ？</h3>

<p>这一步实际上是在添加网页的对话框组件中实现的，在输入的 URL 进行处理之后，将得到 <code>https://domain</code>，先直接在其后面加上 <code>/favicon.ico</code> 作为其 ICON。在这之前其实也尝试了一些网络上的 API，但是效果其实都不太好，跟直接用 <code>/favicon.ico</code> 获取到的差别不大，并且最终图片也不是很大，不需要清晰度特别高。</p>

<p>然后在网页组件列表组件中直接作为 <code>&lt;img/&gt;</code> 的 <code>src</code> 尝试获取，若失败再通过 <code>@error=&quot;handelIcoError&quot;</code> 来调用函数进行处理，替换成文本。</p>

<h2 id="添加网页对话框">添加网页对话框</h2>

<h3 id="1-如何呼出对话框">1. 如何呼出对话框？</h3>

<p>为了减小组件的逻辑复杂性，我并没有将对话框组件放在网页列表组件之中，而是设计成了第三个平行的组件，当网页列表中的 <strong>'+'</strong> 被点击时，网页列表通过 <code>eventBus</code> 将 <code>addFormOpen</code> 置为 <code>true</code>，从而打开对话框。</p>

<p>我是这样使用 <code>eventBus</code> 的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// App.vue
</span><span class="c1"></span>    <span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>  
    <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
      <span class="nx">data</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
          <span class="nx">eventBus</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span>
            <span class="nx">data</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
              <span class="k">return</span> <span class="p">{</span>
                <span class="nx">addFormOpen</span><span class="o">:</span> <span class="kc">false</span>
              <span class="p">}</span>
            <span class="p">}</span>
          <span class="p">}</span><span class="p">)</span><span class="p">,</span>
        <span class="p">}</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="nx">provide</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
          <span class="nx">eventBus</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">eventBus</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>

<span class="c1">// MyComponent.vue
</span><span class="c1"></span>    <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
      <span class="nx">inject</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;eventBus&#39;</span><span class="p">]</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>当对话框确认提交时，他将 <code>addFormOpen</code> 置为 <code>false</code>，并且将信息通过 <code>eventBus</code> 传给网页列表组件。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/vue/" term="Vue" label="Vue" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E9%A1%B9%E7%9B%AE/" term="项目" label="项目" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">小项目：多人共享博客 - Sharing Garden</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2020-01-15-sharing-garden/" />
            <id>http://hais-teatime.com/post/2020-01-15-sharing-garden/</id>
            <updated>2020-02-05T16:32:53+08:00</updated>
            <published>2020-01-15T09:57:43+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[初学 Vue，一直想给女朋友搞一个博客，不过目前还太会数据库之类的东西，先学习一下多人共享博客的前端页面是如何搭建的，用 Vue 做了一个单页应用。点击可以查看 代码仓库 和 效果预览。]]></summary>
            
                <content type="html"><![CDATA[<p>初学 Vue，一直想给女朋友搞一个博客，不过目前还太会数据库之类的东西，先学习一下多人共享博客的前端页面是如何搭建的，用 Vue 做了一个单页应用。点击可以查看 <a href="https://github.com/Hyuain/kates-blog-client" target="_blank">代码仓库</a> 和 <a href="http://hais-teatime.com/kates-blog-client" target="_blank">效果预览</a>。</p>

<h1 id="项目介绍">项目介绍</h1>

<p>Sharing Garden 一共有这样几个页面：首页、注册页、登录页、我的页面、用户页面、博客详情、新建博客、编辑博客。</p>

<p>用户可以查看别人的文章、用户信息，或者注册账号之后自己以 markdown 的语法发布或修改文章，也可以查看自己的主页。</p>

<p>项目使用 Vue-cli 进行搭建，通过 Vue-Router 来进行前端页面的跳转，使用 Vuex 存储用户数据，使用 axios 发送请求，选用 element-ui 作为 UI 框架。</p>

<h1 id="发送请求">发送请求</h1>

<p>现在大多是使用 axios 来发送 AJAX 请求，本项目也是如此，同时为了再进一步熟悉 axios，我对 axios 文档进行了<a href="https://hais-teatime.com/hais-notebook/2020/02/02/2020-02-02-Tools-axios/" target="_blank">翻译</a>。原生的 axios 已经能够满足我们的大部分需求了，但是通常我们需要对其进行二次封装来让我们的其他组件使用起来更加方便。</p>

<p>第一层封装：</p>

<p>首先根据前后端约定的基本信息设置 <code>defaults</code>，然后统一我们在项目中传入 <code>config</code> 的格式，最后统一错误处理方式，因为我们需要处理服务器主动传回的错误和请求本身导致的错误。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kr">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="p">(</span><span class="p">...</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="c1">// ...
</span><span class="c1"></span>      <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">axios</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="p">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="s1">&#39;ok&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">resolve</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">Message</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">msg</span><span class="p">)</span>
            <span class="nx">reject</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
          <span class="nx">Message</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;网络异常&#39;</span><span class="p">)</span>
          <span class="nx">reject</span><span class="p">(</span><span class="p">{</span><span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;网络异常&#39;</span><span class="p">}</span><span class="p">)</span>
        <span class="p">}</span><span class="p">)</span>
      <span class="p">}</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>第二层封装：</p>

<p>服务器端的 API 有博客部分的 <code>/blog</code> 和用户部分的 <code>/auth</code>，同时我们数据也准备按照这两类来进行处理，所以我们最好对 axios 再进行一层封装，方便以后请求数据。比如在博客部分封装一个获取博客详情的方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kr">const</span> <span class="nx">URL</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">GET_DETAIL</span><span class="o">:</span> <span class="s1">&#39;/blog/:blogId&#39;</span><span class="p">,</span>
    <span class="p">}</span>
    
    <span class="kr">const</span> <span class="nx">blog</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">getDetail</span><span class="p">(</span><span class="p">{</span><span class="nx">blogId</span><span class="p">}</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">request</span><span class="p">(</span><span class="nx">URL</span><span class="p">.</span><span class="nx">GET_DETAIL</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;:blogId&#39;</span><span class="p">,</span> <span class="nx">blogId</span><span class="p">)</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">// 之后可以这样调用
</span><span class="c1"></span>    <span class="nx">blog</span><span class="p">.</span><span class="nx">getDetail</span><span class="p">(</span><span class="p">{</span><span class="nx">blogId</span><span class="o">:</span> <span class="nx">anyBlogId</span><span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="p">=&gt;</span> <span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="p">=&gt;</span> <span class="p">{</span><span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<h1 id="页眉和页尾">页眉和页尾</h1>

<p>这次项目是一个简单的单页应用，几个页面的页眉和页尾是差不多的，所以将其抽为 <code>Header</code> 和 <code>Footer</code> 组件，在这里只提一下 <code>Header</code> 组件。</p>

<p><code>Header</code> 在登录和登录的状态下有所不同，因此在加载页面时我们需要对登录状态进行判断，这里我是通过 <code>dispatch</code> 一个 <code>action</code> 来修改登录状态，然后通过 <code>getter</code> 获取到当前的登录状态。</p>

<h1 id="注册与登录页面">注册与登录页面</h1>

<p>同样的，注册与登录都是 <code>dispatch</code> 了一个 <code>action</code>，在这两个 <code>action</code> 中，他们都使用之前封装好的 axios API 向服务器发送请求，在拿到结果之后修改用户信息和登录状态。</p>

<h1 id="用户和我的页面">用户和我的页面</h1>

<p>这两个页面也是比较类似的，我们可以点击用户头像进入用户页面，点击自己的头像进入我的页面。</p>

<p>在用户页面通过 <code>$route.params</code> 获取到 <code>userId</code>，然后直接发送请求获取到博客数据和博主的用户数据，这些数据我没有用 Vuex 来存储，因为博客数据更新比较频繁，并且并不需要多个组件共享这个数据，通常只有几个页面需要，而且他们需要的博客数据的内容和形式也不尽相同。</p>

<p>在我的页面就可以直接使用在 <code>store</code> 里面存好的 <code>userInfo</code>，当然博客数据还是要重新请求。通过删除功能可以向服务器发送请求删除博客，删除完成之后需要在本地更新一下博客列表。使用编辑功能将跳转到编辑页面。</p>

<h1 id="创建与编辑页面">创建与编辑页面</h1>

<p>在创建博客的页面直接向服务器发送请求，然后获取到创建的结果，并通过 <code>router.push</code> 跳转到创建好的博客详情页。编辑页面则要先通过 <code>$route.params</code> 获取到当前的 <code>blogId</code>，并发送请求获取到博客原来的内容。</p>

<h1 id="博客详情页面">博客详情页面</h1>

<p>博客详情部分主要就是需要将博客内容从 markdown 转换为 HTML 标签，并且给予合适的样式呈现，这里我使用了 <code>marked</code>，并且同时使用了 <code>DOMPurify</code> 来防止 XSS 攻击。</p>

<h1 id="其他问题">其他问题</h1>

<p>另外我们需要关注的一点是，如果我们在没有登录的时候，就不允许访问我的、创建与编辑博客的页面，并且访问上述页面会自动跳转到登录页面，这个时候我们就需要使用到路由元信息和导航守卫。</p>

<p>下面这段代码将在一个导航触发的时候调用，当发现 <code>meta</code> 字段中有 <code>requiresAuth</code> 之后就会检查登录状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="nx">router</span><span class="p">.</span><span class="nx">beforeEach</span><span class="p">(</span><span class="p">(</span><span class="nx">to</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">to</span><span class="p">.</span><span class="nx">matched</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">record</span> <span class="p">=&gt;</span> <span class="nx">record</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">requiresAuth</span><span class="p">)</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;checkLoginStatus&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">loginStatus</span> <span class="p">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">loginStatus</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">next</span><span class="p">(</span><span class="p">{</span>
              <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/login&#39;</span><span class="p">,</span>
              <span class="nx">query</span><span class="o">:</span> <span class="p">{</span><span class="nx">redirect</span><span class="o">:</span> <span class="nx">to</span><span class="p">.</span><span class="nx">fullPath</span><span class="p">}</span>
            <span class="p">}</span><span class="p">)</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">next</span><span class="p">(</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span><span class="p">)</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">next</span><span class="p">(</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/vue/" term="Vue" label="Vue" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E9%A1%B9%E7%9B%AE/" term="项目" label="项目" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">理解 Vue 的 data 与 响应式</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-25-vue-data/" />
            <id>http://hais-teatime.com/post/2019-12-25-vue-data/</id>
            <updated>2020-01-31T20:21:12+08:00</updated>
            <published>2019-12-25T16:30:24+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[聊聊 options 中的 data。]]></summary>
            
                <content type="html"><![CDATA[<p>聊聊 options 中的 data。</p>

<hr />

<h1 id="key-points">Key Points</h1>

<ol>
<li>Vue 的 data 是响应式的，如果改变 data，那么 UI 就会刷新</li>
<li>Vue 2 通过 Object.defineProperty 实现数据响应式</li>
<li>Vue 2 会将原来的属性变为 getter-setter 属性，并创建一个代理来操纵数据</li>
</ol>

<hr />

<blockquote>
<p>可参考：
<a href="https://cn.vuejs.org/v2/api/#data" target="_blank">Vue 文档 - data</a>；
<a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank">Vue 文档 - 深入解响应式原理</a>；
<a href="https://cn.vuejs.org/v2/guide/list.html#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" target="_blank">Vue 文档 - 列表渲染</a></p>
</blockquote>

<h1 id="getter-和-setter">getter 和 setter</h1>

<p>由于 getter 和 setter 是 Vue 数据响应式中运用到的非常重要的一环，我们得先把这两个东西搞清楚。</p>

<p>通过下面这段代码，我们可以很清楚地了解到 get 和 set 其实就是两个函数：get 返回了一个拼凑的字符串，set 则修改了 person 内部的 firstName 和 lastName 两个真实存在的属性——但是这两个函数的定义和调用稍稍有点特别。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">firstName</span><span class="o">:</span> <span class="s1">&#39;Harvey&#39;</span><span class="p">,</span>
      <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;Zhang&#39;</span><span class="p">,</span>
      <span class="nx">get</span> <span class="nx">name</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// getter
</span><span class="c1"></span>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="nx">set</span> <span class="nx">name</span><span class="p">(</span><span class="nx">newName</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// setter
</span><span class="c1"></span>        <span class="nx">newName</span> <span class="o">=</span> <span class="nx">newName</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">newName</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> 
        <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">newName</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
      <span class="p">}</span><span class="p">,</span> 
      <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span>
    <span class="p">}</span>
    
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;name： &#39;</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// 这就是 getter，我们在调用的时候不需要再使用 obj.name()
</span><span class="c1"></span>    <span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Kate Wu&#39;</span> <span class="c1">// 这就是 setter，用 = &#39;xxx&#39; 触发 set 函数
</span></code></pre></td></tr></table>
</div>
</div>
<p>我们可以看到 <code>person</code> 中的 <code>name</code> 表示得有点特别，事实上他并不是一个真实存在的属性。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="p">{</span>
      <span class="nx">name</span><span class="o">:</span> <span class="p">(</span><span class="p">...</span><span class="p">)</span><span class="p">,</span> <span class="c1">// name 不是一个真实的属性，但我们确实可以读写 name
</span><span class="c1"></span>      <span class="nx">firstName</span><span class="o">:</span> <span class="s2">&#34;Kate&#34;</span><span class="p">,</span>
      <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&#34;Wu&#34;</span><span class="p">,</span>
      <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
      <span class="nx">get</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">name</span><span class="p">(</span><span class="p">)</span><span class="p">,</span>
      <span class="nx">set</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">name</span><span class="p">(</span><span class="nx">newName</span><span class="p">)</span><span class="p">,</span>
      <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<h1 id="object-defineproperty">Object.defineProperty</h1>

<p>我们可以使用 <code>Object.defineProperty()</code> 方法来给对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象，详细的用法可以参照 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty]" target="_blank">MDN 文档</a>，我们这里只介绍影响后续理解的部分。</p>

<p>基本语法是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">prop</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span>
<span class="c1">// Object.defineProperty
</span><span class="c1"></span><span class="c1">// (要在上面定义属性的对象, 要定义或修改的属性的名称, 将被定义或修改的属性描述符)
</span></code></pre></td></tr></table>
</div>
</div>
<p>这里需要介绍一个概念—— <strong>描述符</strong>。目前我们的描述符有两种：<strong>数据描述符</strong> 和 <strong>存取描述符</strong>。</p>

<ul>
<li><p><strong>数据描述符</strong> 是一个具有值的属性，该值可能是可写的，也可能不是可写的——也就是类似于我们常见的那种普通属性。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span>
    
<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">value</span><span class="o">:</span><span class="mi">0</span>
  <span class="c1">// 数据描述符，这里的意思是：给 data 定义一个新属性 n，他的值为 0
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>

<li><p><strong>存取描述符</strong> 是由 getter-setter 函数对描述的属性——也就是上文说的并不真实存在的属性。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span>
    
<span class="nx">data</span><span class="p">.</span><span class="nx">_n</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">// _n 用来存实际上不存在的 n 的值
</span><span class="c1"></span>    
<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="p">{</span> <span class="c1">// getter-setter 函数是存取描述符，可以用来在存取的时候做校验
</span><span class="c1"></span>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_n</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span><span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_n</span> <span class="o">=</span> <span class="nx">value</span>
  <span class="p">}</span>
<span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>

<p>至此，我们学会了使用 getter-setter 来为函数新增属性，但是我们可能还需要借助代理，并且监听原来的属性来防止直接对 <code>this._n</code> 进行篡改。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">let</span> <span class="nx">myData</span> <span class="o">=</span> <span class="p">{</span><span class="nx">n</span><span class="o">:</span> <span class="mi">0</span><span class="p">}</span>
    <span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">proxy</span><span class="p">(</span><span class="p">{</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">myData</span> <span class="p">}</span><span class="p">)</span> <span class="c1">// data 即为 myData 代理
</span><span class="c1"></span>    
    <span class="kd">function</span> <span class="nx">proxy</span><span class="p">(</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 解构赋值，data 即为 myData，即为 {n: 0}
</span><span class="c1"></span>      <span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="c1">// 存下 n 原来的值
</span><span class="c1"></span>      <span class="k">delete</span> <span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="c1">// 删除掉 data 中原来的 n，这句可以不用写，因为下面声明新的虚拟 n 的时候会删掉之前的
</span><span class="c1"></span>      <span class="c1">// 声明一个虚拟的 n，放到 myData 上面，防止直接修改 myData（监听 myData）
</span><span class="c1"></span>      <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="p">{</span>
        <span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
          <span class="k">return</span> <span class="nx">value</span>
        <span class="p">}</span><span class="p">,</span>
        <span class="nx">set</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span><span class="p">{</span>
          <span class="k">if</span><span class="p">(</span><span class="nx">newValue</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span>
          <span class="nx">value</span> <span class="o">=</span> <span class="nx">newValue</span>
        <span class="p">}</span>
      <span class="p">}</span><span class="p">)</span>
      <span class="c1">// 声明代理
</span><span class="c1"></span>      <span class="kr">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span>
      <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="p">{</span>
        <span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
          <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">n</span>
        <span class="p">}</span>
        <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span><span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span>
          <span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="nx">value</span>
        <span class="p">}</span>
      <span class="p">}</span><span class="p">)</span>
      <span class="k">return</span> <span class="nx">obj</span> <span class="c1">// obj 就是代理
</span><span class="c1"></span>    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<h1 id="vue-中是怎么做的">Vue 中是怎么做的</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">myData</span> <span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>从原理上讲其实是差不多的，Vue 拿到我们传入的 myData 之后，做了这么几件事情：</p>

<ol>
<li>让 <code>vm</code> 成为 <code>myData</code> 的代理，以后我们用 <code>vm.xxx</code> 或者 <code>this.xxx</code> 就可以直接操作原来在 <code>myData</code> 中的数据了；</li>
<li>删除掉 <code>myData</code> 上原来的所有属性，并改成 getter-setter 属性，防止 myData 上面的属性被越过 <code>vm</code> 直接篡改；</li>
<li>这么做的好处是可以让 <code>vm</code> 知道属性变化之后触发 <code>render</code></li>
</ol>

<p><img src="https://cn.vuejs.org/images/data.png" alt="Vue-data" /></p>

<h2 id="问题">问题</h2>

<p>事实上因为 <code>Object.defineProperty()</code> 其实是有一些问题的，因此 Vue 中也会存在这些问题，尽管 Vue 已经对他们进行了处理，但仍然应当注意。</p>

<ul>
<li><p>如果最开始属性不存在，后来想要加属性，那么新加的属性就没有被 getter-setter 化，因此就不具备响应式。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="p">{</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span>
  <span class="p">}</span>
<span class="p">}</span><span class="p">)</span>
    
<span class="nx">vm</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span>
<span class="c1">// vm.b 不是响应式的
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>

<p>解决方法：要么最开始就把所有的属性名写好，要么就使用 <code>Vue.set(this.obj, 'key', 'value')</code> 或者 <code>vm.$set(this.obj, 'key', value)</code> 来添加新的属性。</p>

<ul>
<li>对于数组来说，使用 <code>arr[index] = value</code> 来添加值将同样不会被检测到。</li>
</ul>

<p>解决办法：Vue 实际上已经给我们的数组加上了一层新的原型，并提供了 <code>push</code> <code>pop</code> <code>shift</code> <code>unshift</code> <code>splice</code> <code>sort</code> <code>reverse</code> 这个 7 个常用的 API。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/vue/" term="Vue" label="Vue" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">再看 this</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-24-this/" />
            <id>http://hais-teatime.com/post/2019-12-24-this/</id>
            <updated>2020-02-05T10:18:58+08:00</updated>
            <published>2019-12-24T18:27:04+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[学完了整个 JavaScript 基础篇章之后，今天重新总结复习一下 this 的用法。]]></summary>
            
                <content type="html"><![CDATA[<p>学完了整个 JavaScript 基础篇章之后，今天重新总结复习一下 this 的用法。</p>

<p>除了绕晕新手以外，<code>this</code> 还是有其存在的价值，如果没有 <code>this</code>，那么我们在写一个构造函数的时候，就不知道如何代指我们即将 <code>new</code> 出来的对象（因为事实上这个时候他并没有名字）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
  <span class="o">?</span><span class="o">?</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
  <span class="o">?</span><span class="o">?</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>但是实际上 <code>this</code> 却带来了很多副作用以及意想不到的用法，因此下面就来总结讨论一下 this 的值。</p>

<hr />

<h1 id="key-points">Key Points</h1>

<ol>
<li><code>this</code> 是为了解决 <strong>一个函数获取一个对象的引用</strong> 这个问题</li>
<li><code>this</code> 必须在函数体的内部才有意义，否则等于 <code>window</code></li>
<li>可以对函数内的 <code>this</code> 进行 <strong>隐式指定</strong> 和 <strong>显式指定</strong></li>
<li>箭头函数 <strong>没有</strong> <code>this</code></li>
<li><code>new</code> 之后发生的 4 件事情</li>
</ol>

<hr />

<h1 id="函数体外部的-this">函数体外部的 this</h1>

<blockquote>
<p><code>this</code> 必须在函数体的内部才有意义</p>
</blockquote>

<p>如果 <code>this</code> 不在任何函数体内部的话，他的值是全局对象，当然在浏览器中就是 <code>window</code>，因此如果不在函数体内部的话，就无从讨论 <code>this</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="s1">&#39;Hi&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// &#39;Hi&#39;
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// &#39;Hi&#39;
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// &#39;Hi&#39;
</span><span class="c1"></span><span class="c1">// window === this
</span><span class="c1"></span><span class="c1">// window.a === this.a === a
</span></code></pre></td></tr></table>
</div>
</div>
<p>注意了！这里说的函数体内部要与函数的调用区分开来！最显然的是上面的 <code>console.log(this.a)</code> 的括号中的 <code>this</code> <strong>并不是函数体内部的 <code>this</code></strong>，所以他也是没有意义的。</p>

<h1 id="函数体内部的-this">函数体内部的 this</h1>

<blockquote>
<p>函数内部 <code>this</code> 的值取决于函数被调用的方式</p>
</blockquote>

<p>我们有两种方式可以调用函数并指定 this 的值：<strong>隐式指定</strong> 和 <strong>显式指定</strong>。</p>

<p>举个栗子，我们有这样一个对象：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">harvey</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;harvey&#39;</span><span class="p">,</span>
  <span class="nx">age</span><span class="o">:</span> <span class="mi">22</span><span class="p">,</span>
  <span class="nx">greeting</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">Hello, I am </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>然后想要调用其中的 <code>greeting()</code> 方法，我们可以 <strong>隐式指定</strong> <code>this</code> 的值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting</span><span class="p">(</span><span class="p">)</span>
<span class="c1">// &#39;Hello, I am harvey&#39;
</span><span class="c1"></span><span class="c1">// JS 自动指定 greeting 函数里面的 this 为 . 前面的 harvey 
</span></code></pre></td></tr></table>
</div>
</div>
<p>我们也可以 <strong>显式指定</strong> <code>this</code> 的值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">harvey</span><span class="p">)</span>
<span class="c1">// &#39;Hello, I am harvey&#39;
</span><span class="c1"></span><span class="c1">// 通过 call 指定 greeting 中的 this 是 harvey
</span></code></pre></td></tr></table>
</div>
</div>
<p>看起来好像没什么区别？不，区别大了。</p>

<p>让我们再定义一个对象，就能看出其中的端倪。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">kate</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;kate&#39;</span><span class="p">,</span>
  <span class="nx">age</span><span class="o">:</span> <span class="mi">22</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>我们现在可以这样调用 <code>harvey</code> 的 <code>greeting</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">kate</span><span class="p">)</span>
<span class="c1">// &#39;Hello, I am kate&#39;
</span><span class="c1"></span><span class="c1">// 通过 call 指定 greeting 中的 this 是 kate
</span></code></pre></td></tr></table>
</div>
</div>
<h1 id="箭头函数的-this">箭头函数的 this</h1>

<blockquote>
<p>箭头函数没有 <code>this</code></p>
</blockquote>

<p>如果我们把上面讨论的栗子中的函数改为箭头函数，那么他里面的 <code>this</code> 也就没有意义了，他的 <code>this</code> 具体的取值得向上一个函数找：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">harvey</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;harvey&#39;</span><span class="p">,</span>
  <span class="nx">age</span><span class="o">:</span> <span class="mi">22</span><span class="p">,</span>
  <span class="nx">greeting</span><span class="o">:</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">Hello, I am </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">greeting2</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">greeting3</span> <span class="o">=</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">Hello, I am </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">greeting3</span><span class="p">(</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting</span><span class="p">(</span><span class="p">)</span>
<span class="c1">// Hello, I am 
</span><span class="c1"></span><span class="c1">// window
</span><span class="c1"></span><span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting2</span><span class="p">(</span><span class="p">)</span>
<span class="c1">// Hello, I am harvey
</span><span class="c1"></span><span class="c1">// harvey
</span></code></pre></td></tr></table>
</div>
</div>
<p>就算我们用 <code>call</code> 也无法指定 <code>this</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">harvey</span><span class="p">)</span>
<span class="c1">// Hello, I am 
</span><span class="c1"></span><span class="c1">// window
</span></code></pre></td></tr></table>
</div>
</div>
<h1 id="new-运算符">new 运算符</h1>

<p>在我们使用 <code>new</code> 去创建新对象的时候，系统自动帮我们做了 4 件事情</p>

<ul>
<li>自动创建空对象</li>
<li>自动为空对象关联原型，原型的地址为 <code>X.prototype</code></li>
<li>自动将空对象作为 <code>this</code> 关键字运行构造函数</li>

<li><p>自动 <code>return this</code>，也就是说可以接着写 <code>new X().getName()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span><span class="p">{</span>
<span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
<span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span>
<span class="p">}</span>
<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">Hello, I am </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">harvey</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;harvey&#39;</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span>
<span class="c1">// 这里自动将 harvey 作为 this 运行了构造函数
</span><span class="c1"></span>

<span class="nx">harvey</span><span class="p">.</span><span class="nx">greeting</span><span class="p">(</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>

<p>这里我自己尝试模拟了一下一个功能类似于 <code>new</code> 的函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 自己实现一个类似 new 的函数
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">X</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">+</span> <span class="mi">1</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">X</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

<span class="kd">function</span> <span class="nx">NEW</span><span class="p">(</span><span class="nx">fun</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">)</span><span class="p">{</span>
    <span class="kd">let</span> <span class="nx">newObj</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span>
    <span class="nx">newObj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">fun</span><span class="p">.</span><span class="nx">prototype</span>
    <span class="nx">fun</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">newObj</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">newObj</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">z</span> <span class="o">=</span> <span class="nx">NEW</span><span class="p">(</span><span class="nx">X</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>好了，<code>this</code> 的讨论结束，理解的关键就在于我们最开始提到的 5 点 Key Points。</p>

<hr />

<h1 id="再看看网上总结的-this">再看看网上总结的 this</h1>

<p>留坑，以后再总结。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">浅析 MVC</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-22-mvc/" />
            <id>http://hais-teatime.com/post/2019-12-22-mvc/</id>
            <updated>2020-02-12T09:38:12+08:00</updated>
            <published>2019-12-22T12:32:38+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[如果要说我目前在入门阶段遇到的几个让我最没自信的家伙，一个要数算法，然后就是 MVC 了。所以今天就简单写一下自己的一些思考。]]></summary>
            
                <content type="html"><![CDATA[<p>如果要说我目前在入门阶段遇到的几个让我最没自信的家伙，一个要数算法，然后就是 MVC 了。所以今天就简单写一下自己的一些思考。</p>

<p>可以先看一下 <a href="https://efe.baidu.com/blog/mvc-deformation/" target="_blank">这篇文章</a></p>

<h1 id="为什么要有设计模式">为什么要有设计模式？</h1>

<p>Dry 原则：Don't Repeat Yourself</p>

<ul>
<li>代码级别的重复（相同的三行代码写了两遍）</li>
<li>页面级别（类似的页面做了十遍）</li>
<li>所有的页面都可以使用 MVC 来优化代码结构（万金油）</li>
</ul>

<h1 id="抽象思维">抽象思维</h1>

<ul>
<li><strong>最小知识原则</strong>

<ul>
<li>引入一个模块需要 html css js</li>
<li>引入一个模块需要 html js</li>
<li>引入一个模块需要 js</li>
<li>需要知道的知识越来越好，模块化为这一点奠定了基础</li>
<li>代价：会让页面最开始是空白的，没有内容和样式

<ul>
<li>loading 图片、骨架、占位内容、SSR 技术（服务器端渲染）</li>
</ul></li>
</ul></li>
<li><strong>以不变应万变</strong>

<ul>
<li>每一个模块都可以用 M + V + C 搞定，但有时候会多余一些用不到的代码，有时候遇到特殊情况不知道怎么变通</li>
</ul></li>
<li><strong>表驱动编程</strong>

<ul>
<li>当看到大批类似但不重复的代码，<strong>眯起眼睛，看哪些数据才是重要的</strong></li>
<li>把<strong>重要的数据做成哈希表</strong>，代码会变简单</li>
</ul></li>
<li><strong>事不过三</strong>

<ul>
<li>同样的代码写了三遍，就抽象成函数</li>
<li>同样属性写了三遍，就做成共用属性（原型或类）</li>
<li>同样的原型写了三遍，就应该用继承</li>
</ul></li>
<li><strong>俯瞰全局</strong>

<ul>
<li>eventBus</li>
</ul></li>
<li><strong>view = render(data)</strong>

<ul>
<li>比起操作 DOM 对象，直接 render 简单多了，只要改变 data，就可以得到对应的 view</li>
<li>数据永远从 JS（数据）流向页面（视图）</li>
<li>代价：浪费性能

<ul>
<li>虚拟 DOM 让 render 只更新该更新的地方</li>
</ul></li>
</ul></li>
<li><strong>解耦</strong></li>
</ul>

<h1 id="mvc">MVC</h1>

<p>MVC 是一种有名的设计模式，我们可以把一个模块用三个对象表示出来，这三个对象就是 M、V 和 C：</p>

<blockquote>
<p><strong>M</strong> - <strong>Model</strong>，数据模型，负责操作所有数据</p>

<p><strong>V</strong> - <strong>View</strong>，视图，负责所有 UI 界面</p>

<p><strong>C</strong> - <strong>Controller</strong>，控制器，负责其他</p>
</blockquote>

<h2 id="model">Model</h2>

<p>我们可以用伪代码来尝试表示 Model 对象：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">    M = {
      data: {
        key: value,
      },
      methods: {
        function Create: add data,
        function Remove: delete data,
        function Update: edit data,
        function Get: print data,
      }
    }</code></pre></td></tr></table>
</div>
</div>
<p>他是一个专门用来存放数据的对象，并且可以提供一系列对数据进行操纵的 API，比如 Create、Remove、Update、Get 等。</p>

<h2 id="view">View</h2>

<p>同样的，我们可以来表示一下 View 对象：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">    V = {
      element,
      innerHTML,
      methods: {
        function Render: reload innerHTML,
        Operate: {
          function Create: create newElement,
          function Remove: remove innerElement,
          function Edit: edit innerElement,
          function Find: get innerElement,
        }
      }
    }</code></pre></td></tr></table>
</div>
</div>
<p>我们可以在 View 指定一个元素 element，可以对他内部的 HTML 代码进行修改和重载，同时也可以对其内部的元素进行增删改查等操作。</p>

<h2 id="control">Control</h2>

<p>对于 Control 部分的伪代码，我们也许可以这样写：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">    C = {
      function Init: init M V C,
      function BindEvents: el.on(&#39;eventName&#39;, event),
      events: {
        function A: Update(data),
        function B: Render(html)
      }
    }</code></pre></td></tr></table>
</div>
</div>
<p>在 Control 中，我们可以完成初始化操作，可以为元素绑定事件，并书写事件方法，用来触发 M 或 V 的更改。</p>

<p>当然，对 MVC 的理解不同的人可能有不同的想法，作为初学者我只是简单理解了一下。比如有时候，我们对 C 的界定可能并不是那么明显——它既可以操作视图，又可以操作数据，那么为什么不把他就放在 V 或者 M 中呢？</p>

<h1 id="eventbus">EventBus</h1>

<p>个人认为 EventBus 的出现主要是由于模块化和 MVC 的推进。前文也说了，在一个模块中，我们可以把所有的东西都分成 M V C 这三个对象来表示，这样虽然我们可以用统一形式的代码来表示几乎所有的情况，但同时也会带来一些问题。</p>

<p>首先，我们可以看看我们原来修改元素内容的方式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">    function X: 
      if event.status == triggered:
        data = element.getData();
        newData = data.edit();
        element.update(newData);</code></pre></td></tr></table>
</div>
</div>
<p>是一个非常自然的线性关系，当事件被触发时，直接修改 DOM 来改变元素内容，DOM 操作和数据是混在一起的，我们并没有在代码中单独保存数据。</p>

<p>而使用 MVC 之后，我们修改元素内容的方式变成了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">    M = {
      data,
      function Update(data):
        edit data;
        eventBus.Trigger(&#39;data-updated&#39;)
    }
    
    V = {
      element,
      innerHTML,
      eventBus.On(&#39;data-updated&#39;, run Render(data))
      function Render(data): reload innerHTML
    }
    
    C = {
      function X:
        if event.status === triggered:
          M.Update(data)
    }</code></pre></td></tr></table>
</div>
</div>
<p>看起来稍稍有些复杂：</p>

<p>当事件被触发之后，C 中的事件绑定函数会调用 M.Update 方法来操纵 data，</p>

<blockquote>
<p>但是负责视图的 V 此时并不知道事件已经触发，因此我们需要借助一个 “事件总线 EventBus” 来帮助我们完成事件从 M -&gt; V 传递的这样一个过程，</p>
</blockquote>

<p>M 更新完 data 之后触发 eventBus，</p>

<p>V 监听 eventBus，知道 M 已经更新完 data 了，然后调用 V.Render 方法更新视图。</p>

<p>当然除了帮助在 M V C 三个对象之间传递事件以外，eventBus 还可以帮助在模块之间传递事件。</p>

<p>下面用伪代码给出了一个 EventBus 常用 API 示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">    EventBus: {
      function Trigger,
      function On,
      function Off
    }</code></pre></td></tr></table>
</div>
</div>
<h1 id="表驱动编程">表驱动编程</h1>

<blockquote>
<p>表驱动法，又称之为表驱动、表驱动方法。 “表”是几乎所有数据结构课本都要讨论的非常有用的数据结构。表驱动方法出于特定的目的来使用表，程序员们经常谈到“表驱动”方法，但是课本中却从未提到过什么是&quot;表驱动&quot;方法。表驱动方法是一种使你可以在表中查找信息，而不必用很多的逻辑语句（ if 或 case ）来把它们找出来的方法。事实上，任何信息都可以通过表来挑选。在简单的情况下，逻辑语句往往更简单而且更直接。但随着逻辑链的复杂，表就变得越来越富有吸引力了。</p>
</blockquote>

<p>还是用伪代码来表示一下，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">    Map = [
      key1: value1,
      key2: value2,
      key3: value3,
      key4: value4
    ]
    
    // 可以用上面这个表来简化我们的 if 语句，这样我们就不用写很多 if 了：
    
    if key in Map: Map[key]
    
    // 也可以用上面这个表来简化函数的声明等：
    
    for key in Map:
      function key: Map[key]</code></pre></td></tr></table>
</div>
</div>
<h1 id="模块化">模块化</h1>

<p>我对模块化的理解其实很简单：</p>

<p>首先，模块化可以把不同的功能分成不同的模块，模块之间的瓜葛要尽可能小，最好每个模块在不知道外部情况的时候也可以正常工作，这样我们之后维护代码只需要关注特定模块的部分即可；</p>

<p>其次，我们可以将 M V C 抽象为三个模块，做成 M 模块、V 模块、C 模块，这三个模块不需要关注具体的细节，只需要实现对应基本的、通用的功能，然后把 M V C 和每一个实现具体功能、操纵具体元素的模块分开，这样如果我们要对 M V C 进行统一的修改，就不需要深入每一个具体功能之中了。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">再看 JavaScript 继承</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-21-js-inheritance/" />
            <id>http://hais-teatime.com/post/2019-12-21-js-inheritance/</id>
            <updated>2020-02-12T09:39:12+08:00</updated>
            <published>2019-12-21T11:47:50+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[学完了整个 JavaScript 基础篇章之后，今天又看了一下所谓的继承，发现我之前理解的继承跟大家一直提到的那个继承不是一回事，于是写一篇文章记录一下。
本文将着重讨论基于原型的继承，也会简单写一下如何用 class 继承。]]></summary>
            
                <content type="html"><![CDATA[<p>学完了整个 JavaScript 基础篇章之后，今天又看了一下所谓的继承，发现我之前理解的继承跟大家一直提到的那个继承不是一回事，于是写一篇文章记录一下。</p>

<p>本文将着重讨论基于原型的继承，也会简单写一下如何用 class 继承。</p>

<hr />

<h1 id="key-points">Key Points</h1>

<ul>
<li><p>在 JavaScript 中，<strong>函数</strong> <code>Function</code> 也是一种 <strong>对象</strong> <code>Object</code></p></li>

<li><p>关于函数</p>

<ol>
<li>所有函数都自带 <code>prototype</code></li>
<li><code>prototype</code> 中自带 <code>constructor</code></li>
<li><code>constructor</code> 里面的东西就是函数的内容</li>
<li>构造函数首字母大写（约定俗成）</li>
</ol></li>

<li><p><code>对象.__proto__ === 其构造函数.prototype</code></p></li>
</ul>

<hr />

<p>理解一下上面几句话。</p>

<p>首先，关于函数也是一种对象这个说法，我们在后面会有相关的说明；</p>

<p>其次是关于函数的几个描述，我们可以做几个实验来验证一下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
    <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Harvey&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="s1">&#39;22&#39;</span><span class="p">}</span>
    <span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span> <span class="p">}</span>
    
    <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
    <span class="cm">/*
</span><span class="cm">    {
</span><span class="cm">      0: 1,
</span><span class="cm">      1: 2,
</span><span class="cm">      2: 3,
</span><span class="cm">      length: 3,
</span><span class="cm">      __proto__: Array(0)
</span><span class="cm">    }
</span><span class="cm">    */</span>
    
    <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
    <span class="cm">/*
</span><span class="cm">    {
</span><span class="cm">      name: &#34;Harvey&#34;,
</span><span class="cm">      age: &#34;22&#34;,
</span><span class="cm">      __proto__: Object
</span><span class="cm">    }
</span><span class="cm">    */</span>
    
    <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span>
    <span class="cm">/*
</span><span class="cm">    {
</span><span class="cm">      length: 0,
</span><span class="cm">      name: &#34;fn&#34;,
</span><span class="cm">      arguments: null,
</span><span class="cm">      caller: null,
</span><span class="cm">      prototype: {
</span><span class="cm">        constructor: ƒ ()
</span><span class="cm">        __proto__: Object
</span><span class="cm">      }
</span><span class="cm">      __proto__: ƒ ()
</span><span class="cm">    }
</span><span class="cm">    */</span>
    
    <span class="nx">fn</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">fn</span> <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div>
<p>可以很清楚的看到，比起别的对象，函数确实是比较特别的，他天生就带有一个 <code>prototype</code> 属性，而且 <code>prototype</code> 中的 <code>constructor</code> 就是这个函数本身。</p>

<p>我们也可以再验证一下最后一句话：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="p">}</span>
    <span class="kd">let</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span>
    <span class="nx">me</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div>
<p>知道了这样几个前置的知识，我们就可以往下讨论了。</p>

<h1 id="原型链">原型链</h1>

<p>原型链的精髓其实就是刚才已经提到过的一句话：</p>

<blockquote>
<p><code>对象.__proto__ === 其构造函数.prototype</code></p>
</blockquote>

<h2 id="普通对象的原型链">普通对象的原型链</h2>

<blockquote>
<p><strong>普通对象的原型是 Object</strong></p>
</blockquote>

<p>这句话要从以下几点来理解：</p>

<ol>
<li>创建一个对象可以按这种方式写： <code>let obj = new Object({ name: 'Harvey', age: '22' })</code></li>
<li>Object 实际上是一个构造函数，他构造了 obj</li>
<li><code>obj.__proto__ === Object.prototype</code></li>
</ol>

<p>因此我们可以简单表示一下这个普通对象的原型链：</p>

<p><code>obj -&gt; Object.prototype</code></p>

<h2 id="数组的原型链">数组的原型链</h2>

<blockquote>
<p><strong>数组的原型是 Array</strong></p>
</blockquote>

<p>这句话要从以下几点来理解：</p>

<ol>
<li>创建一个数组可以按这种方式写： <code>let arr = new Array(1, 2, 3)</code></li>
<li>Array 实际上是一个构造函数，他构造了 arr</li>
<li><code>arr.__proto__ === Array.prototype</code></li>
</ol>

<p>事实上，我们还会发现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true
</span><span class="c1"></span>    <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div>
<p>也就是说，一个数组的原型链要稍微复杂一些：</p>

<p><code>arr -&gt; Array.prototype -&gt; Object.prototype</code></p>

<p>等等，这意味着 <code>Object.prototype</code> 构造了 <code>Array.prototype</code>？这个问题我们稍后再谈。</p>

<h2 id="函数的原型">函数的原型</h2>

<blockquote>
<p><strong>函数的原型是 Function</strong></p>
</blockquote>

<p>这句话要从以下几点来理解：</p>

<ol>
<li>创建一个数组可以按这种方式写： <code>let fn = new Function( (), { console.log('hi') } )</code></li>
<li>Function 实际上是一个构造函数，他构造了 fn</li>
<li><code>fn.__proto__ === Function.prototype</code></li>
</ol>

<p>也就是说，一个函数的原型链也要稍微复杂一些：</p>

<p><code>fn -&gt; Function.prototype -&gt; Object.prototype</code></p>

<h2 id="修改原型链">修改原型链</h2>

<p>通过直接修改 <code>__proto__</code> 就可以达到修改原型链的目的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">let</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
    <span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span> <span class="p">}</span>
    <span class="kd">let</span> <span class="nx">obj3</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">c</span><span class="o">:</span> <span class="mi">3</span> <span class="p">}</span>
    <span class="nx">obj2</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">obj1</span>
    <span class="nx">obj3</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">obj2</span>
</code></pre></td></tr></table>
</div>
</div>
<p>这样，他们的原型链就变成了：
<code>obj3 -&gt; obj2 -&gt; obj1 -&gt; Object.prototype</code></p>

<p>但是这种方法是不推荐的，我们更推荐使用 <code>Object.create()</code> 方法，他的使用方法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">let</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
    <span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">obj1</span><span class="p">)</span>
    <span class="nx">obj2</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="kd">let</span> <span class="nx">obj3</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">obj2</span><span class="p">)</span>
    <span class="nx">obj3</span><span class="p">.</span><span class="nx">c</span> <span class="o">=</span> <span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div>
<p>这样与上面直接修改 <code>__proto__</code> 效果是一样的。</p>

<h1 id="继承">继承</h1>

<p>这里我们就发现，如果我们按照上面的方法修改原型链，得到的原型链 <code>obj3 -&gt; obj2 -&gt; obj1 -&gt; Object.prototype</code> 有点问题！</p>

<p>他不满足 <code>对象.__proto__ === 其构造函数.prototype</code>！</p>

<p>这是当然的，因为 <code>obj1</code> 本来就不是 <code>obj2</code> 的构造函数。话说回来，<code>obj1</code> 根本就不是函数，他连 <code>prototype</code> 都没有。</p>

<p>所以说这里我们要明确一点，平时大家所说的继承（或者说类的继承），其实更多的是一种 <strong>狭义的继承</strong>。</p>

<p>他指的 <strong>不是</strong> 我们按照上面的方式 <strong>单纯对原型链进行的修改</strong>，<strong>而是</strong> 一种在 <strong>构造函数之间</strong> 的，有 <code>prototype</code> 存在的继承。</p>

<p><em>PS. 尽管在某些时候，我们使用 <code>Object.create()</code> 将原型链进行简单修改也被称为继承，但不是我们这里讨论的继承</em></p>

<p>那么问题来了，这种在 <strong>构造函数之间的继承</strong> 应该怎么写呢？</p>

<h2 id="第一步-使用-call-来调用父类构造函数">第一步：使用 <code>call</code> 来调用父类构造函数</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">姓名</span> <span class="o">=</span> <span class="nx">姓名</span>
    <span class="p">}</span>
    <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">自我介绍</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">你好，我是 </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">姓名</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nx">Student</span><span class="p">(</span><span class="nx">姓名</span><span class="p">,</span> <span class="nx">学号</span><span class="p">)</span><span class="p">{</span>
      <span class="nx">Person</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">姓名</span><span class="p">)</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">学号</span> <span class="o">=</span> <span class="nx">学号</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>可以通过 <code>console.dir()</code> 来分别看看 <code>Person</code> 和 <code>Student</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="c1">// Person
</span><span class="c1"></span>    <span class="p">{</span>
      <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Person&#34;</span><span class="p">,</span>
      <span class="nx">prototype</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">自我介绍</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span><span class="p">,</span>
        <span class="nx">constructor</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span><span class="p">,</span>
        <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span><span class="p">,</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="nx">__proto__</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span> <span class="c1">// Function.prototype
</span><span class="c1"></span>    <span class="p">}</span>
    
    <span class="c1">// Student
</span><span class="c1"></span>    <span class="p">{</span>
      <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Student&#34;</span><span class="p">,</span>
      <span class="nx">prototype</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">constructor</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">Student</span><span class="p">(</span><span class="nx">姓名</span><span class="p">,</span> <span class="nx">学号</span><span class="p">)</span><span class="p">,</span>
        <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span><span class="p">,</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="nx">__proto__</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span> <span class="c1">// Function.prototype
</span><span class="c1"></span>    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>我们尝试创建一个 <code>Student</code> 对象 <code>小明</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">let</span> <span class="nx">小明</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s1">&#39;小明&#39;</span><span class="p">,</span> <span class="mi">123456</span><span class="p">)</span>
    <span class="cm">/*
</span><span class="cm">    {
</span><span class="cm">      姓名: &#34;小明&#34;,
</span><span class="cm">      学号: 123456,
</span><span class="cm">    
</span><span class="cm">      __proto__: {
</span><span class="cm">        constructor: ƒ Student(姓名, 学号),
</span><span class="cm">        __proto__: Object,
</span><span class="cm">      }
</span><span class="cm">    
</span><span class="cm">    }
</span><span class="cm">    */</span>
    
    <span class="nx">小明</span><span class="p">.</span><span class="nx">自我介绍</span><span class="p">(</span><span class="p">)</span>
    <span class="c1">// Uncaught TypeError: 小明.自我介绍 is not a function
</span></code></pre></td></tr></table>
</div>
</div>
<blockquote>
<p><code>小明</code> 如何拿到 <code>学号</code> ？</p>
</blockquote>

<p>在 <code>new Student('小明', 123456)</code> 的时候，系统会去调用 <code>Student</code> 函数，并且把 <code>小明</code> 这个对象作为 <code>this</code> 传进去；</p>

<p>相当于在函数中执行了 <code>小明.学号 = 123456</code>。</p>

<blockquote>
<p><code>小明</code> 如何拿到 <code>姓名</code> ？</p>
</blockquote>

<p>同样，系统调用 <code>Student</code> 函数，看到了 <code>Person.call(this, 姓名)</code>（相当于 <code>Person.call(小明, '小明')</code>），意思是让 <code>Person</code> 中的 <code>this</code> 为 <code>小明</code>，并且传一个参数 <code>'小明'</code> 给 <code>Parent</code>；</p>

<p>然后将会调用 <code>Person</code> 函数，在 <code>Person</code> 中执行 <code>this.姓名 = 姓名</code>（相当于 <code>小明.姓名 = '小明'</code>）。</p>

<blockquote>
<p>为什么 <code>小明</code> 不能使用 <code>自我介绍</code> ？</p>
</blockquote>

<p>因为可以看到，<code>小明</code> 这个对象中没有 <code>自我介绍</code> 属性，他的 <code>__proto__</code> 中也没有，因此他找不到 <code>自我介绍</code></p>

<h2 id="第二步-建立原型链">第二步：建立原型链</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">Student</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>
<p>我们再打印出 <code>Student</code> 来看看</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="c1">// Student
</span><span class="c1"></span>    <span class="p">{</span>
      <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Student&#34;</span><span class="p">,</span>
      <span class="nx">prototype</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">__proto__</span><span class="o">:</span><span class="p">{</span>
          <span class="nx">自我介绍</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span><span class="p">,</span>
          <span class="nx">constructor</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span><span class="p">,</span>
          <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span><span class="p">,</span>
        <span class="p">}</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="nx">__proto__</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span> <span class="c1">// Function
</span><span class="c1"></span>    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>我们发现 <code>prototype</code> 里面的 <code>constructor</code> 不见了，并且里面的 <code>__proto__</code> 变得跟 <code>Person.prototype</code> 一样了</p>

<p>这个时候再 <code>new</code> 一个 <code>小花</code> 看看：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">let</span> <span class="nx">小花</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s1">&#39;小花&#39;</span><span class="p">,</span> <span class="mi">234567</span><span class="p">)</span>
    <span class="cm">/*
</span><span class="cm">    {
</span><span class="cm">      姓名: &#34;小花&#34;,
</span><span class="cm">      学号: 234567,
</span><span class="cm">      __proto__: {
</span><span class="cm">    
</span><span class="cm">        __proto__: {
</span><span class="cm">          自我介绍: ƒ (),
</span><span class="cm">          constructor: ƒ Person(姓名),
</span><span class="cm">          __proto__: Object,
</span><span class="cm">        }
</span><span class="cm">    
</span><span class="cm">      }
</span><span class="cm">    }
</span><span class="cm">    */</span>
    
    <span class="nx">小花</span><span class="p">.</span><span class="nx">自我介绍</span><span class="p">(</span><span class="p">)</span>
    <span class="c1">// &#39;你好，我是 小花&#39;
</span></code></pre></td></tr></table>
</div>
</div>
<p>小花现在会自我介绍了，但是还有个小问题，我们发现 <code>小花.__proto__</code> 中的 <code>constructor</code> 不见了！我们得赶紧修复一下。</p>

<h2 id="第三步-解决-constructor-的问题">第三步：解决 constructor 的问题</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="nx">Student</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Student</span>
</code></pre></td></tr></table>
</div>
</div>
<p>看看现在 <code>Student</code> 的样子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="c1">// Student
</span><span class="c1"></span>    <span class="p">{</span>
      <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Student&#34;</span><span class="p">,</span>
      <span class="nx">prototype</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">constructor</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">Student</span><span class="p">(</span><span class="nx">姓名</span><span class="p">,</span> <span class="nx">学号</span><span class="p">)</span><span class="p">,</span>
        <span class="nx">__proto__</span><span class="o">:</span><span class="p">{</span>
          <span class="nx">自我介绍</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span><span class="p">,</span>
          <span class="nx">constructor</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span><span class="p">,</span>
          <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span><span class="p">,</span>
        <span class="p">}</span>
      <span class="p">}</span><span class="p">,</span>
      <span class="nx">__proto__</span><span class="o">:</span> <span class="nx">ƒ</span> <span class="p">(</span><span class="p">)</span> <span class="c1">// Function
</span><span class="c1"></span>    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>最后请出我们的小红</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">let</span> <span class="nx">小红</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s1">&#39;小花&#39;</span><span class="p">,</span> <span class="mi">345678</span><span class="p">)</span>
    <span class="cm">/*
</span><span class="cm">    {
</span><span class="cm">      姓名: &#34;小红&#34;,
</span><span class="cm">      学号: 345678,
</span><span class="cm">      __proto__: {
</span><span class="cm">    
</span><span class="cm">        constructor: ƒ Student(姓名, 学号),
</span><span class="cm">    
</span><span class="cm">        __proto__: {
</span><span class="cm">          自我介绍: ƒ (),
</span><span class="cm">          constructor: ƒ Person(姓名),
</span><span class="cm">          __proto__: Object,
</span><span class="cm">        }
</span><span class="cm">    
</span><span class="cm">      }
</span><span class="cm">    }
</span><span class="cm">    */</span>
    
    <span class="nx">小红</span><span class="p">.</span><span class="nx">自我介绍</span><span class="p">(</span><span class="p">)</span>
    <span class="c1">// ‘你好，我是 小红’
</span></code></pre></td></tr></table>
</div>
</div>
<p>OK，一切正常。</p>

<h2 id="总结">总结</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">姓名</span> <span class="o">=</span> <span class="nx">姓名</span>
    <span class="p">}</span>
    
    <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">自我介绍</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">你好，我是 </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">姓名</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nx">Student</span><span class="p">(</span><span class="nx">姓名</span><span class="p">,</span> <span class="nx">学号</span><span class="p">)</span><span class="p">{</span>
      <span class="nx">Person</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">姓名</span><span class="p">)</span> <span class="c1">// 调用父级构造函数
</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">学号</span> <span class="o">=</span> <span class="nx">学号</span>
    <span class="p">}</span>
    
    <span class="nx">Student</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span> <span class="c1">// 建立原型链
</span><span class="c1"></span>    
    <span class="nx">Student</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Student</span> <span class="c1">// 解决 constructor 问题
</span><span class="c1"></span>    <span class="cm">/*
</span><span class="cm">    {
</span><span class="cm">      name: &#34;Student&#34;,
</span><span class="cm">    
</span><span class="cm">      prototype: {
</span><span class="cm">    
</span><span class="cm">        constructor: ƒ Student(姓名, 学号),
</span><span class="cm">        // Student.prototype 里面的 constructor 就是 Student
</span><span class="cm">    
</span><span class="cm">        __proto__:{
</span><span class="cm">          // Student.prototype 里面的 __proto__ 是 Person.prototype
</span><span class="cm">          自我介绍: ƒ (),
</span><span class="cm">          constructor: ƒ Person(姓名),
</span><span class="cm">          __proto__: Object,
</span><span class="cm">        }
</span><span class="cm">    
</span><span class="cm">      },
</span><span class="cm">    
</span><span class="cm">      __proto__: ƒ () // Function
</span><span class="cm">    }
</span><span class="cm">    */</span>
    
    <span class="nx">Student</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">报数</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">我的学号是 </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">学号</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">let</span> <span class="nx">小红</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s1">&#39;小红&#39;</span><span class="p">,</span> <span class="mi">345678</span><span class="p">)</span>
    <span class="cm">/*
</span><span class="cm">    {
</span><span class="cm">      姓名: &#34;小红&#34;
</span><span class="cm">      学号: 345678
</span><span class="cm">      __proto__: {
</span><span class="cm">    
</span><span class="cm">        constructor: ƒ Student(姓名, 学号)
</span><span class="cm">        // 小红 是由 Student 构造的
</span><span class="cm">        // 小红.__proto__ 跟 Student.prototype 是一样的
</span><span class="cm">    
</span><span class="cm">        __proto__: {
</span><span class="cm">          自我介绍: ƒ ()
</span><span class="cm">          constructor: ƒ Person(姓名)
</span><span class="cm">          __proto__: Object
</span><span class="cm">        }
</span><span class="cm">    
</span><span class="cm">      }
</span><span class="cm">    }
</span><span class="cm">    */</span>
    
    <span class="nx">小红</span><span class="p">.</span><span class="nx">自我介绍</span><span class="p">(</span><span class="p">)</span>
    <span class="nx">小红</span><span class="p">.</span><span class="nx">报数</span><span class="p">(</span><span class="p">)</span>
    <span class="c1">// ‘你好，我是 小红’
</span></code></pre></td></tr></table>
</div>
</div>
<h1 id="用-class-继承">用 class 继承</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
      <span class="nx">constructor</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">姓名</span> <span class="o">=</span> <span class="nx">姓名</span>
      <span class="p">}</span>
      <span class="nx">自我介绍</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">你好，我是 </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">姓名</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kr">class</span> <span class="nx">Student</span> <span class="kr">extends</span> <span class="nx">Person</span> <span class="p">{</span>
      <span class="nx">constructor</span><span class="p">(</span><span class="nx">姓名</span><span class="p">,</span> <span class="nx">学号</span><span class="p">)</span> <span class="p">{</span>
        <span class="kr">super</span><span class="p">(</span><span class="nx">姓名</span><span class="p">)</span> <span class="c1">// 这里的 姓名 两个字要与父类中的一样
</span><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">学号</span> <span class="o">=</span> <span class="nx">学号</span>
      <span class="p">}</span>
      <span class="nx">报数</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">我的学号是 </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">学号</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">let</span> <span class="nx">小红</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s1">&#39;小红&#39;</span><span class="p">,</span> <span class="mi">345678</span><span class="p">)</span>
    
    <span class="nx">小红</span><span class="p">.</span><span class="nx">自我介绍</span><span class="p">(</span><span class="p">)</span>
    <span class="nx">小红</span><span class="p">.</span><span class="nx">报数</span><span class="p">(</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">小项目：会动的代码 - Usagi & Piske</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-17-usagi-piske/" />
            <id>http://hais-teatime.com/post/2019-12-17-usagi-piske/</id>
            <updated>2020-01-28T17:22:13+08:00</updated>
            <published>2019-12-17T12:43:58+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[初学前端，使用原生 JavaScript 和 CSS 所做的一个小项目。点击可以查看 代码仓库 和 效果预览。]]></summary>
            
                <content type="html"><![CDATA[<p>初学前端，使用原生 JavaScript 和 CSS 所做的一个小项目。点击可以查看 <a href="https://github.com/Hyuain/usagi-piske-animated" target="_blank">代码仓库</a> 和 <a href="http://hais-teatime.com/usagi-piske-animated" target="_blank">效果预览</a>。</p>

<h1 id="css-部分">CSS 部分</h1>

<h2 id="关于选题">关于选题</h2>

<p>关于练习 CSS 最常见的就是仿写某个页面，但是总感觉这样做让人有些提不起兴趣，毕竟以后工作之后也会写很多页面，不如学习的时候就仿些别的东西？比如某个可爱的小生物？正巧又结识了 CodePen，看到上面有很多有趣的小栗子，着实让人有一试的欲望。于是就选择了 Kanahei 的 Usagi 和 Piske，图片不难又比较可爱，对于我现在的水平来说具有一定的可操作度。</p>

<h2 id="在项目中学习">在项目中学习</h2>

<h3 id="1-如何让屏幕不乱滚">1. 如何让屏幕不乱滚？</h3>

<p>首先我想要让移动端的屏幕不能随意缩放，因为我会针对移动端做特定的分辨率适配，而且两个小可爱是在屏幕底部的，如果让用户随意缩放，就可能产生一些不必要的错误，因此我得修改 VSCode 默认的 <code>viewport</code>，从淘宝手机版抄得 <code>width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,viewport-fit=cover</code>。</p>

<p>然后我发现 Usagi 实际上是圆角矩形的一部分，我不能让其他的部分也被用户看到，所以得给 <code>html</code> 和 <code>body</code> 加上 <code>overflow:hidden</code>，同时把它们的 <code>height</code> 都设置为 <code>100%</code>，如果只有一个设置，有时候可能会出现问题，所以索性两个都加上了。这样屏幕就不会乱滚了。</p>

<h3 id="2-usagi-的耳朵怎么画">2. Usagi 的耳朵怎么画？</h3>

<p>感觉图上的耳朵并不是完全对称的，恍惚间记得之前学习的时候 <code>border-radius</code> 有一个加斜线的高级用法，当时搞得不是很清楚，于是又去查了一下，最终使用了比较容易理解的 <code>border-top-left-radius</code> <code>border-top-right-radius</code> 来分别定义两个圆角，每个属性给予两个值，在控制台调试得到了比较合适的数值。</p>

<h3 id="3-usagi-的耳朵下面为什么有条细线">3. Usagi 的耳朵下面为什么有条细线？</h3>

<p>仔细观察总感觉 Usagi 的耳朵下面有一条细线，怎么调整他的位置都不会消失，怀疑可能是由于是斜线或者是四舍五入导致的细线，为了美观，为两个耳朵添加伪元素 <code>::after</code> 来遮住细线。</p>

<h3 id="4-usagi-的上嘴唇怎么画">4. Usagi 的上嘴唇怎么画？</h3>

<p>之前学习过一个用 <code>border</code> 来画三角形的案例，知道隐藏掉一些 <code>border</code> 可能会得到一些特殊的图案。总而言之先尝试隐藏掉两边，再用 <code>border-radius: 50%</code> 看看效果，发现效果还比较理想。</p>

<h3 id="5-移动端适配怎么做">5. 移动端适配怎么做？</h3>

<p>（2020-01-28 更新）</p>

<p>当之前所有的内容做完之后发现一个很大的问题，就是手机上有可能显示不下，因为所有的内容都是用 <code>px</code> 写死的，于是就又建了一个 CSS 文件，加上媒体查询，直接用 VSCode 替换将所有的属性在 <code>500px</code> 下时全部替换为 <code>calc(0.7*__px)</code> （笑）。今天 Renew 这个项目的时候，使用了 rem 方案来做移动端的适配，不过也比较简单，只是以 <code>500px</code> 为界设置了不同的 <code>font-size</code>，也没有用 JS 来动态改变 <code>font-size</code>，因为不希望在大屏设备上的两个小家伙变得太大。</p>

<h1 id="javascript-部分">JavaScript 部分</h1>

<h2 id="基本思路">基本思路</h2>

<p>思路其实蛮简单，就是将之前写好的 CSS 文件变成字符串，然后将这个字符串同时写到 <code>&lt;style&gt;&lt;/style&gt;</code> 标签和文本中，用计时器使得他一个字符一个字符地写入，同时控制写入的速度。</p>

<h2 id="在项目中学习-1">在项目中学习</h2>

<h3 id="1-如何一个字一个字地显示">1. 如何一个字一个字地显示？</h3>

<p>直接使用 <code>setInterval</code>，回调中写 <code>style.innerHTML</code> 和 <code>text.innerHTML</code> 均为 <code>styleCode.substring(0, n + 1)</code> 即可，<code>n</code> 从 <code>0</code> 开始，每次累加，当 <code>n &gt;= 0</code> 时，<code>clearInterval</code> 即可。</p>

<h3 id="2-如何显示空格和换行">2. 如何显示空格和换行？</h3>

<p>当被写入 <code>text</code> 之后，空格和换行都被忽略掉了，于是需要对要显示给用户看的 <code>text</code> 里面的文本内容进行特殊处理，将 <code>'\n'</code> 变为 <code>'&lt;br&gt;'</code>，将 <code>' '</code> 变为 <code>'nbsp'</code>。</p>

<h3 id="3-代码优化">3. 代码优化</h3>

<p>将整个控制组件封装到一个对象 <code>player</code> 中，通过 <code>init</code> 方法来初始化对象，在初始化时执行 <code>play</code> 和 <code>bindEvents</code> 方法，开始播放并为播放控件（三档速度调节、播放和暂停按钮）绑定事件。</p>

<h1 id="打包">打包</h1>

<p>（2020-01-28 更新）</p>

<p>最开始项目使用全局安装的 parcel 进行打包，因此项目没有 <code>package.json</code> 文件，项目的入口文件是 <code>src/index.html</code>，可以直接使用 parcel 命令来预览和开发。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">parcel src/index.html</code></pre></td></tr></table>
</div>
</div>
<p>项目 Renew 后加入了 <code>deploy.sh</code> 文件用于打包和上传，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 构建</span>
rm -rf dist <span class="o">&amp;&amp;</span> parcel build src/index.html --public-url ./ --no-cache --no-minify

<span class="c1"># 进入生成的构建文件夹</span>
<span class="nb">cd</span> dist

<span class="c1"># 初始化 git</span>
git init
git add -A
git commit -m <span class="s1">&#39;deploy&#39;</span>

<span class="c1"># 部署到 GitHub Pages</span>
git push -f git@github.com:Hyuain/usagi-piske-animated.git master:gh-pages

<span class="nb">cd</span> -</code></pre></td></tr></table>
</div>
</div>
<p>parcel 打包出来的 <code>index.html</code> 中引用的 CSS 和 JS 文件路径默认是根目录 <code>'/'</code>，但是如果部署在了二级目录下面，比如 GitHub Pages 的项目页下面，就会找不到地址，所以需要添加 <code>--public-url ./</code> ，将打包后的引用地址改为相对路径。</p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/css/" term="CSS" label="CSS" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E9%A1%B9%E7%9B%AE/" term="项目" label="项目" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">jQuery 初见</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-08-jquery/" />
            <id>http://hais-teatime.com/post/2019-12-08-jquery/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-12-08T10:34:18+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[本文是初学 jQuery API 的一些记录。]]></summary>
            
                <content type="html"><![CDATA[<p>本文是初学 jQuery API 的一些记录。</p>

<blockquote>
<p>本文参考了 <a href="http://www.ruanyifeng.com/blog/2011/07/jquery_fundamentals.html" target="_blank">阮一峰的博客</a> 、<a href="https://www.jquery123.com/jQuery/" target="_blank">jQuery中文文档</a> 及互联网上的公开内容</p>
</blockquote>

<h2 id="获取元素">获取元素</h2>

<p>通过使用执行 <code>jQuery()</code> 函数，我们可以得到一个 jQuery 对象，这个对象可以对选定的元素集合进行操作。<code>jQuery()</code> 也可以写作 <code>$()</code>。</p>

<p>他接受以下几种常用的参数（但不限于此）：</p>

<ul>
<li>CSS 选择器（selector），比如 <code>$('#myId')</code> <code>$('input[name=first]')</code> 等。</li>
<li>DOM 元素（组）（element / elementArray)</li>
<li>jQuery 对象</li>
<li>HTML 字符串，比如 <code>&lt;div&gt;&lt;/div&gt;</code>。jQuery 会根据它创建一个新的 DOM 元素，然后再创建一个 jQuery 对象。我们可以用一些方法使得他展现在页面上，具体例子比如：<code>$( &quot;&lt;p id='test'&gt;My &lt;em&gt;new&lt;/em&gt; text&lt;/p&gt;&quot; ).appendTo( &quot;body&quot; )</code></li>
</ul>

<p>我们可以通过对结果进行进一步操作，来缩小范围</p>

<ul>
<li><code>$('div').find('p')</code>，选择 <code>div</code> 中的 <code>p</code> 元素</li>
<li><code>$('div').next('p')</code>，选择 <code>div</code> 后面紧邻的 <code>p</code> 元素</li>
<li><code>$('div').prev('p')</code>，选择 <code>div</code> 前面紧邻的 <code>p</code> 元素</li>
<li><code>$('div').parent()</code>， 选择 <code>div</code> 的父元素</li>
<li><code>$('div').children()</code>，选择 <code>div</code> 的所有子元素</li>
<li><code>$('div').siblings()</code>，选择 <code>div</code> 的兄弟元素</li>
</ul>

<p>等等。</p>

<h2 id="链式操作">链式操作</h2>

<p>由于在 jQuery 中，每一个操作（方法）都将会返回一个 jQuery 对象，因此我们可以把下一个操作紧接着写在后面，具体表现为：</p>

<p><code>$('div').find('p').remove()</code></p>

<p>当我们使用 <code>.find()</code> 方法后，操作的元素就不再是 <code>div</code>，而是 <code>div p</code>，比如上面操作表示 <code>div p</code> 将被移除。此时若我们想返回上一层操作，只需要使用 <code>end()</code> 方法。</p>

<p><code>$('div').find('p').end()</code></p>

<h2 id="dom-操作">DOM 操作</h2>

<p>常用的 DOM 操作有这些：</p>

<ul>
<li><code>addClass()</code>：为选定的元素添加 class 名</li>
<li><code>after()</code>：在选定的元素同级的后面增加新元素</li>
<li><code>before()</code>：在选定的元素同级的前面增加新元素</li>
<li><code>append()</code>：在选定元素内部的末尾添加新元素</li>
<li><code>appendTo()</code>：将选定元素插入到某个元素内部的末尾（也就是成为其子元素）</li>
<li><code>attr()</code>：获取选定的第一个元素的属性值</li>
<li><code>clone()</code>：创建一个深拷贝副本</li>
<li><code>css()</code>：获取选定的第一个元素的某个 CSS 属性值；或者为每一个选定的元素添加一个 CSS 属性</li>
<li><code>empty()</code>：从 DOM 中移除选定元素的所有子节点</li>
<li><code>html()</code>：获取选定的第一个元素的 HTML 内容；或者为每一个选定的元素添加 HTML 内容</li>
<li><code>remove()</code>：删除匹配元素，同时删除事件</li>
<li><code>wrap()</code>：为每一个选定元素的外层包上一个 HTML 元素</li>
<li><code>wrapAll()</code>：在所有选定元素的外层包上一层 HTML 元素</li>
</ul>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/jquery/" term="jQuery" label="jQuery" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">函数的执行时机</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-12-06-js-let/" />
            <id>http://hais-teatime.com/post/2019-12-06-js-let/</id>
            <updated>2020-01-29T19:37:24+08:00</updated>
            <published>2019-12-03T09:00:59+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[本文将着重探讨函数的执行实机这个问题。]]></summary>
            
                <content type="html"><![CDATA[<p>本文将着重探讨函数的执行实机这个问题。</p>

<h1 id="函数的执行时机">函数的执行时机</h1>

<blockquote>
<p>函数中变量的值是在执行的时候确定的，而不是在定义的时候。</p>
</blockquote>

<p>我们再来看一下这一段代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">// 创建一个全局变量 i
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
      <span class="p">}</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>上面代码运行的结果是将会打印出 6 个 <code>6</code>，这是因为 setTimeout 有 <strong>超时延迟</strong> ，如果当前页面（或者操作系统/浏览器本身）<strong>被其他任务占用</strong>，则会产生延时，<strong>等到其他任务执行完之后，setTimeout 里面的函数才会被执行</strong>。</p>

<p>也就是说，等到该执行 <code>console.log(i)</code> 这句话的时候，<code>i</code> 的值已经被因为循环而修改成了 <code>6</code>。</p>

<p>为了让上面的代码能够打印出 <code>0 1 2 3 4 5</code>，我们可以这样改写代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
         <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
      <span class="p">}</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>这样 <code>i</code> 的作用域就只在 <code>for 循环</code> 内部，同时每次循环的时候，都会创建一个 <strong>新的局部变量 <code>i</code></strong>。当然要注意的是，这并不是改变了函数的执行顺序，<code>console.log(i)</code> 这句话仍然是在 <code>for 循环</code> 执行完毕之后再执行的，我们可以做一个实验：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
      <span class="p">}</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;End&#39;</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>这样写代码最后将会先打印 6 个 <code>'End'</code>，再打印 <code>0 1 2 3 4 5</code>。</p>

<blockquote>
<p>那么还没有别的解决方法呢？</p>
</blockquote>

<p>其实是有的，在 <code>let</code> 出现之前，我们仍然有其他的方法来达到想要的效果，下面就简单介绍一下其中的几种方法，他们的核心思路其实都是 <strong>把每一次的 <code>i</code> 都保存起来</strong>：</p>

<p><strong>第一种方法</strong> 实际上跟刚才的新语法原理上差不多，只不过更容易理解一些，先上代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">let</span> <span class="nx">i</span>   <span class="c1">// 创建全局变量 i
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span>   <span class="c1">// 创建局部变量 j
</span><span class="c1"></span>      <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>
      <span class="p">}</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;End&#39;</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>原理非常简单，我们在 <code>for 循环</code> 内部创建了一个新的 <strong>具有块级作用域的局部变量 <code>j</code></strong>，每次循环的时候，都会创建一个新的 <code>j</code>，于是我们用 <code>j</code> 来保存了每次的 <code>i</code>，当然他也会先打印 6 个 <code>'End'</code>，再打印 <code>0 1 2 3 4 5</code>。</p>

<p><strong>第二种方法</strong>，在 <code>let</code> 诞生之前，我们可以借助函数的传值来保存每一次的 <code>i</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">var</span> <span class="nx">i</span>   <span class="c1">// 这里是 let 还是 var 都不要紧，都是创建了一个全局变量，就像最开始的情况一样
</span><span class="c1"></span>    <span class="kd">function</span> <span class="nx">doSetTimeout</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
      <span class="p">}</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">doSetTimeout</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;End&#39;</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>看看代码执行的流程：</p>

<ol>
<li>首先我们定义了一个中间函数 <code>doSetTimeout</code></li>
<li>然后在 <code>for 循环</code> 中调用了这个函数</li>
<li>每次循环调用的时候，就传入一个参数 <code>i</code> 给 <code>doSetTimeout</code>，</li>
<li><code>doSetTimeout</code> 用形参 <code>i</code> 接收了这个传给他的参数，在这一步，实际上已经产生了 <strong>2 个 <code>i</code></strong>：

<ul>
<li>一个是 <strong>全局变量 <code>i</code></strong>（也就是 <code>for 循环</code> 中的 <code>i</code>）</li>
<li>一个是 <code>doSetTimeout</code> 这个函数里面的 <strong>局部变量 <code>i</code></strong></li>
</ul></li>
<li>每一次循环就会调用 <code>doSetTimeout</code> 一次，同时 <code>doSetTimeout</code> 会给自己创建一个 <strong>不一样的、新的局部变量 <code>i</code></strong></li>
<li>等循环结束后，<code>doSetTimeout</code> 再打印出所有的 <strong>局部变量 <code>i</code></strong></li>
</ol>

<blockquote>
<p>注意这里仍然没有改变执行的顺序！最终的结果仍然是先打印出 6 个 <code>'End'</code>，再打印 <code>0 1 2 3 4 5</code>。</p>
</blockquote>

<p>当我们理解了上面的写法的时候，我们可以最后看一下在 <code>let</code> 还没有出来的时代，是怎么借助函数创建 <strong>块级局部变量</strong> 的，也就是我们的 <strong>第三种写法</strong>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">    <span class="kd">var</span> <span class="nx">i</span>   <span class="c1">// 创建全局变量 i
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span>   <span class="c1">// 创建局部变量 j
</span><span class="c1"></span>          <span class="nx">setTimeout</span><span class="p">(</span><span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>
          <span class="p">}</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
      <span class="p">}</span><span class="p">)</span><span class="p">(</span><span class="p">)</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;End&#39;</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>
<p>这里，我们使用了 <strong>立即执行函数</strong>：<code>(function(...){...})()</code>，这种写法表示我声明一个函数，并且马上执行他。当执行结束之后，因为这个函数没有名字，也没有将地址赋值给某个变量，因此我们没办法再从别的地方再调用他，相当于是“一次性函数”。</p>

<p><code>var</code> 的作用域是函数级作用域，因此每个函数里面的 <code>j</code> 都是不一样的，我们再一次聪明地用 <strong>局部变量</strong> 保存了每一次 <strong>全局变量</strong> 的变化！</p>

<blockquote>
<p>总结：这几种写法都是为了利用 <strong>局部作用域</strong> ——他们有的利用了 ES 6 为我们提供的 <strong><code>let</code></strong>，有的使用了 <strong>函数</strong> ——来保存每一次 <code>for 循环</code> 中 <strong>全局变量</strong> 不同的值，<strong>但是，他们均不会改变执行的顺序！</strong></p>
</blockquote>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/javascript/" term="JavaScript" label="JavaScript" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">使用 Hugo 搭建个人博客</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-11-24-hugo/" />
            <id>http://hais-teatime.com/post/2019-11-24-hugo/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-11-24T15:17:20+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[作为一名前端开发者，平时可能会经常需要用到个人博客来记录学到的新知识来进行消化和方便后续的回顾，在这里就介绍一下如何使用 Hugo 这个工具来快速搭建一个模板化的、维护起来较为简单的个人博客。当然，在这里我们还需要使用到 GitHub Pages。]]></summary>
            
                <content type="html"><![CDATA[<p>作为一名前端开发者，平时可能会经常需要用到个人博客来记录学到的新知识来进行消化和方便后续的回顾，在这里就介绍一下如何使用 Hugo 这个工具来快速搭建一个模板化的、维护起来较为简单的个人博客。当然，在这里我们还需要使用到 GitHub Pages。</p>

<h2 id="github-pages">GitHub Pages</h2>

<p>首先我们可能需要了解一下什么是 <a href="https://pages.github.com/" target="_blank">GitHub Pages</a> ：</p>

<blockquote>
<p>GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，通过构建过程运行文件，然后发布网站。</p>
</blockquote>

<p>也就是说通过 GitHub 的这项服务，我们可以通过这样的方式来展示自己的 <strong>个人主页</strong>（*这里只讨论个人主页，当然他也可以用来托管组织或项目页面），他的域名是 <code>http(s)://&lt;username&gt;.github.io</code>：</p>

<ol>
<li><strong>Create</strong>: 在 GitHub 中创建一个名为 <code>&lt;username&gt;.github.io</code> 的仓库</li>
<li><strong>Clone</strong>: 把这个仓库拷贝到本地</li>
<li><strong>Edit</strong>: 在仓库中创建 <code>index.html</code> 等你所有想要的可以用来构建网站的文件</li>
<li><strong>Push</strong>: 将这个本地仓库 <code>Push</code> 到 GitHub 中</li>
<li><strong>Success</strong>：打开 <code>&lt;username&gt;.github.io</code> 即可访问</li>
</ol>

<h2 id="hugo">Hugo</h2>

<p>简单来说， Hugo 是一个由 GO 语言实现的静态网站生成器，我们可以把 Hugo 生成的页面部署到 GitHub Pages 服务中。</p>

<p>我们可以参照 Hugo 的 <a href="https://gohugo.io/" target="_blank">官方文档</a> 来指导我们操作。</p>

<h3 id="第一步-安装-hugo">第一步：安装 Hugo</h3>

<p>这里以 Windows 版本为例，其他操作系统的安装方法可以参照官方文档。</p>

<ol>
<li><a href="https://github.com/gohugoio/hugo/releases" target="_blank">点击链接</a> ，下载对应的压缩文件，比如 hugo_0.59.1_Windows-64bit.zip</li>
<li>解压缩，将 hugo.exe 文件放到一个安全的目录下（最好不要有空格），比如 <code>C:\Software\hugo\</code> 中</li>
<li><code>此电脑</code> - 右键 - <code>属性</code> - <code>高级系统设置</code> - <code>高级</code> - <code>环境变量</code> - 双击 <code>PATH</code> - 将 <code>C:\Software\hugo\</code> 添加进去</li>
</ol>

<h3 id="第二步-创建一个网页-生成器">第二步：创建一个网页（生成器）</h3>

<p>打开命令行，在喜欢的地方执行:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">hugo new site &lt;username&gt;.github.io-creator</code></pre></td></tr></table>
</div>
</div>
<p>上面的 <code>&lt;username&gt;.github.io-creator</code> 可以根据自己的需要进行更改，这一步是相当于创建了一个 Hugo 网页生成器</p>

<h3 id="第三步-添加默认主题">第三步：添加默认主题</h3>

<p>执行命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">git init
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
cd &lt;username&gt;.github.io-creator
echo &#39;theme = &#34;ananke&#34;&#39; &gt;&gt; config.toml</code></pre></td></tr></table>
</div>
</div>
<h3 id="第四步-添加文章">第四步：添加文章</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">hugo new posts/我的第一篇文章.md</code></pre></td></tr></table>
</div>
</div>
<h3 id="第五步-修改文章">第五步：修改文章</h3>

<p>将会打开这样的一个 <code>markdown</code> 文件，在下面编辑好了之后，将 <code>draft</code> 改为 <code>false</code> 然后保存。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">---
title: &#34;我的第一篇文章&#34;
date: 2019-03-26T08:47:11+01:00
draft: true
---
# 大家好！

这是我的第一篇文章</code></pre></td></tr></table>
</div>
</div>
<h3 id="第六步-修改配置">第六步：修改配置</h3>

<p>打开 <code>config.toml</code>，将会出现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">baseURL = &#34;https://example.org/&#34;
languageCode = &#34;en-us&#34;
title = &#34;My New Hugo Site&#34;
theme = &#34;ananke&#34;</code></pre></td></tr></table>
</div>
</div>
<p>将其中的语言改为 <code>zh-Hans</code>，标题改为自己喜欢的标题即可</p>

<h3 id="第六步-运行-hugo-server">第六步：运行 Hugo Server</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">hugo server -D</code></pre></td></tr></table>
</div>
</div>
<p>他会提示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">                   | EN
+------------------+----+
  Pages            | 10
  Paginator pages  |  0
  Non-page files   |  0
  Static files     |  3
  Processed images |  0
  Aliases          |  1
  Sitemaps         |  1
  Cleaned          |  0

Total in 11 ms
Watching for changes in /Users/bep/quickstart/{content,data,layouts,static,themes}
Watching for config changes in /Users/bep/quickstart/config.toml
Environment: &#34;development&#34;
Serving pages from memory
Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender
Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
Press Ctrl+C to stop</code></pre></td></tr></table>
</div>
</div>
<p>这样整个博客就将会被部署到本地服务器 <code>http://localhost:1313/</code> 上面了</p>

<h3 id="第七步-发布到-public">第七步：发布到 Public</h3>

<p>执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">hugo -D</code></pre></td></tr></table>
</div>
</div>
<p>hugo 就会创建一个新的目录，叫做 Public ，接下来我们要做三件事：</p>

<ol>
<li>在 <code>&lt;username&gt;.github.io-creator</code> 里面创建 <code>.gitignore</code> 文件，在里面添加 <code>/public/</code></li>
<li>打开 <code>public</code> 目录，将 <code>public</code> 目录单独上传到 GitHub 中名为 <code>&lt;username&gt;.github.io</code> 中</li>
<li>打开 <code>http://&lt;username&gt;.github.io</code> 就可以看到自己的博客啦</li>
</ol>

<p><em>注意 GitHub Pages 服务会默认将 <code>&lt;username&gt;.github.io</code> 仓库中的 <code>Master</code> 分支里的内容放到页面上，GitHub Pages 相关的设置可以在仓库的 Settings 中的 GitHub Pages 里找到</em></p>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/html/" term="HTML" label="HTML" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%8D%9A%E5%AE%A2/" term="博客" label="博客" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">开博大吉</title>
            <link rel="alternate" type="text/html" href="http://hais-teatime.com/post/2019-11-22-new/" />
            <id>http://hais-teatime.com/post/2019-11-22-new/</id>
            <updated>2020-01-28T11:35:42+08:00</updated>
            <published>2019-11-22T17:55:49+08:00</published>
            <author>
                    <name>Harvey Zhang</name>
                    <uri>http://hais-teatime.com/</uri>
                    <email>Hyuain97@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html"><![CDATA[大家好 这是我的第一篇博客，希望以后能写出好文章哦]]></summary>
            
                <content type="html"><![CDATA[

<h1 id="大家好">大家好</h1>

<p>这是我的第一篇博客，希望以后能写出好文章哦</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/categories/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/" term="从小白开始的前端学习之旅" label="从小白开始的前端学习之旅" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%8D%9A%E5%AE%A2/" term="博客" label="博客" />
                            
                        
                            
                            
                            
                                <category scheme="http://hais-teatime.com/tags/%E5%85%A5%E9%97%A8/" term="入门" label="入门" />
                            
                        
                    
                
            
        </entry>
    
</feed>